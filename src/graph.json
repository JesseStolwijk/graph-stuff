{
  "nodes": [
    {
      "id": 0.8100122491464732,
      "title": "docusaurus.config.js",
      "fileContents": "---\nid: docusaurus.config.js\ntitle: docusaurus.config.js\ndescription: API reference for Docusaurus configuration file.\nslug: /docusaurus.config.js\n---\n\n## Overview\n\n`docusaurus.config.js` contains configurations for your site and is placed in the root directory of your site.\n\n## Required fields\n\n### `title`\n\n- Type: `string`\n\nTitle for your website.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  title: 'Docusaurus',\n};\n```\n\n### `favicon`\n\n- Type: `string`\n\nURL for site favicon. Example:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  favicon: 'https://v2.docusaurus.io/favicon.ico',\n};\n```\n\nYou can also use the favicon URL relative to the `static` directory of your site. For example, your site has the following directory structure:\n\n```bash\n.\n├── README.md\n├ # ... other files in root directory\n└─ static\n    └── img\n        └── favicon.ico\n```\n\nSo you can refer it like below:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  favicon: 'img/favicon.ico',\n};\n```\n\n### `url`\n\n- Type: `string`\n\nURL for your website. This can also be considered the top-level hostname. For example, `https://facebook.github.io` is the URL of https://facebook.github.io/metro/, and `https://docusaurus.io` is the URL for https://docusaurus.io. This field is related to the [baseUrl](#baseurl) field.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  url: 'https://docusaurus.io',\n};\n```\n\n### `baseUrl`\n\n- Type: `string`\n\nBase URL for your site. This can also be considered the path after the host. For example, `/metro/` is the baseUrl of https://facebook.github.io/metro/. For URLs that have no path, the baseUrl should be set to `/`. This field is related to the [url](#url) field.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  baseUrl: '/',\n};\n```\n\n## Optional fields\n\n### `noIndex`\n\n- Type: `boolean`\n\nThis option adds `<meta name=\"robots\" content=\"noindex, nofollow\">` in pages, to tell search engines to avoid indexing your site (more information [here](https://moz.com/learn/seo/robots-meta-directives)).\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  noIndex: true, // Defaults to `false`\n};\n```\n\n### `onBrokenLinks`\n\n- Type: `'ignore' | 'log' | 'warn' | 'error' | 'throw'`\n\nThe behavior of Docusaurus, when it detects any broken link.\n\nBy default, it throws an error, to ensure you never ship any broken link, but you can lower this security if needed.\n\n:::note\n\nThe broken links detection is only available for a production build (`docusaurus build`).\n\n:::\n\n### `onBrokenMarkdownLinks`\n\n- Type: `'ignore' | 'log' | 'warn' | 'error' | 'throw'`\n\nThe behavior of Docusaurus, when it detects any broken markdown link.\n\nBy default, it prints a warning, to let you know about your broken markdown link, but you can change this security if needed.\n\n### `onDuplicateRoutes`\n\n- Type: `'ignore' | 'log' | 'warn' | 'error' | 'throw'`\n\nThe behavior of Docusaurus when it detects any [duplicate routes](/guides/creating-pages.md#duplicate-routes).\n\nBy default, it displays a warning after you run `yarn start` or `yarn build`.\n\n### `tagline`\n\n- Type: `string`\n\nThe tagline for your website.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  tagline:\n    'Docusaurus makes it easy to maintain Open Source documentation websites.',\n};\n```\n\n### `organizationName`\n\n- Type: `string`\n\nThe GitHub user or organization that owns the repository. Used by the deployment command.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // Docusaurus' organization is facebook\n  organizationName: 'facebook',\n};\n```\n\n### `projectName`\n\n- Type: `string`\n\nThe name of the GitHub repository. Used by the deployment command.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  projectName: 'docusaurus',\n};\n```\n\n### `githubHost`\n\n- Type: `string`\n\nThe hostname of your server. Useful if you are using GitHub Enterprise.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  githubHost: 'github.com',\n};\n```\n\n### `themeConfig`\n\n- Type: `Object`\n\n<!-- TODO: explain that theme configurations will be consumed by the theme, and link to theme doc -->\n\nAn object containing data needed by the theme you use.<!--, see [theme configurations](#).-->\n\nFor Docusaurus' default theme _classic_, we use `themeConfig` to customize your navbar and footer links:\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    colorMode: {\n      defaultMode: 'light',\n      disableSwitch: false,\n      respectPrefersColorScheme: true,\n      switchConfig: {\n        darkIcon: '🌙',\n        lightIcon: '\\u2600',\n        // React inline style object\n        // see https://reactjs.org/docs/dom-elements.html#style\n        darkIconStyle: {\n          marginLeft: '2px',\n        },\n        lightIconStyle: {\n          marginLeft: '1px',\n        },\n      },\n    },\n    navbar: {\n      title: 'Site Title',\n      logo: {\n        alt: 'Site Logo',\n        src: 'img/logo.svg',\n      },\n      items: [\n        {\n          to: 'docs/docusaurus.config.js',\n          activeBasePath: 'docs',\n          label: 'docusaurus.config.js',\n          position: 'left',\n        },\n        // ... other links\n      ],\n    },\n    footer: {\n      style: 'dark',\n      links: [\n        {\n          title: 'Docs',\n          items: [\n            {\n              label: 'Docs',\n              to: 'docs/doc1',\n            },\n          ],\n        },\n        // ... other links\n      ],\n      logo: {\n        alt: 'Facebook Open Source Logo',\n        src: 'https://docusaurus.io/img/oss_logo.png',\n      },\n      copyright: `Copyright © ${new Date().getFullYear()} Facebook, Inc.`, // You can also put own HTML here\n    },\n  },\n};\n```\n\n### `plugins`\n\n<!-- TODO: configuration for plugins -->\n\n- Type: `any[]`\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [],\n};\n```\n\n### `themes`\n\n<!-- TODO: configuration for plugins -->\n\n- Type: `any[]`\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  themes: [],\n};\n```\n\n### `presets`\n\n<!-- TODO: configuration for presets -->\n\n- Type: `any[]`\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  presets: [],\n};\n```\n\n### `customFields`\n\nDocusaurus guards `docusaurus.config.js` from unknown fields. To add a custom field, define it on `customFields`.\n\n- Type: `Object`\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  customFields: {\n    admin: 'endi',\n    superman: 'lol',\n  },\n};\n```\n\nAttempting to add unknown field in the config will lead to error in build time:\n\n```bash\nError: The field(s) 'foo', 'bar' are not recognized in docusaurus.config.js\n```\n\n### `scripts`\n\nAn array of scripts to load. The values can be either strings or plain objects of attribute-value maps. The `<script>` tags will be inserted in the HTML `<head>`.\n\nNote that `<script>` added here are render-blocking so you might want to add `async: true`/`defer: true` to the objects.\n\n- Type: `(string | Object)[]`\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  scripts: [\n    // String format.\n    'https://docusaurus.io/script.js',\n    // Object format.\n    {\n      src:\n        'https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js',\n      async: true,\n    },\n  ],\n};\n```\n\n### `clientModules`\n\nAn array of client modules to load globally on your site:\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  clientModules: [\n    require.resolve('./mySiteGlobalJs.js'),\n    require.resolve('./mySiteGlobalCss.css'),\n  ],\n};\n```\n\nSee also: [`getClientModules()`](lifecycle-apis.md#getclientmodules).\n\n### `ssrTemplate`\n\nAn HTML template written in [Eta's syntax](https://eta.js.org/docs/syntax#syntax-overview) that will be used to render your application. This can be used to set custom attributes on the `body` tags, additional `meta` tags, customize the `viewport`, etc. Please note that Docusaurus will rely on the template to be correctly structured in order to function properly, once you do customize it, you will have to make sure that your template is compliant with the requirements from `upstream`.\n\n- Type: `string`\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  ssrTemplate: `<!DOCTYPE html>\n<html <%~ it.htmlAttributes %>>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=0.86, maximum-scale=3.0, minimum-scale=0.86\">\n    <meta name=\"generator\" content=\"Docusaurus v<%= it.version %>\">\n    <%~ it.headTags %>\n    <% it.metaAttributes.forEach((metaAttribute) => { %>\n      <%~ metaAttribute %>\n    <% }); %>\n    <% it.stylesheets.forEach((stylesheet) => { %>\n      <link rel=\"stylesheet\" type=\"text/css\" href=\"<%= it.baseUrl %><%= stylesheet %>\" />\n    <% }); %>\n    <% it.scripts.forEach((script) => { %>\n      <link rel=\"preload\" href=\"<%= it.baseUrl %><%= script %>\" as=\"script\">\n    <% }); %>\n  </head>\n  <body <%~ it.bodyAttributes %> itemscope=\"\" itemtype=\"http://schema.org/Organization\">\n    <%~ it.preBodyTags %>\n    <div id=\"__docusaurus\">\n      <%~ it.appHtml %>\n    </div>\n    <div id=\"outside-docusaurus\">\n      <span>Custom markup</span>\n    </div>\n    <% it.scripts.forEach((script) => { %>\n      <script type=\"text/javascript\" src=\"<%= it.baseUrl %><%= script %>\"></script>\n    <% }); %>\n    <%~ it.postBodyTags %>\n  </body>\n</html>\n};\n```\n\n### `stylesheets`\n\nAn array of CSS sources to load. The values can be either strings or plain objects of attribute-value maps. The `<link>` tags will be inserted in the HTML `<head>`.\n\n- Type: `(string | Object)[]`\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  stylesheets: [\n    // String format.\n    'https://docusaurus.io/style.css',\n    // Object format.\n    {\n      href: 'http://mydomain.com/style.css',\n      type: 'text/css',\n    },\n  ],\n};\n```\n\n### `titleDelimiter`\n\n- Type: `string`\n\nA string that will be used as title delimiter in the generated `<title>` tag.\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  titleDelimiter: '🦖', // Defaults to `|`\n};\n```\n\n### `baseUrlIssueBanner`\n\n- Type: `boolean`\n\nWhen enabled, will show a banner in case your site can't load its CSS or JavaScript files, which is a very common issue, often related to a wrong `baseUrl` in site config.\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  baseUrlIssueBanner: true, // Defaults to `true`\n};\n```\n\n![baseUrlIssueBanner](/img/baseUrlIssueBanner.png)\n\n:::caution\n\nThis banner need to inline CSS / JS.\n\nIf you have a strict [Content Security Policy](https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP), you should rather disable it.\n\n:::\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.18147342015251167,
      "title": "creating-pages",
      "fileContents": "---\nid: creating-pages\ntitle: Creating Pages\nslug: /creating-pages\n---\n\nIn this section, we will learn about creating ad-hoc pages in Docusaurus using React. This is most useful for creating one-off standalone pages like a showcase page, playground page or support page.\n\nThe functionality of pages is powered by `@docusaurus/plugin-content-pages`.\n\nYou can use React components, or Markdown.\n\n## Add a React page\n\nCreate a file `/src/pages/helloReact.js`:\n\n```jsx title=\"/src/pages/helloReact.js\"\nimport React from 'react';\nimport Layout from '@theme/Layout';\n\nfunction Hello() {\n  return (\n    <Layout title=\"Hello\">\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          height: '50vh',\n          fontSize: '20px',\n        }}>\n        <p>\n          Edit <code>pages/hello.js</code> and save to reload.\n        </p>\n      </div>\n    </Layout>\n  );\n}\n\nexport default Hello;\n```\n\nOnce you save the file, the development server will automatically reload the changes. Now open `http://localhost:3000/helloReact`, you will see the new page you just created.\n\nEach page doesn't come with any styling. You will need to import the `Layout` component from `@theme/Layout` and wrap your contents within that component if you want the navbar and/or footer to appear.\n\n:::tip\n\nYou can also create TypeScript pages with the `.tsx` extension (`helloReact.tsx`).\n\n:::\n\n## Add a Markdown page\n\nCreate a file `/src/pages/helloMarkdown.md`:\n\n```mdx title=\"/src/pages/helloMarkdown.md\"\n---\ntitle: my hello page title\ndescription: my hello page description\nhide_table_of_contents: true\n---\n\n# Hello\n\nHow are you?\n```\n\nIn the same way, a page will be created at `http://localhost:3000/helloMarkdown`.\n\nMarkdown pages are less flexible than React pages, because it always uses the theme layout.\n\nHere's an [example Markdown page](/examples/markdownPageExample).\n\n:::tip\n\nYou can use the full power of React in Markdown pages too, refer to the [MDX](https://mdxjs.com/) documentation.\n\n:::\n\n## Routing\n\nIf you are familiar with other static site generators like Jekyll and Next, this routing approach will feel familiar to you. Any JavaScript file you create under `/src/pages/` directory will be automatically converted to a website page, following the `/src/pages/` directory hierarchy. For example:\n\n- `/src/pages/index.js` → `<baseUrl>`\n- `/src/pages/foo.js` → `<baseUrl>/foo`\n- `/src/pages/foo/test.js` → `<baseUrl>/foo/test`\n- `/src/pages/foo/index.js` → `<baseUrl>/foo/`\n\nIn this component-based development era, it is encouraged to co-locate your styling, markup and behavior together into components. Each page is a component, and if you need to customize your page design with your own styles, we recommend co-locating your styles with the page component in its own directory. For example, to create a \"Support\" page, you could do one of the following:\n\n- Add a `/src/pages/support.js` file\n- Create a `/src/pages/support/` directory and a `/src/pages/support/index.js` file.\n\nThe latter is preferred as it has the benefits of letting you put files related to the page within that directory. For example, a CSS module file (`styles.module.css`) with styles meant to only be used on the \"Support\" page. **Note:** this is merely a recommended directory structure and you will still need to manually import the CSS module file within your component module (`support/index.js`). By default, any Markdown or Javascript file starting with `_` will be ignored, and no routes will be created for that file (see the `exclude` option).\n\n```sh\nmy-website\n├── src\n│   └── pages\n│       ├── styles.module.css\n│       ├── index.js\n|       ├──_ignored.js\n│       └── support\n│           ├── index.js\n│           └── styles.module.css\n.\n```\n\n:::caution\n\nAll JavaScript/TypeScript files within the `src/pages/` directory will have corresponding website paths generated for them. If you want to create reusable components into that directory, use the `exclude` option (by default, files prefixed with `_`, test files(`.test.js`) and files in `__tests__` directory are not turned into pages).\n\n:::\n\n## Using React\n\nReact is used as the UI library to create pages. Every page component should export a React component, and you can leverage on the expressiveness of React to build rich and interactive content.\n\n## Duplicate Routes\n\nYou may accidentally create multiple pages that are meant to be accessed on the same route. When this happens, Docusaurus will warn you about duplicate routes when you run `yarn start` or `yarn build`, but the site will still be built successfully. The page that was created last will be accessible, but it will override other conflicting pages. To resolve this issue, you should modify or remove any conflicting routes.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.4681945550002311,
      "title": "migrating-from-v1-to-v2",
      "fileContents": "---\nid: migrating-from-v1-to-v2\ntitle: Migrating from v1 to v2\nslug: /migrating-from-v1-to-v2\n---\n\nimport ColorGenerator from '@site/src/components/ColorGenerator';\n\n:::caution\n\nFor v1 translated sites, the migration doc is not available yet.\n\n:::\n\nThis doc guides you through migrating an existing Docusaurus 1 site to Docusaurus 2.\n\nYour Docusaurus 1 site should have the following structure:\n\n```sh\n├── docs\n└── website\n    ├── blog\n    ├── core\n    │   └── Footer.js\n    ├── package.json\n    ├── pages\n    ├── sidebars.json\n    ├── siteConfig.js\n    └── static\n```\n\nAfter the migration, your Docusaurus 2 site could look like:\n\n```sh\nwebsite\n├── blog\n├── docs\n├── src\n│   ├── components\n│   ├── css\n│   └── pages\n├── static\n├── package.json\n├── sidebars.json\n├── docusaurus.config.js\n```\n\n:::tip\n\nYou can use the [migration command](#migration-command) to take care of some of the migration chores.\n\n:::\n\n## Project setup\n\n### `package.json`\n\n#### Scoped package names\n\nIn Docusaurus 2, we use scoped package names:\n\n- `docusaurus` -> `@docusaurus/core`\n\nThis provides a clear distinction between Docusaurus' official packages and community maintained packages. In another words, all Docusaurus' official packages are namespaced under `@docusaurus/`.\n\nMeanwhile, the default doc site functionalities provided by Docusaurus 1 are now provided by `@docusaurus/preset-classic`. Therefore, we need to add this dependency as well:\n\n```diff title=\"package.json\"\n{\n  dependencies: {\n-   \"docusaurus\": \"^1.x.x\",\n+   \"@docusaurus/core\": \"^2.0.0-alpha.48\",\n+   \"@docusaurus/preset-classic\": \"^2.0.0-alpha.48\",\n  }\n}\n```\n\n:::tip\n\nPlease use the most recent Docusaurus 2 alpha version, which you can check out [here](https://www.npmjs.com/package/@docusaurus/core) (it's tagged `next`).\n\n:::\n\n#### CLI commands\n\nMeanwhile, CLI commands are renamed to `docusaurus <command>` (instead of `docusaurus-command`).\n\nThe `\"scripts\"` section of your `package.json` should be updated as follows:\n\n```json {3-6} title=\"package.json\"\n{\n  \"scripts\": {\n    \"start\": \"docusaurus start\",\n    \"build\": \"docusaurus build\",\n    \"swizzle\": \"docusaurus swizzle\",\n    \"deploy\": \"docusaurus deploy\"\n    // ...\n  }\n}\n```\n\nA typical Docusaurus 2 `package.json` may look like this:\n\n```json title=\"package.json\"\n{\n  \"scripts\": {\n    \"docusaurus\": \"docusaurus\",\n    \"start\": \"docusaurus start\",\n    \"build\": \"docusaurus build\",\n    \"swizzle\": \"docusaurus swizzle\",\n    \"deploy\": \"docusaurus deploy\",\n    \"serve\": \"docusaurus serve\",\n    \"clear\": \"docusaurus clear\"\n  },\n  \"dependencies\": {\n    \"@docusaurus/core\": \"^2.0.0-alpha.66\",\n    \"@docusaurus/preset-classic\": \"^2.0.0-alpha.66\",\n    \"clsx\": \"^1.1.1\",\n    \"react\": \"^16.8.4\",\n    \"react-dom\": \"^16.8.4\"\n  },\n  \"browserslist\": {\n    \"production\": [\">0.5%\", \"not dead\", \"not op_mini all\"],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\"\n    ]\n  }\n}\n```\n\n### Update references to the `build` directory\n\nIn Docusaurus 1, all the build artifacts are located within `website/build/<PROJECT_NAME>`.\n\nIn Docusaurus 2, it is now moved to just `website/build`. Make sure that you update your deployment configuration to read the generated files from the correct `build` directory.\n\nIf you are deploying to GitHub pages, make sure to run `yarn deploy` instead of `yarn publish-gh-pages` script.\n\n### `.gitignore`\n\nThe `.gitignore` in your `website` should contain:\n\n```bash title=\".gitignore\"\n# dependencies\n/node_modules\n\n# production\n/build\n\n# generated files\n.docusaurus\n.cache-loader\n\n# misc\n.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local\n\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n```\n\n### `README`\n\nThe D1 website may have an existing README file. You can modify it to reflect the D2 changes, or copy the default [Docusaurus v2 README](https://github.com/facebook/docusaurus/blob/master/packages/docusaurus-init/templates/classic/README.md).\n\n## Site configurations\n\n### `docusaurus.config.js`\n\nRename `siteConfig.js` to `docusaurus.config.js`.\n\nIn Docusaurus 2, we split each functionality (blog, docs, pages) into plugins for modularity. Presets are bundles of plugins and for backward compatibility we built a `@docusaurus/preset-classic` preset which bundles most of the essential plugins present in Docusaurus 1.\n\nAdd the following preset configuration to your `docusaurus.config.js`.\n\n```jsx title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          // Docs folder path relative to website dir.\n          path: '../docs',\n          // Sidebars file relative to website dir.\n          sidebarPath: require.resolve('./sidebars.json'),\n        },\n        // ...\n      },\n    ],\n  ],\n};\n```\n\nWe recommend moving the `docs` folder into the `website` folder and that is also the default directory structure in v2. [Now](https://zeit.co/now) supports [Docusaurus project deployments out-of-the-box](https://github.com/zeit/now-examples/tree/master/docusaurus) if the `docs` directory is within the `website`. It is also generally better for the docs to be within the website so that the docs and the rest of the website code are co-located within one `website` directory.\n\nIf you are migrating your Docusaurus v1 website, and there are pending documentation pull requests, you can temporarily keep the `/docs` folder to its original place, to avoid producing conflicts.\n\nRefer to migration guide below for each field in `siteConfig.js`.\n\n### Updated fields\n\n#### `baseUrl`, `tagline`, `title`, `url`, `favicon`, `organizationName`, `projectName`, `githubHost`, `scripts`, `stylesheets`\n\nNo actions needed, these configuration fields were not modified.\n\n#### `colors`\n\nDeprecated. We wrote a custom CSS framework for Docusaurus 2 called [Infima](https://facebookincubator.github.io/infima/) which uses CSS variables for theming. The docs are not quite ready yet and we will update here when it is. To overwrite Infima's CSS variables, create your own CSS file (e.g. `./src/css/custom.css`) and import it globally by passing it as an option to `@docusaurus/preset-classic`:\n\n```js {7-9} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        theme: {\n          customCss: [require.resolve('./src/css/custom.css')],\n        },\n      },\n    ],\n  ],\n};\n```\n\nInfima uses 7 shades of each color.\n\n```css title=\"/src/css/custom.css\"\n/**\n * You can override the default Infima variables here.\n * Note: this is not a complete list of --ifm- variables.\n */\n:root {\n  --ifm-color-primary: #25c2a0;\n  --ifm-color-primary-dark: rgb(33, 175, 144);\n  --ifm-color-primary-darker: rgb(31, 165, 136);\n  --ifm-color-primary-darkest: rgb(26, 136, 112);\n  --ifm-color-primary-light: rgb(70, 203, 174);\n  --ifm-color-primary-lighter: rgb(102, 212, 189);\n  --ifm-color-primary-lightest: rgb(146, 224, 208);\n}\n```\n\nWe recommend using [ColorBox](https://www.colorbox.io/) to find the different shades of colors for your chosen primary color.\n\nAlteratively, use the following tool to generate the different shades for your website and copy the variables into `src/css/custom.css`.\n\n<ColorGenerator/>\n\n#### `footerIcon`, `copyright`, `ogImage`, `twitterImage`, `docsSideNavCollapsible`\n\nSite meta info such as assets, SEO, copyright info are now handled by themes. To customize them, use the `themeConfig` field in your `docusaurus.config.js`:\n\n```jsx title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    footer: {\n      logo: {\n        alt: 'Facebook Open Source Logo',\n        src: 'https://docusaurus.io/img/oss_logo.png',\n        href: 'https://opensource.facebook.com/',\n      },\n      copyright: `Copyright © ${new Date().getFullYear()} Facebook, Inc.`, // You can also put own HTML here.\n    },\n    image: 'img/docusaurus.png',\n    // Equivalent to `docsSideNavCollapsible`.\n    sidebarCollapsible: false,\n    // ...\n  },\n};\n```\n\n#### `headerIcon`, `headerLinks`\n\nIn Docusaurus 1, header icon and header links were root fields in `siteConfig`:\n\n```js title=\"siteConfig.js\"\nheaderIcon: 'img/docusaurus.svg',\nheaderLinks: [\n  { doc: \"doc1\", label: \"Getting Started\" },\n  { page: \"help\", label: \"Help\" },\n  { href: \"https://github.com/\", label: \"GitHub\" },\n  { blog: true, label: \"Blog\" },\n],\n```\n\nNow, these two fields are both handled by the theme:\n\n```jsx {6-19} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      title: 'Docusaurus',\n      logo: {\n        alt: 'Docusaurus Logo',\n        src: 'img/docusaurus.svg',\n      },\n      items: [\n        {to: 'docs/doc1', label: 'Getting Started', position: 'left'},\n        {to: 'help', label: 'Help', position: 'left'},\n        {\n          href: 'https://github.com/',\n          label: 'GitHub',\n          position: 'right',\n        },\n        {to: 'blog', label: 'Blog', position: 'left'},\n      ],\n    },\n    // ...\n  },\n};\n```\n\n#### `algolia`\n\n```jsx {4-8} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    algolia: {\n      apiKey: '47ecd3b21be71c5822571b9f59e52544',\n      indexName: 'docusaurus-2',\n      algoliaOptions: { //... },\n    },\n    // ...\n  },\n};\n```\n\n#### `blogSidebarCount`\n\nDeprecated. Pass it as a blog option to `@docusaurus/preset-classic` instead:\n\n```jsx {8} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        blog: {\n          postsPerPage: 10,\n        },\n        // ...\n      },\n    ],\n  ],\n};\n```\n\n#### `cname`\n\nDeprecated. Create a `CNAME` file in your `static` folder instead with your custom domain. Files in the `static` folder will be copied into the root of the `build` folder during execution of the build command.\n\n#### `customDocsPath`, `docsUrl`, `editUrl`, `enableUpdateBy`, `enableUpdateTime`\n\n**BREAKING**: `editUrl` should point to (website) Docusaurus project instead of `docs` directory.\n\nDeprecated. Pass it as an option to `@docusaurus/preset-classic` docs instead:\n\n```jsx {8-20} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          // Equivalent to `customDocsPath`.\n          path: 'docs',\n          // Equivalent to `editUrl` but should point to `website` dir instead of `website/docs`.\n          editUrl: 'https://github.com/facebook/docusaurus/edit/master/website',\n          // Equivalent to `docsUrl`.\n          routeBasePath: 'docs',\n          // Remark and Rehype plugins passed to MDX. Replaces `markdownOptions` and `markdownPlugins`.\n          remarkPlugins: [],\n          rehypePlugins: [],\n          // Equivalent to `enableUpdateBy`.\n          showLastUpdateAuthor: true,\n          // Equivalent to `enableUpdateTime`.\n          showLastUpdateTime: true,\n        },\n        // ...\n      },\n    ],\n  ],\n};\n```\n\n#### `gaTrackingId`\n\n```jsx {5} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    googleAnalytics: {\n      trackingID: 'UA-141789564-1',\n    },\n    // ...\n  },\n};\n```\n\n#### `gaGtag`\n\n```jsx {5} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    gtag: {\n      trackingID: 'UA-141789564-1',\n    },\n    // ...\n  },\n};\n```\n\n### Removed fields\n\nThe following fields are all deprecated, you may remove from your configuration file.\n\n- `blogSidebarTitle`\n- `cleanUrl` - Clean URL is used by default now.\n- `defaultVersionShown` - Versioning is not ported yet. You'd be unable to migration to Docusaurus 2 if you are using versioning. Stay tuned.\n- `disableHeaderTitle`\n- `disableTitleTagline`\n- `docsSideNavCollapsible` is available at `themeConfig.sidebarCollapsible`, and this is turned on by default now.\n- `facebookAppId`\n- `facebookComments`\n- `facebookPixelId`\n- `fonts`\n- `highlight` - We now use [Prism](https://prismjs.com/) instead of [highlight.js](https://highlightjs.org/).\n- `markdownOptions` - We use MDX in v2 instead of Remarkable. Your markdown options have to be converted to Remark/Rehype plugins.\n- `markdownPlugins` - We use MDX in v2 instead of Remarkable. Your markdown plugins have to be converted to Remark/Rehype plugins.\n- `manifest`\n- `onPageNav` - This is turned on by default now.\n- `separateCss` - It can imported in the same manner as `custom.css` mentioned above.\n- `scrollToTop`\n- `scrollToTopOptions`\n- `translationRecruitingLink`\n- `twitter`\n- `twitterUsername`\n- `useEnglishUrl`\n- `users`\n- `usePrism` - We now use [Prism](https://prismjs.com/) instead of [highlight.js](https://highlightjs.org/)\n- `wrapPagesHTML`\n\nWe intend to implement many of the deprecated config fields as plugins in future. Help will be appreciated!\n\n## Urls\n\nIn v1, all pages were available with or without the `.html` extension.\n\nFor example, these 2 pages exist:\n\n- [https://docusaurus.io/docs/en/installation](https://docusaurus.io/docs/en/installation)\n- [https://docusaurus.io/docs/en/installation.html](https://docusaurus.io/docs/en/installation.html)\n\nIf [`cleanUrl`](https://docusaurus.io/docs/en/site-config#cleanurl-boolean) was:\n\n- `true`: links would target `/installation`\n- `false`: links would target `/installation.html`\n\nIn v2, by default, the canonical page is `/installation`, and not `/installation.html`.\n\nIf you had `cleanUrl: false` in v1, it's possible that people published links to `/installation.html`.\n\nFor SEO reasons, and avoiding breaking links, you should configure server-side redirect rules on your hosting provider.\n\nAs an escape hatch, you could use [@docusaurus/plugin-client-redirects](./using-plugins.md#docusaurusplugin-client-redirects) to create client-side redirects from `/installation.html` to `/installation`.\n\n```js\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-client-redirects',\n      {\n        fromExtensions: ['html'],\n      },\n    ],\n  ],\n};\n```\n\nIf you want to keep the `.html` extension as the canonical url of a page, docs can declare a `slug: installation.html` frontmatter.\n\n## Components\n\n### Sidebar\n\nIn previous version, nested sidebar category is not allowed and sidebar category can only contain doc id. However, v2 allows infinite nested sidebar and we have many types of [Sidebar Item](docs.md#sidebar-item) other than document.\n\nYou'll have to migrate your sidebar if it contains category type. Rename `subcategory` to `category` and `ids` to `items`.\n\n```diff title=\"sidebars.json\"\n{\n- type: 'subcategory',\n+ type: 'category',\n  label: 'My Example Subcategory',\n+ items: ['doc1'],\n- ids: ['doc1']\n},\n```\n\n### Footer\n\n`website/core/Footer.js` is no longer needed. If you want to modify the default footer provided by Docusaurus, [swizzle](using-themes.md#swizzling-theme-components) it:\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-classic Footer\n```\n\nThis will copy the current `<Footer />` component used by the theme to a `src/theme/Footer` directory under the root of your site, you may then edit this component for customization.\n\nDo not swizzle the Footer just to add the logo on the left. The logo is intentionally removed in v2 and moved to the bottom. Just configure the footer in `docusaurus.config.js` with `themeConfig.footer`:\n\n```js\nmodule.exports = {\n  themeConfig: {\n    footer: {\n      logo: {\n        alt: 'Facebook Open Source Logo',\n        src: 'img/oss_logo.png',\n        href: 'https://opensource.facebook.com',\n      },\n    },\n  },\n};\n```\n\n### Pages\n\nPlease refer to [creating pages](guides/creating-pages.md) to learn how Docusaurus 2 pages work. After reading that, notice that you have to move `pages/en` files in v1 to `src/pages` instead.\n\nIn Docusaurus v1, pages received the `siteConfig` object as props.\n\nIn Docusaurus v2, get the `siteConfig` object from `useDocusaurusContext` instead.\n\nIn v2, you have to apply the theme layout around each page. The Layout component takes metadata props (`permalink` is important, as it defines the canonical url of your page).\n\n`CompLibrary` is deprecated in v2, so you have to write your own React component or use Infima styles (Docs will be available soon, sorry about that! In the meanwhile, inspect the V2 website or view https://facebookincubator.github.io/infima/ to see what styles are available).\n\nYou can migrate CommonJS to ES6 imports/exports.\n\nHere's a typical Docusaurus v2 page:\n\n```jsx\nimport React from 'react';\nimport Link from '@docusaurus/Link';\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport Layout from '@theme/Layout';\n\nconst MyPage = () => {\n  const {siteConfig} = useDocusaurusContext();\n  return (\n    <Layout\n      permalink=\"/\"\n      title={siteConfig.title}\n      description={siteConfig.tagline}>\n      <div className=\"hero text--center\">\n        <div className=\"container \">\n          <div className=\"padding-vert--md\">\n            <h1 className=\"hero__title\">{siteConfig.title}</h1>\n            <p className=\"hero__subtitle\">{siteConfig.tagline}</p>\n          </div>\n          <div>\n            <Link\n              to={useBaseUrl('/docs/get-started')}\n              className=\"button button--lg button--outline button--primary\">\n              Get started\n            </Link>\n          </div>\n        </div>\n      </div>\n    </Layout>\n  );\n};\n\nexport default MyPage;\n```\n\nThe following code could be helpful for migration of various pages:\n\n- Index page - [Flux](https://github.com/facebook/flux/blob/master/website/src/pages/index.js/) (recommended), [Docusaurus 2](https://github.com/facebook/docusaurus/blob/master/website/src/pages/index.js/), [Hermes](https://github.com/facebook/hermes/blob/master/website/src/pages/index.js/)\n- Help/Support page - [Docusaurus 2](https://github.com/facebook/docusaurus/blob/master/website/src/pages/help.js/), [Flux](http://facebook.github.io/flux/support)\n\n## Content\n\n### Remove AUTOGENERATED_TABLE_OF_CONTENTS\n\nThis feature is deprecated. You may read more about it in [this issue](https://github.com/facebook/docusaurus/issues/1549). If you need the feature, use [remark-toc](https://github.com/remarkjs/remark-toc) instead and pass it to docs plugin's `remarkPlugins` option.\n\n### Update Markdown syntax to be MDX-compatible\n\nIn Docusaurus 2, the markdown syntax has been changed to [MDX](https://mdxjs.com/). Hence there might be some broken syntax in the existing docs which you would have to update. A common example is self-closing tags like `<img>` and `<br>` which are valid in HTML would have to be explicitly closed now ( `<img/>` and `<br/>`). All tags in MDX documents have to be valid JSX.\n\nFrontmatter is parsed by [gray-matter](https://github.com/jonschlinkert/gray-matter). If your frontmatter use special characters like `:`, you now need to quote it: `title: Part 1: my part1 title` -> `title: Part 1: \"my part1 title\"`.\n\n**Tips**: You might want to use some online tools like [HTML to JSX](https://transform.tools/html-to-jsx) to make the migration easier.\n\n### Language-specific code tabs\n\nRefer to the [multi-language support code blocks](markdown-features.mdx#multi-language-support-code-blocks) section.\n\n### Front matter\n\nThe Docusaurus front matter fields for the blog have been changed from camelCase to snake_case to be consistent with the docs.\n\nThe fields `authorFBID` and `authorTwitter` have been deprecated. They are only used for generating the profile image of the author which can be done via the `author_image_url` field.\n\n## Test your site\n\nAfter migration, your folder structure should look like this:\n\n```sh\nmy-project\n├── docs\n└── website\n    ├── blog\n    ├── src\n    │   ├── css\n    │   │   └── custom.css\n    │   └── pages\n    │       └── index.js\n    ├── package.json\n    ├── sidebars.json\n    ├── .gitignore\n    ├── docusaurus.config.js\n    └── static\n```\n\nStart the development server and fix any errors:\n\n```bash\ncd website\nyarn start\n```\n\n## Migration command\n\nThe migration command automatically migrates your v1 website to a v2 website.\n\nThe migration command migrates:\n\n- Site configurations (from `siteConfig.js` to `docusaurus.config.js`)\n- `package.json`\n- `sidebars.json`\n- `/docs`\n- `/blog`\n- `/static`\n- `versioned_sidebar.json` and `/versioned_docs` if your site uses versioning\n\n:::info\n\nManual tweaking is still required after using the migration command. You still need to migrate your [footer](#footer), [pages](#pages) and [content](#content).\n\n:::\n\nTo use the migration command, follow these steps:\n\n1. Before using the migration command, ensure that `/docs`, `/blog`, `/static`, `sidebars.json`, `siteConfig.js`, `package.json` follow the [structure](#) shown at the start of this page.\n\n2. To migrate your v1 website, run the migration command with the appropriate filesystem paths:\n\n```bash\n# migration command format\nnpx @docusaurus/migrate migrate <v1 website directory> <desired v2 website directory>\n\n# example\nnpx @docusaurus/migrate migrate ./v1-website ./v2-website\n```\n\n3. To view your new website locally, go into your v2 website's directory and start your development server.\n\n```bash\ncd ./v2-website\nyarn install\nyarn start\n```\n\n#### Options\n\nYou can add option flags to the migration command to automatically migrate Markdown content and pages to v2. It is likely that you will still need to make some manual changes to achieve your desired result.\n\n| Name     | Description                                            |\n| -------- | ------------------------------------------------------ |\n| `--mdx`  | Add this flag to convert Markdown to MDX automatically |\n| `--page` | Add this flag to migrate pages automatically           |\n\n```bash\n# example using options\nnpx docusaurus-migrate migrate --mdx --page ./v1-website ./v2-website\n```\n\n:::danger\n\nThe migration of pages and MDX is still a work in progress.\n\nWe recommend you to try to run the pages without these options, commit, and then try to run the migration again with the `--page` and `--mdx` options.\n\nThis way, you'd be able to easily inspect and fix the diff.\n\n:::\n\n## Example migration PRs\n\nYou might want to refer to our migration PRs for [Create React App](https://github.com/facebook/create-react-app/pull/7785) and [Flux](https://github.com/facebook/flux/pull/471) as examples of how a migration for a basic Docusaurus v1 site can be done.\n\n## Support\n\nFor any questions, you can ask in the [`#docusaurus-1-to-2-migration` Discord channel](https://discordapp.com/invite/kYaNd6V). Feel free to tag [@yangshun](https://github.com/yangshun) in any migration PRs if you would like us to have a look.\n\n---\n\n## Versioned Site\n\nRead up https://v2.docusaurus.io/blog/2018/09/11/Towards-Docusaurus-2#versioning first for problems in v1's approach.\n\n### Migrate your `versioned_docs` front matter\n\nUnlike v1, The markdown header for each versioned doc is no longer altered by using `version-${version}-${original_id}` as the value for the actual id field. See scenario below for better explanation.\n\nFor example, if you have a `docs/hello.md`.\n\n```md\n---\nid: hello\ntitle: Hello, World !\n---\n\nHi, Endilie here :)\n```\n\nWhen you cut a new version 1.0.0, in Docusaurus v1, `website/versioned_docs/version-1.0.0/hello.md` looks like this:\n\n```md\n---\nid: version-1.0.0-hello\ntitle: Hello, World !\noriginal_id: hello\n---\n\nHi, Endilie here :)\n```\n\nIn comparison, Docusaurus 2 `website/versioned_docs/version-1.0.0/hello.md` looks like this (exactly same as original)\n\n```md\n---\nid: hello\ntitle: Hello, World !\n---\n\nHi, Endilie here :)\n```\n\nSince we're going for snapshot and allow people to move (and edit) docs easily inside version. The `id` frontmatter is no longer altered and will remain the same. Internally, it is set as `version-${version}/${id}`.\n\nEssentially, here are the necessary changes in each versioned_docs file:\n\n```diff {2-3,5}\n---\n- id: version-1.0.0-hello\n+ id: hello\ntitle: Hello, World !\n- original_id: hello\n---\nHi, Endilie here :)\n```\n\n### Migrate your `versioned_sidebars`\n\n- Refer to `versioned_docs` id as `version-${version}/${id}` (v2) instead of `version-${version}-${original_id}` (v1).\n\nBecause in v1 there is a good chance someone created a new file with front matter id `\"version-${version}-${id}\"` that can conflict with `versioned_docs` id.\n\nFor example, Docusaurus 1 can't differentiate `docs/xxx.md`\n\n```md\n---\nid: version-1.0.0-hello\n---\n\nAnother content\n```\n\nvs `website/versioned_docs/version-1.0.0/hello.md`\n\n```md\n---\nid: version-1.0.0-hello\ntitle: Hello, World !\noriginal_id: hello\n---\n\nHi, Endilie here :)\n```\n\nSince we don't allow `/` in v1 & v2 for frontmatter, conflicts are less likely to occur.\n\nSo v1 users need to migrate their versioned_sidebars file\n\nExample `versioned_sidebars/version-1.0.0-sidebars.json`:\n\n```diff {2-3,5-6,9-10}  title=\"versioned_sidebars/version-1.0.0-sidebars.json\"\n{\n+ \"version-1.0.0/docs\": {\n- \"version-1.0.0-docs\": {\n    \"Test\": [\n+    \"version-1.0.0/foo/bar\",\n-    \"version-1.0.0-foo/bar\",\n    ],\n    \"Guides\": [\n+    \"version-1.0.0/hello\",\n-    \"version-1.0.0-hello\"\n    ]\n  }\n}\n```\n\n### Populate your `versioned_sidebars` and `versioned_docs`\n\nIn v2, we use snapshot approach for documentation versioning. **Every versioned docs does not depends on other version**. It is possible to have `foo.md` in `version-1.0.0` but it doesn't exist in `version-1.2.0`. This is not possible in previous version due to Docusaurus v1 fallback functionality (https://docusaurus.io/docs/en/versioning#fallback-functionality).\n\nFor example, if your `versions.json` looks like this in v1\n\n```json title=\"versions.json\"\n[\"1.1.0\", \"1.0.0\"]\n```\n\nDocusaurus v1 creates versioned docs **if and only if the doc content is different**. Your docs structure might look like this if the only doc changed from v1.0.0 to v1.1.0 is `hello.md`.\n\n```shell\nwebsite\n├── versioned_docs\n│   ├── version-1.1.0\n│   │   └── hello.md\n│   └── version-1.0.0\n│       ├── foo\n│       │   └── bar.md\n│       └── hello.md\n├── versioned_sidebars\n│   └── version-1.0.0-sidebars.json\n```\n\nIn v2, you have to populate the missing `versioned_docs` and `versioned_sidebars` (with the right frontmatter and id reference too).\n\n```shell {3-5,12}\nwebsite\n├── versioned_docs\n│   ├── version-1.1.0\n│   │   ├── foo\n│   │   │   └── bar.md\n│   │   └── hello.md\n│   └── version-1.0.0\n│       ├── foo\n│       │   └── bar.md\n│       └── hello.md\n├── versioned_sidebars\n│   ├── version-1.1.0-sidebars.json\n│   └── version-1.0.0-sidebars.json\n```\n\n### Convert style attributes to style objects in MDX\n\nDocusaurus 2 uses JSX for doc files. If you have any style attributes in your Docusaurus 1 docs, convert them to style objects, like this:\n\n```diff\n---\nid: demo\ntitle: Demo\n---\n\n## Section\n\nhello world\n\n- pre style=\"background: black\">zzz</pre>\n+ pre style={{background: 'black'}}>zzz</pre>\n```\n\n## Translated Site\n\nWe don't provide yet a migration path for v1 translated sites.\n\nv2 i18n support is a [work in progress](https://github.com/facebook/docusaurus/pull/3325), and will be added before the end of 2020 with a migration guide to help you migrate from v1 + Crowdin to v2 + Crowdin.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.4421450088827146,
      "title": "blog",
      "fileContents": "---\nid: blog\ntitle: Blog\n---\n\n## Initial setup\n\nTo setup your site's blog, start by creating a `blog` directory.\n\nThen, add an item link to your blog within `docusaurus.config.js`:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    // ...\n    navbar: {\n      items: [\n        // ...\n        // highlight-next-line\n        {to: 'blog', label: 'Blog', position: 'left'}, // or position: 'right'\n      ],\n    },\n  },\n};\n```\n\n## Adding posts\n\nTo publish in the blog, create a file within the blog directory with a formatted name of `YYYY-MM-DD-my-blog-post-title.md`. The post date is extracted from the file name.\n\nFor example, at `my-website/blog/2019-09-05-hello-docusaurus-v2.md`:\n\n```yml\n---\ntitle: Welcome Docusaurus v2\nauthor: Joel Marcey\nauthor_title: Co-creator of Docusaurus 1\nauthor_url: https://github.com/JoelMarcey\nauthor_image_url: https://graph.facebook.com/611217057/picture/?height=200&width=200\ntags: [hello, docusaurus-v2]\ndescription: This is my first post on Docusaurus 2.\nimage: https://i.imgur.com/mErPwqL.png\nhide_table_of_contents: false\n---\nWelcome to this blog. This blog is created with [**Docusaurus 2 alpha**](https://v2.docusaurus.io/).\n\n<!--truncate-->\n\nThis is my first post on Docusaurus 2.\n\nA whole bunch of exploration to follow.\n```\n\n## Header options\n\nThe only required field is `title`; however, we provide options to add author information to your blog post as well along with other options.\n\n- `author` - The author name to be displayed.\n- `author_url` - The URL that the author's name will be linked to. This could be a GitHub, Twitter, Facebook profile URL, etc.\n- `author_image_url` - The URL to the author's thumbnail image.\n- `author_title` - A description of the author.\n- `title` - The blog post title.\n- `tags` - A list of strings to tag to your post.\n- `draft` - A boolean flag to indicate that the blog post is work-in-progress and therefore should not be published yet. However, draft blog posts will be displayed during development.\n- `description`: The description of your post, which will become the `<meta name=\"description\" content=\"...\"/>` and `<meta property=\"og:description\" content=\"...\"/>` in `<head>`, used by search engines. If this field is not present, it will default to the first line of the contents.\n- `image`: Cover or thumbnail image that will be used when displaying the link to your post.\n- `hide_table_of_contents`: Whether to hide the table of contents to the right. By default it is `false`.\n\n## Summary truncation\n\nUse the `<!--truncate-->` marker in your blog post to represent what will be shown as the summary when viewing all published blog posts. Anything above `<!--truncate-->` will be part of the summary. For example:\n\n```yml\n---\ntitle: Truncation Example\n---\nAll these will be part of the blog post summary.\n\nEven this.\n\n<!--truncate-->\n\nBut anything from here on down will not be.\n\nNot this.\n\nOr this.\n```\n\n## Feed\n\nYou can generate RSS/ Atom feed by passing feedOptions.\n\n```ts\nfeedOptions?: {\n  type: 'rss' | 'atom' | 'all';\n  title?: string;\n  description?: string;\n  copyright: string;\n  language?: string; // possible values: http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes\n};\n```\n\nExample usage:\n\n```js {8-11} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        blog: {\n          feedOptions: {\n            type: 'all',\n            copyright: `Copyright © ${new Date().getFullYear()} Facebook, Inc.`,\n          },\n        },\n      },\n    ],\n  ],\n};\n```\n\nAccessing the feed:\n\nThe feed for RSS can be found at:\n\n```text\nhttps://{your-domain}/blog/rss.xml\n```\n\nand for Atom:\n\n```text\nhttps://{your-domain}/blog/atom.xml\n```\n\n## Advanced topics\n\n### Blog-only mode\n\nYou can run your Docusaurus 2 site without a landing page and instead have your blog's post list page as the index page. Set the `routeBasePath` to be `'/'` to indicate it's the root path.\n\n```js {9} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        blog: {\n          path: './blog',\n          routeBasePath: '/', // Set this value to '/'.\n        },\n      },\n    ],\n  ],\n};\n```\n\n:::caution\n\nDon't forget to delete the existing homepage at `./src/pages/index.js` or else there will be two files mapping to the same route!\n\n:::\n\nYou can also add meta description to the blog list page for better SEO:\n\n```js {8} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        blog: {\n          blogTitle: 'Docusaurus blog!',\n          blogDescription: 'A docusaurus powered blog!',\n        },\n      },\n    ],\n  ],\n};\n```\n\n### Multiple blogs\n\nBy default, the classic theme assumes only one blog per website and hence includes only one instance of the blog plugin. If you would like to have multiple blogs on a single website, it's possible too! You can add another blog by specifying another blog plugin in the `plugins` option for `docusaurus.config.js`.\n\nSet the `routeBasePath` to the URL route that you want your second blog to be accessed on. Note that the `routeBasePath` here has to be different from the first blog or else there could be a collision of paths! Also, set `path` to the path to the directory containing your second blog's entries.\n\nAs documented for [multi-instance plugins](./using-plugins.md#multi-instance-plugins-and-plugin-ids), you need to assign a unique id to the plugins.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: [\n    [\n      '@docusaurus/plugin-content-blog',\n      {\n        /**\n         * Required for any multi-instance plugin\n         */\n        id: 'second-blog',\n        /**\n         * URL route for the blog section of your site.\n         * *DO NOT* include a trailing slash.\n         */\n        routeBasePath: 'my-second-blog',\n        /**\n         * Path to data on filesystem relative to site dir.\n         */\n        path: './my-second-blog',\n      },\n    ],\n  ],\n};\n```\n\nAs an example, we host a second blog [here](/second-blog).\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.23883011740696514,
      "title": "cli",
      "fileContents": "---\nid: cli\ntitle: CLI\n---\n\nDocusaurus provides a set of scripts to help you generate, serve, and deploy your website.\n\nOnce your website is bootstrapped, the website source will contain the Docusaurus scripts that you can invoke with your package manager:\n\n```json title=\"package.json\"\n{\n  // ...\n  \"scripts\": {\n    \"start\": \"docusaurus start\",\n    \"build\": \"docusaurus build\",\n    \"swizzle\": \"docusaurus swizzle\",\n    \"deploy\": \"docusaurus deploy\",\n    \"clear\": \"docusaurus clear\"\n  }\n}\n```\n\n## Docusaurus CLI commands\n\nBelow is a list of Docusaurus CLI commands and their usages:\n\n### `docusaurus start`\n\nBuilds and serves a preview of your site locally with [Webpack Dev Server](https://webpack.js.org/configuration/dev-server).\n\n#### Options\n\n| Name | Default | Description |\n| --- | --- | --- |\n| `--port` | `3000` | Specifies the port of the dev server. |\n| `--host` | `localhost` | Specify a host to use. For example, if you want your server to be accessible externally, you can use `--host 0.0.0.0`. |\n| `--hot-only` | `false` | Enables Hot Module Replacement without page refresh as fallback in case of build failures. More information [here](https://webpack.js.org/configuration/dev-server/#devserverhotonly). |\n| `--no-open` | `false` | Do not open automatically the page in the browser. |\n| `--poll [optionalIntervalMs]` | `false` | Use polling of files rather than watching for live reload as a fallback in environments where watching doesn't work. More information [here](https://webpack.js.org/configuration/watch/#watchoptionspoll). |\n\n:::important\n\nPlease note that some functionality (for example, anchor links) will not work in development. The functionality will work as expected in production.\n\n:::\n\n#### Enabling HTTPS`\n\nThere are multiple ways to obtain a certificate. We will use [mkcert](https://github.com/FiloSottile/mkcert) as an example.\n\n1. Run `mkcert localhost` to generate `localhost.pem` + `localhost-key.pem`\n\n2. Run `mkcert -install` to install the cert in your trust store, and restart your browser\n\n3. Start the app with Docusaurus HTTPS env variables:\n\n```shell\nHTTPS=true SSL_CRT_FILE=localhost.pem SSL_KEY_FILE=localhost-key.pem yarn start\n```\n\n4. Open `https://localhost:3000/`\n\n### `docusaurus build`\n\nCompiles your site for production.\n\n#### Options\n\n| Name | Default | Description |\n| --- | --- | --- |\n| `--bundle-analyzer` | `false` | Analyze your bundle with the [webpack bundle analyzer](https://github.com/webpack-contrib/webpack-bundle-analyzer). |\n| `--out-dir` | `build` | The full path for the new output directory, relative to the current workspace. |\n| `--no-minify` | `false` | Build website without minimizing JS/CSS bundles. |\n\n:::info\n\nFor advanced minification of CSS bundle, we use the [advanced cssnano preset](https://github.com/cssnano/cssnano/tree/master/packages/cssnano-preset-advanced) (along with additional several PostCSS plugins) and [level 2 optimization of clean-css](https://github.com/jakubpawlowicz/clean-css#level-2-optimizations). If as a result of this advanced CSS minification you find broken CSS, build your website with the environment variable `USE_SIMPLE_CSS_MINIFIER=true` to minify CSS with the [default cssnano preset](https://github.com/cssnano/cssnano/tree/master/packages/cssnano-preset-default). **Please [fill out an issue](https://github.com/facebook/docusaurus/issues/new?labels=bug%2C+needs+triage&template=bug.md) if you experience CSS minification bugs.**\n\n:::\n\n### `docusaurus swizzle`\n\n:::caution\n\nWe highly discourage swizzling of components until we've reached a Beta stage. The components APIs have been changing rapidly and are likely to keep changing until we reach Beta. Stick with the default appearance for now if possible to save yourself some potential pain in future.\n\n:::\n\nChange any Docusaurus theme components to your liking with `docusaurus swizzle`.\n\n```shell\ndocusaurus swizzle [themeName] [componentName] [siteDir]\n\n# Example (leaving out the siteDir to indicate this directory)\ndocusaurus swizzle @docusaurus/theme-classic DocSidebar\n```\n\nRunning the command will copy the relevant theme files to your site folder. You may then make any changes to it and Docusaurus will use it instead of the one provided from the theme.\n\n`docusaurus swizzle` without `themeName` lists all the themes available for swizzling similarly `docusaurus swizzle <themeName>` without `componentName` lists all the components available for swizzling.\n\n#### Options\n\n| Name               | Description                            |\n| ------------------ | -------------------------------------- |\n| `themeName`        | The name of the theme you are using.   |\n| `swizzleComponent` | The name of the component to swizzle.  |\n| `--danger`         | Allow swizzling of unstable components |\n| `--typescript`     | Swizzle TypeScript components          |\n\nTo unswizzle a component, simply delete the files of the swizzled component.\n\n<!--\nTODO a separate section for swizzle tutorial.\nTo learn more about swizzling, check [here](#).\n-->\n\n### `docusaurus deploy`\n\nDeploys your site with [GitHub Pages](https://pages.github.com/). Check out the docs on [deployment](deployment.mdx#deploying-to-github-pages) for more details.\n\n#### Options\n\n| Name | Default | Description |\n| --- | --- | --- |\n| `--out-dir` | `build` | The full path for the new output directory, relative to the current workspace. |\n| `--skip-build` | `false` | Deploy website without building it. This may be useful when using custom deploy script. |\n\n### `docusaurus serve`\n\nServe your built website locally.\n\n| Name | Default | Description |\n| --- | --- | --- |\n| `--port` | `3000` | Use specified port |\n| `--dir` | `build` | The full path for the output directory, relative to the current workspace |\n| `--build` | `false` | Build website before serving |\n| `--host` | `localhost` | Specify a host to use. For example, if you want your server to be accessible externally, you can use `--host 0.0.0.0`. |\n\n### `docusaurus clear`\n\nClear a Docusaurus site's generated assets, caches, build artifacts.\n\nWe recommend running this command before reporting bugs, after upgrading versions, or anytime you have issues with your Docusaurus site.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.33025921536393854,
      "title": "configuration",
      "fileContents": "---\nid: configuration\ntitle: Configuration\n---\n\nDocusaurus has a unique take on configurations. We encourage you to congregate information of your site into one place. We guard the fields of this file, and facilitate making this data object accessible across your site.\n\nKeeping a well-maintained `docusaurus.config.js` helps you, your collaborators, and your open source contributors be able to focus on documentation while still being able to customize the site.\n\n## What goes into a `docusaurus.config.js`?\n\nYou should not have to write your `docusaurus.config.js` from scratch even if you are developing your site. All templates come with a `docusaurus.config.js` that includes defaults for the common options.\n\nHowever, it can be helpful if you have a high-level understanding of how the configurations are designed and implemented.\n\nThe high-level overview of Docusaurus configuration can be categorized into:\n\n- [What goes into a `docusaurus.config.js`?](#what-goes-into-a-docusaurusconfigjs)\n  - [Site metadata](#site-metadata)\n  - [Deployment configurations](#deployment-configurations)\n  - [Theme, plugin, and preset configurations](#theme-plugin-and-preset-configurations)\n  - [Custom configurations](#custom-configurations)\n- [Customizing Babel Configuration](#customizing-babel-configuration)\n\nFor exact reference to each of the configurable fields, you may refer to [**`docusaurus.config.js` API reference**](api/docusaurus.config.js.md).\n\n### Site metadata\n\nSite metadata contains the essential global metadata such as `title`, `url`, `baseUrl` and `favicon`.\n\nThey are used in a number of places such as your site's title and headings, browser tab icon, social sharing (Facebook, Twitter) information or even to generate the correct path to serve your static files.\n\n### Deployment configurations\n\nDeployment configurations such as `projectName` and `organizationName` are used when you deploy your site with the `deploy` command.\n\nIt is recommended to check the [deployment docs](deployment.mdx)) for more information.\n\n### Theme, plugin, and preset configurations\n\nList the [theme](using-themes.md), [plugins](using-plugins.md), and [presets](presets.md) for your site in the `themes`, `plugins`, and `presets` fields, respectively. These are typically npm packages:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: [\n    '@docusaurus/plugin-content-blog',\n    '@docusaurus/plugin-content-pages',\n  ],\n  themes: ['@docusaurus/theme-classic'],\n};\n```\n\nThey can also be loaded from local directories:\n\n```js title=\"docusaurus.config.js\"\nconst path = require('path');\n\nmodule.exports = {\n  // ...\n  themes: [path.resolve(__dirname, '/path/to/docusaurus-local-theme')],\n};\n```\n\nTo specify options for a plugin or theme, replace the name of the plugin or theme in the config file with an array containing the name and an options object:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: [\n    [\n      '@docusaurus/plugin-content-blog',\n      {\n        path: 'blog',\n        routeBasePath: 'blog',\n        include: ['*.md', '*.mdx'],\n        // ...\n      },\n    ],\n    '@docusaurus/plugin-content-pages',\n  ],\n};\n```\n\nTo specify options for a plugin or theme that is bundled in a preset, pass the options through the `presets` field. In this example, `docs` refers to `@docusaurus/plugin-content-docs` and `theme` refers to `@docusaurus/theme-classic`.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          sidebarPath: require.resolve('./sidebars.js'),\n        },\n        theme: {\n          customCss: [require.resolve('./src/css/custom.css')],\n        },\n      },\n    ],\n  ],\n};\n```\n\nFor further help configuring themes, plugins, and presets, see [Using Themes](using-themes.md), [Using Plugins](using-plugins.md), and [Using Presets](presets.md).\n\n### Custom configurations\n\nDocusaurus guards `docusaurus.config.js` from unknown fields. To add custom fields, define them in `customFields`.\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  // highlight-start\n  customFields: {\n    image: '',\n    keywords: [],\n  },\n  // highlight-end\n  // ...\n};\n```\n\n## Accessing configuration from components\n\nYour configuration object will be made available to all the components of your site. And you may access them via React context as `siteConfig`.\n\nBasic example:\n\n```jsx\nimport React from 'react';\n// highlight-next-line\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\n\nconst Hello = () => {\n  // highlight-start\n  const {siteConfig} = useDocusaurusContext();\n  // highlight-end\n  const {title, tagline} = siteConfig;\n\n  return <div>{`${title} · ${tagline}`}</div>;\n};\n```\n\n:::tip\n\nIf you just want to use those fields on the client side, you could create your own JS files and import them as ES6 modules, there is no need to put them in `docusaurus.config.js`.\n\n:::\n\n## Customizing Babel Configuration\n\nFor new Docusaurus projects, we automatically generated a `babel.config.js` in project root.\n\n```js title=\"babel.config.js\"\nmodule.exports = {\n  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],\n};\n```\n\nMost of the times, this configuration will work just fine. If you want to customize it, you can directly edit this file to customize babel configuration. For your changes to take effect, you need to restart Docusaurus devserver.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.007471729189492127,
      "title": "contributing",
      "fileContents": "---\nid: contributing\ntitle: Contributing\n---\n\n[Docusaurus 2](https://v2.docusaurus.io/) is currently under alpha development. We have [early adopters who already started using it](/showcase). We are now welcoming contributors to collaborate on the next Docusaurus.\n\nThe [Open Source Guides](https://opensource.guide/) website has a collection of resources for individuals, communities, and companies who want to learn how to run and contribute to an open source project. Contributors and people new to open source alike will find the following guides especially useful:\n\n- [How to Contribute to Open Source](https://opensource.guide/how-to-contribute/)\n- [Building Welcoming Communities](https://opensource.guide/building-community/)\n\n## [Code of Conduct](https://code.fb.com/codeofconduct)\n\nFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read [the full text](https://code.fb.com/codeofconduct) so that you can understand what actions will and will not be tolerated.\n\n## Get involved\n\nThere are many ways to contribute to Docusaurus, and many of them do not involve writing any code. Here's a few ideas to get started:\n\n- Start using Docusaurus 2! Go through the [Getting Started](installation.md) guides. Does everything work as expected? If not, we're always looking for improvements. Let us know by [opening an issue](#reporting-new-issues).\n- Look through the [v2.0 issues](https://github.com/facebook/docusaurus/labels/v2). If you find an issue you would like to fix, [open a pull request](#your-first-pull-request). Issues tagged as [_Good first issue_](https://github.com/facebook/docusaurus/labels/Good%20first%20issue) are a good place to get started.\n- Help us making the docs better. File an issue if you find anything that is confusing or can be improved. We also have [an umbrella issue for v2 docs](https://github.com/facebook/docusaurus/issues/1640) where we are planning and working on all v2 docs. You may adopt a doc piece there to work on.\n- Take a look at the [features requested](https://github.com/facebook/docusaurus/labels/enhancement) by others in the community and consider opening a pull request if you see something you want to work on.\n\nContributions are very welcome. If you think you need help planning your contribution, please ping us on Twitter at [@docusaurus](https://twitter.com/docusaurus) and let us know you are looking for a bit of help.\n\n### Join our Discord channel\n\nTo participate in Docusaurus 2 dev, join the [#docusaurus-2-dev](https://discord.gg/Je6Ash6) channel.\n\n## Our development process\n\nDocusaurus uses [GitHub](https://github.com/facebook/docusaurus) as its source of truth. The core team will be working directly there. All changes will be public from the beginning.\n\nWhen a change made on GitHub is approved, it will be checked by our continuous integration system, CircleCI.\n\n### Reporting new issues\n\nWhen [opening a new issue](https://github.com/facebook/docusaurus/issues/new/choose), always make sure to fill out the issue template. **This step is very important!** Not doing so may result in your issue not managed in a timely fashion. Don't take this personally if this happens, and feel free to open a new issue once you've gathered all the information required by the template.\n\n- **One issue, one bug:** Please report a single bug per issue.\n- **Provide reproduction steps:** List all the steps necessary to reproduce the issue. The person reading your bug report should be able to follow these steps to reproduce your issue with minimal effort.\n\n### Reporting bugs\n\nWe use [GitHub Issues](https://github.com/facebook/docusaurus/issues) for our public bugs. If you would like to report a problem, take a look around and see if someone already opened an issue about it. If you a are certain this is a new, unreported bug, you can submit a [bug report](#reporting-new-issues).\n\nIf you have questions about using Docusaurus, contact the Docusaurus Twitter account at [@docusaurus](https://twitter.com/docusaurus), and we will do our best to answer your questions.\n\nYou can also file issues as [feature requests or enhancements](https://github.com/facebook/docusaurus/labels/feature). If you see anything you'd like to be implemented, create an issue with [feature template](https://raw.githubusercontent.com/facebook/docusaurus/master/.github/ISSUE_TEMPLATE/feature.md/)\n\n### Reporting security bugs\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.\n\n## Working on Docusaurus code\n\n### Installation\n\n1. Ensure you have [Yarn](https://yarnpkg.com/) installed\n2. After cloning the repository, run `yarn install` in the root of the repository\n3. To start a local development server serving the Docusaurus docs, go into the `website` directory and run `yarn start`\n\n### Semantic commit messages\n\nSee how a minor change to your commit message style can make you a better programmer.\n\nFormat: `<type>(<scope>): <subject>`\n\n`<scope>` is optional\n\n**Example**\n\n```\nfeat: allow overriding of webpack config\n^--^  ^------------^\n|     |\n|     +-> Summary in present tense.\n|\n+-------> Type: chore, docs, feat, fix, refactor, style, or test.\n```\n\nThe various types of commits:\n\n- `feat`: (new feature for the user, not a new feature for build script)\n- `fix`: (bug fix for the user, not a fix to a build script)\n- `docs`: (changes to the documentation)\n- `style`: (formatting, missing semi colons, etc; no production code change)\n- `refactor`: (refactoring production code, eg. renaming a variable)\n- `test`: (adding missing tests, refactoring tests; no production code change)\n- `chore`: (updating grunt tasks etc; no production code change)\n\nUse lower case not title case!\n\n### Code conventions\n\n#### Style guide\n\n[Prettier](https://prettier.io/) will catch most styling issues that may exist in your code. You can check the status of your code styling by simply running `npm run prettier`.\n\nHowever, there are still some styles that Prettier cannot pick up.\n\n#### General\n\n- **Most important: Look around.** Match the style you see used in the rest of the project. This includes formatting, naming files, naming things in code, naming things in documentation.\n- \"Attractive\"\n\n#### Documentation\n\n- Do not wrap lines at 80 characters - configure your editor to soft-wrap when editing documentation.\n\n## Pull requests\n\n### Your first pull request\n\nSo you have decided to contribute code back to upstream by opening a pull request. You've invested a good chunk of time, and we appreciate it. We will do our best to work with you and get the PR looked at.\n\nWorking on your first Pull Request? You can learn how from this free video series:\n\n[**How to Contribute to an Open Source Project on GitHub**](https://egghead.io/courses/how-to-contribute-to-an-open-source-project-on-github)\n\nWe have a list of [beginner friendly issues](https://github.com/facebook/docusaurus/labels/good%20first%20issue) to help you get your feet wet in the Docusaurus codebase and familiar with our contribution process. This is a great place to get started.\n\n### Proposing a change\n\nIf you would like to request a new feature or enhancement but are not yet thinking about opening a pull request, you can also file an issue with [feature template](https://github.com/facebook/docusaurus/issues/new?template=feature.md/).\n\nIf you intend to change the public API (e.g., something in `docusaurus.config.js`), or make any non-trivial changes to the implementation, we recommend filing an issue with [proposal template](https://github.com/facebook/docusaurus/issues/new?template=proposal.md) and including `[Proposal]` in the title. This lets us reach an agreement on your proposal before you put significant effort into it. These types of issues should be rare.\n\nIf you're only fixing a bug, it's fine to submit a pull request right away but we still recommend to file an issue detailing what you're fixing. This is helpful in case we don't accept that specific fix but want to keep track of the issue.\n\n### Sending a pull request\n\nSmall pull requests are much easier to review and more likely to get merged. Make sure the PR does only one thing, otherwise please split it. It is recommended to follow this [commit message style](#semantic-commit-messages).\n\nPlease make sure the following is done when submitting a pull request:\n\n1. Fork [the repository](https://github.com/facebook/docusaurus) and create your branch from `master`.\n1. Add the copyright notice to the top of any code new files you've added.\n1. Describe your [test plan](#test-plan) in your pull request description. Make sure to [test your changes](https://github.com/facebook/docusaurus/blob/master/admin/testing-changes-on-Docusaurus-itself.md/)!\n1. Make sure your code lints (`yarn prettier && yarn lint`).\n1. Make sure your Jest tests pass (`yarn test`).\n1. If you haven't already, [sign the CLA](https://code.facebook.com/cla).\n\nAll pull requests should be opened against the `master` branch.\n\n#### Test plan\n\nA good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI.\n\n- If you've changed APIs, update the documentation.\n\n#### Breaking changes\n\nWhen adding a new breaking change, follow this template in your pull request:\n\n```md\n### New breaking change here\n\n- **Who does this affect**:\n- **How to migrate**:\n- **Why make this breaking change**:\n- **Severity (number of people affected x effort)**:\n```\n\n#### Copyright header for source code\n\nCopy and paste this to the top of your new file(s):\n\n```js\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n```\n\n#### Contributor License Agreement (CLA)\n\nIn order to accept your pull request, we need you to submit a CLA. You only need to do this once, so if you've done this for another Facebook open source project, you're good to go. If you are submitting a pull request for the first time, the Facebook GitHub Bot will reply with a link to the CLA form. You may also [complete your CLA here](https://code.facebook.com/cla).\n\n### What happens next?\n\nThe core Docusaurus team will be monitoring for pull requests. Do help us by keeping pull requests consistent by following the guidelines above.\n\n## License\n\nBy contributing to Docusaurus, you agree that your contributions will be licensed under its MIT license.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.9366176997508768,
      "title": "deployment",
      "fileContents": "---\nid: deployment\ntitle: Deployment\n---\n\nTo build the static files of your website for production, run:\n\n```bash npm2yarn\nnpm run build\n```\n\nOnce it finishes, the static files will be generated within the `build/` directory.\n\nYou can deploy your site to static site hosting services such as [Vercel](https://vercel.com/), [GitHub Pages](https://pages.github.com/), [Netlify](https://www.netlify.com/), [Render](https://render.com/docs/static-sites), and [Surge](https://surge.sh/help/getting-started-with-surge). Docusaurus sites are statically rendered so they work without JavaScript too!\n\n## Testing Build Local\n\nIt is important to test build before deploying to a production. Docusaurus includes a [`docusaurus serve`](cli.md#docusaurus-serve) command to test build locally.\n\n```bash npm2yarn\nnpm run serve\n```\n\n## Self Hosting\n\n:::warning\n\nIt is not the most performant solution\n\n:::\n\nDocusaurus can be self hosted using [`docusaurus serve`](cli.md#docusaurus-serve). Change port using `--port` and `--host` to change host.\n\n```bash npm2yarn\nnpm run serve --build --port 80 --host 0.0.0.0\n```\n\n## Deploying to GitHub Pages\n\nDocusaurus provides an easy way to publish to [GitHub Pages](https://pages.github.com/). Which is hosting that comes for free with every GitHub repository.\n\n### `docusaurus.config.js` settings\n\nFirst, modify your `docusaurus.config.js` and add the required params:\n\n| Name | Description |\n| --- | --- |\n| `organizationName` | The GitHub user or organization that owns the repository. If you are the owner, it is your GitHub username. In the case of Docusaurus, it is \"_facebook_\" which is the GitHub organization that owns Docusaurus. |\n| `projectName` | The name of the GitHub repository. For example, the repository name for Docusaurus is \"docusaurus\", so the project name is \"docusaurus\". |\n| `url` | URL for your GitHub Page's user/organization page. This is commonly https://_username_.github.io. |\n| `baseUrl` | Base URL for your project. For projects hosted on GitHub pages, it follows the format \"/_projectName_/\". For https://github.com/facebook/docusaurus, `baseUrl` is `/docusaurus/`. |\n\nIn case you want to use your custom domain for GitHub Pages, create a `CNAME` file in the `static` directory. Anything within the `static` directory will be copied to the root of the `build` directory for deployment.\n\nYou may refer to GitHub Pages' documentation [User, Organization, and Project Pages](https://help.github.com/en/articles/user-organization-and-project-pages) for more details.\n\nExample:\n\n```jsx {3-6} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  url: 'https://endiliey.github.io', // Your website URL\n  baseUrl: '/',\n  projectName: 'endiliey.github.io',\n  organizationName: 'endiliey',\n  // ...\n};\n```\n\n:::warning\n\nBy default, GitHub Pages runs published files through [Jekyll](https://jekyllrb.com/). Since Jekyll will discard any files that begin with `_`, it is recommended that you disable Jekyll by adding an empty file named `.nojekyll` file to your `static` directory.\n\n:::\n\n### Environment settings\n\nSpecify the Git user as an environment variable.\n\n| Name | Description |\n| --- | --- |\n| `GIT_USER` | The username for a GitHub account that has commit access to this repo. For your own repositories, this will usually be your GitHub username. The specified `GIT_USER` must have push access to the repository specified in the combination of `organizationName` and `projectName`. |\n\nOptional parameters, also set as environment variables:\n\n| Name | Description |\n| --- | --- |\n| `USE_SSH` | Set to `true` to use SSH instead of the default HTTPS for the connection to the GitHub repo. |\n| `DEPLOYMENT_BRANCH` | The branch that the website will be deployed to, defaults to `gh-pages` for normal repos and `master` for repository names ending in `github.io`. |\n| `CURRENT_BRANCH` | The branch that contains the latest docs changes that will be deployed. Usually, the branch will be `master`, but it could be any branch (default or otherwise) except for `gh-pages`. If nothing is set for this variable, then the current branch will be used. |\n| `GIT_PASS` | Password (or token) of the `git` user (specified by `GIT_USER`). For example, to facilitate non-interactive deployment (e.g. continuous deployment) |\n\n### Deploy\n\nFinally, to deploy your site to GitHub Pages, run:\n\n<Tabs \n  defaultValue=\"bash\"\n  values={[ \n    { label: 'Bash', value: 'bash' },\n    { label: 'Windows', value: 'windows' }, \n    { label: 'PowerShell', value: 'powershell' } \n]}>\n<TabItem value=\"bash\">\n\n```bash\nGIT_USER=<GITHUB_USERNAME> yarn deploy\n```\n\n</TabItem>\n<TabItem value=\"windows\">\n\n```batch\ncmd /C \"set \"GIT_USER=<GITHUB_USERNAME>\" && yarn deploy\"\n```\n\n</TabItem>\n<TabItem value=\"powershell\">\n\n```powershell\ncmd /C 'set \"GIT_USER=<GITHUB_USERNAME>\" && yarn deploy'\n```\n\n</TabItem>\n</Tabs>\n\n### Triggering deployment with GitHub Actions\n\n[GitHub Actions](https://help.github.com/en/actions) allow you to automate, customize, and execute your software development workflows right in your repository.\n\nThis workflow assumes your documentation resided in `documentation` branch of your repository and your [publishing source](https://help.github.com/en/github/working-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site) is configured for `gh-pages` branch.\n\n1. Generate a new [SSH key](https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent).\n1. By default, your public key should have been created in `~/.ssh/id_rsa.pub` or use the name you've provided in the previous step to add your key to [GitHub deploy keys](https://developer.github.com/v3/guides/managing-deploy-keys/).\n1. Copy key to clipboard with `xclip -sel clip < ~/.ssh/id_rsa.pub` and paste it as a [deploy key](https://developer.github.com/v3/guides/managing-deploy-keys/#deploy-keys) in your repository. Copy file content if the command line doesn't work for you. Check the box for `Allow write access` before saving your deployment key.\n1. You'll need your private key as a [GitHub secret](https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets) to allow Docusaurus to run the deployment for you.\n1. Copy your private key with `xclip -sel clip < ~/.ssh/id_rsa` and paste a GitHub secret with name `GH_PAGES_DEPLOY`. Copy file content if the command line doesn't work for you. Save your secret.\n1. Create you [documentation workflow file](https://help.github.com/en/actions/configuring-and-managing-workflows/configuring-a-workflow#creating-a-workflow-file) in `.github/workflows/`. In this example it's `documentation.yml`.\n\n```yaml title=\"documentation.yml\"\nname: documentation\n\non:\n  pull_request:\n    branches: [documentation]\n  push:\n    branches: [documentation]\n\njobs:\n  checks:\n    if: github.event_name != 'push'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: actions/setup-node@v1\n        with:\n          node-version: '12.x'\n      - name: Test Build\n        run: |\n          if [ -e yarn.lock ]; then\n          yarn install --frozen-lockfile\n          elif [ -e package-lock.json ]; then\n          npm ci\n          else\n          npm i\n          fi\n          npm run build\n  gh-release:\n    if: github.event_name != 'pull_request'\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v1\n      - uses: actions/setup-node@v1\n        with:\n          node-version: '12.x'\n      - name: Add key to allow access to repository\n        env:\n          SSH_AUTH_SOCK: /tmp/ssh_agent.sock\n        run: |\n          mkdir -p ~/.ssh\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          echo \"${{ secrets.GH_PAGES_DEPLOY }}\" > ~/.ssh/id_rsa\n          chmod 600 ~/.ssh/id_rsa\n          cat <<EOT >> ~/.ssh/config\n          Host github.com\n          HostName github.com\n          IdentityFile ~/.ssh/id_rsa\n          EOT\n      - name: Release to GitHub Pages\n        env:\n          USE_SSH: true\n          GIT_USER: git\n        run: |\n          git config --global user.email \"actions@gihub.com\"\n          git config --global user.name \"gh-actions\"\n          if [ -e yarn.lock ]; then\n          yarn install --frozen-lockfile\n          elif [ -e package-lock.json ]; then\n          npm ci\n          else\n          npm i\n          fi\n          npx docusaurus deploy\n```\n\n1. Now when a new pull request arrives towards your repository in branch `documentation` it will automatically ensure that Docusaurus build is successful.\n1. When pull request is merged to `documentation` branch or someone pushes to `documentation` branch directly it will be built and deployed to `gh-pages` branch.\n1. After this step, your updated documentation will be available on the GitHub pages.\n\n### Triggering deployment with Travis CI\n\nContinuous integration (CI) services are typically used to perform routine tasks whenever new commits are checked in to source control. These tasks can be any combination of running unit tests and integration tests, automating builds, publishing packages to NPM, and deploying changes to your website. All you need to do to automate the deployment of your website is to invoke the `yarn deploy` script whenever your website is updated. The following section covers how to do just that using [Travis CI](https://travis-ci.com/), a popular continuous integration service provider.\n\n1. Go to https://github.com/settings/tokens and generate a new [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/). When creating the token, grant it the `repo` scope so that it has the permissions it needs.\n1. Using your GitHub account, [add the Travis CI app](https://github.com/marketplace/travis-ci) to the repository you want to activate.\n1. Open your Travis CI dashboard. The URL looks like https://travis-ci.com/USERNAME/REPO, and navigate to the `More options` > `Setting` > `Environment Variables` section of your repository.\n1. Create a new environment variable named `GH_TOKEN` with your newly generated token as its value, then `GH_EMAIL` (your email address) and `GH_NAME` (your GitHub username).\n1. Create a `.travis.yml` on the root of your repository with the following:\n\n```yaml title=\".travis.yml\"\nlanguage: node_js\nnode_js:\n  - '10'\nbranches:\n  only:\n    - master\ncache:\n  yarn: true\nscript:\n  - git config --global user.name \"${GH_NAME}\"\n  - git config --global user.email \"${GH_EMAIL}\"\n  - echo \"machine github.com login ${GH_NAME} password ${GH_TOKEN}\" > ~/.netrc\n  - yarn && GIT_USER=\"${GH_NAME}\" yarn deploy\n```\n\nNow, whenever a new commit lands in `master`, Travis CI will run your suite of tests and if everything passes, your website will be deployed via the `yarn deploy` script.\n\n### Using Azure Pipelines\n\n1.  Sign Up at [Azure Pipelines](https://azure.microsoft.com/en-us/services/devops/pipelines/) if you haven't already.\n1.  Create an organization and within the organization create a project and connect your repository from GitHub.\n1.  Go to https://github.com/settings/tokens and generate a new [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) with the `repo` scope.\n1.  In the project page (which looks like https://dev.azure.com/ORG_NAME/REPO_NAME/_build) create a new pipeline with the following text. Also, click on edit and add a new environment variable named `GH_TOKEN` with your newly generated token as its value, then `GH_EMAIL` (your email address) and `GH_NAME` (your GitHub username). Make sure to mark them as secret. Alternatively, you can also add a file named `azure-pipelines.yml` at yout repository root.\n\n```yaml title=\"azure-pipelines.yml\"\ntrigger:\n  - master\n\npool:\n  vmImage: 'ubuntu-latest'\n\nsteps:\n  - checkout: self\n    persistCredentials: true\n\n  - task: NodeTool@0\n    inputs:\n      versionSpec: '10.x'\n    displayName: 'Install Node.js'\n\n  - script: |\n      git config --global user.name \"${GH_NAME}\"\n      git config --global user.email \"${GH_EMAIL}\"\n      git checkout -b master\n      echo \"machine github.com login ${GH_NAME} password ${GH_TOKEN}\" > ~/.netrc\n      yarn && GIT_USER=\"${GH_NAME}\" yarn deploy\n    env:\n      GH_NAME: $(GH_NAME)\n      GH_EMAIL: $(GH_EMAIL)\n      GH_TOKEN: $(GH_TOKEN)\n    displayName: 'yarn install and build'\n```\n\n### Using Drone\n\n1.  Create a new ssh key that will be the [deploy key](https://docs.github.com/en/free-pro-team@latest/developers/overview/managing-deploy-keys#deploy-keys) for your project.\n1.  Name your private and public keys to be specific and so that it does not overwrite your other [ssh keys](https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent).\n1.  Go to https://github.com/USERNAME/REPO/settings/keys and add a new deploy key by pasting in our public key you just generated.\n1.  Open your Drone.io dashboard and login. The URL looks like https://cloud.drone.io/USERNAME/REPO.\n1.  Click on the repository, click on activate repository, and add a secret called `git_deploy_private_key` with your private key value that you just generated.\n1.  Create a `.drone.yml` on the root of your repository with below text.\n\n```yaml\n# .drone.yml\nkind: pipeline\ntype: docker\ntrigger:\n  event:\n    - tag\n- name: Website\n  image: node\n  commands:\n    - mkdir -p $HOME/.ssh\n    - ssh-keyscan -t rsa github.com >> $HOME/.ssh/known_hosts\n    - echo \"$GITHUB_PRIVATE_KEY > $HOME/.ssh/id_rsa\"\n    - chmod 0600 $HOME/.ssh/id_rsa\n    - cd website\n    - npm i\n    - npm run publish-gh-pages\n  environment:\n    USE_SSH: true\n    GIT_USER: $DRONE_COMMIT_AUTHOR\n    GITHUB_PRIVATE_KEY: git_deploy_private_key\n```\n\nNow, whenever you push a new tag to github, this trigger will start the drone ci job to publish your website.\n\n## Deploying to Netlify\n\nTo deploy your Docusaurus 2 sites to [Netlify](https://www.netlify.com/), first make sure the following options are properly configured:\n\n```js {2-3} title=\"docusaurus.config.js\"\nmodule.exports = {\n  url: 'https://docusaurus-2.netlify.com', // Url to your site with no trailing slash\n  baseUrl: '/', // Base directory of your site relative to your repo\n  // ...\n};\n```\n\nThen, [create your site with Netlify](https://app.netlify.com/start).\n\nWhile you set up the site, specify the build commands and directories as follows:\n\n- build command: `npm run build`\n- build directory: `build`\n\nIf you did not configure these build options, you may still go to \"Site settings\" -> \"Build and deploy\" after your site is created.\n\nOnce properly configured with the above options, your site should deploy and automatically redeploy upon merging to your deploy branch, which defaults to `master`.\n\n:::important\n\nMake sure to disable Netlify setting `Pretty URLs` to prevent lowercased URLs, unnecessary redirects and 404 errors.\n\n:::\n\n## Deploying to Vercel\n\nDeploying your Docusaurus project to [Vercel](https://vercel.com/) will provide you with [various benefits](https://vercel.com/) in the areas of performance and ease of use.\n\nTo deploy your Docusaurus project with a [Vercel for Git Integration](https://vercel.com/docs/git-integrations), make sure it has been pushed to a Git repository.\n\nImport the project into Vercel using the [Import Flow](https://vercel.com/import/git). During the import, you will find all relevant options preconfigured for you; however, you can choose to change any of these options, a list of which can be found [here](https://vercel.com/docs/build-step#build-&-development-settings).\n\nAfter your project has been imported, all subsequent pushes to branches will generate [Preview Deployments](https://vercel.com/docs/platform/deployments#preview), and all changes made to the [Production Branch](https://vercel.com/docs/git-integrations#production-branch) (commonly \"main\") will result in a [Production Deployment](https://vercel.com/docs/platform/deployments#production).\n\n## Deploying to Render\n\nRender offers [free static site hosting](https://render.com/docs/static-sites) with fully managed SSL, custom domains, a global CDN and continuous auto-deploy from your Git repo. Deploy your app in just a few minutes by following these steps.\n\n1. Create a new **Web Service** on Render, and give Render permission to access your Docusaurus repo.\n\n1. Select the branch to deploy. The default is `master`.\n\n1. Enter the following values during creation.\n\n   | Field                 | Value         |\n   | --------------------- | ------------- |\n   | **Environment**       | `Static Site` |\n   | **Build Command**     | `yarn build`  |\n   | **Publish Directory** | `build`       |\n\nThat's it! Your app will be live on your Render URL as soon as the build finishes.\n\n## Deploying to Surge\n\nSurge is a [static web hosting platform](https://surge.sh/help/getting-started-with-surge), it is used to deploy your Docusaurus project from the command line in a minute. Deploying your project to Surge is easy and it is also free (including a custom domain and SSL).\n\nDeploy your app in a matter of seconds using surge with the following steps:\n\n1. First, install Surge using npm by running the following command:\n\n```bash\nnpm install --g surge\n```\n\n2. To build the static files of your site for production in the root directory of your project, run:\n\n```bash\nnpm run build\n```\n\n3. Then, run this command inside the root directory of your project:\n\n```bash\nsurge build/\n```\n\nFirst-time users of Surge would be prompted to create an account from the command line(happens only once).\n\nConfirm that the site you want to publish is in the `build` directory, a randomly generated subdomain `*.surge.sh subdomain` is always given (which can be edited).\n\n### Using your domain\n\nIf you have a domain name you can deploy your site using surge to your domain using the command:\n\n```bash\nsurge build/ yourdomain.com\n```\n\nYour site is now deployed for free at `subdomain.surge.sh` or `yourdomain.com` depending on the method you chose.\n\n### Setting up CNAME file\n\nStore your domain in a CNAME file for future deployments with the following command:\n\n```bash\necho subdomain.surge.sh > CNAME\n```\n\nYou can deploy any other changes in the future with the command `surge`.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.9863641349032595,
      "title": "design-principles",
      "fileContents": "---\nid: design-principles\ntitle: Design Principles\n---\n\n:::caution\n\nThis section is a work in progress.\n\n:::\n\n- **Little to learn** - Docusaurus should be easy to learn and use as the API is quite small. Most things will still be achievable by users, even if it takes them more code and more time to write. Not having abstractions is better than having the wrong abstractions, and we don't want users to have to hack around the wrong abstractions. Mandatory talk - [Minimal API Surface Area](https://www.youtube.com/watch?v=4anAwXYqLG8).\n- **Intuitive** - Users will not feel overwhelmed when looking at the project directory of a Docusaurus project or adding new features. It should look intuitive and easy to build on top of, using approaches they are familiar with.\n- **Layered architecture** - The separations of concerns between each layer of our stack (content/theming/styling) should be clear - well-abstracted and modular.\n- **Sensible defaults** - Common and popular performance optimizations and configurations will be done for users but they are given the option to override them.\n- **No vendor-lock in** - Users are not required to use the default plugins or CSS, although they are highly encouraged to. Certain core lower-level infra level pieces like React Loadable, React Router cannot be swapped because we do default performance optimization on them. But not higher level ones, such as choice of Markdown engines, CSS frameworks, CSS methodology will be entirely up to users.\n\n## How Docusaurus works\n\n<!-- moved in from how Docusaurus works @yangshun -->\n\nWe believe that as developers, knowing how a library works is helpful in allowing us to become better at using it. Hence we're dedicating effort into explaining the architecture and various components of Docusaurus with the hope that users reading it will gain a deeper understanding of the tool and be even more proficient in using it.\n\n<!--\n\nExplain the principles that guide the development of Docusaurus.\n\nReferences\n---\n- https://www.gatsbyjs.org/docs/behind-the-scenes/\n- https://reactjs.org/docs/design-principles.html\n- https://v1.vuepress.vuejs.org/miscellaneous/design-concepts.html\n\n-->\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.8237933822099939,
      "title": "docs-introduction",
      "fileContents": "---\nid: docs-introduction\ntitle: Docs Introduction\nsidebar_label: Introduction\n---\n\nThe docs feature provides users with a way to organize Markdown files in a hierarchical format.\n\n## Document ID\n\nEvery document has a unique `id`. By default, a document `id` is the name of the document (without the extension) relative to the root docs directory.\n\nFor example, `greeting.md` id is `greeting` and `guide/hello.md` id is `guide/hello`.\n\n```bash\nwebsite # Root directory of your site\n└── docs\n   ├── greeting.md\n   └── guide\n      └── hello.md\n```\n\nHowever, the **last part** of the `id` can be defined by user in the front matter. For example, if `guide/hello.md`'s content is defined as below, its final `id` is `guide/part1`.\n\n```yml\n---\nid: part1\n---\nLorem ipsum\n```\n\nIf you want more control over the last part of the document URL, it is possible to add a `slug` (defaults to the `id`).\n\n```yml\n---\nid: part1\nslug: part1.html\n---\nLorem ipsum\n```\n\n:::note\n\nIt is possible to use:\n\n- absolute slugs: `slug: /mySlug`, `slug: /`...\n- relative slugs: `slug: mySlug`, `slug: ./../mySlug`...\n\n:::\n\n## Home page docs\n\nIf you want a document to be available at the root, and have a path like `https://v2.docusaurus.io/docs/`, you can use the slug frontmatter:\n\n```yml\n---\nid: my-home-doc\nslug: /\n---\nLorem ipsum\n```\n\n## Sidebar\n\nTo generate a sidebar to your Docusaurus site, you need to define a file that exports a sidebar object and pass that into the `@docusaurus/plugin-docs` plugin directly or via `@docusaurus/preset-classic`.\n\n```js {8-9} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          // Sidebars filepath relative to the site dir.\n          sidebarPath: require.resolve('./sidebars.js'),\n        },\n        // ...\n      },\n    ],\n  ],\n};\n```\n\n### Hideable sidebar\n\nUsing the enabled `themeConfig.hideableSidebar` option, you can make the entire sidebar hided, allowing you to better focus your users on the content. This is especially useful when content consumption on medium screens (e.g. on tablets).\n\n```js {4} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    hideableSidebar: true,\n    // ...\n  },\n};\n```\n\n### Sidebar object\n\nA sidebar object is defined like this:\n\n```typescript\ntype Sidebar = {\n  [sidebarId: string]:\n    | {\n        [sidebarCategory: string]: SidebarItem[];\n      }\n    | SidebarItem[];\n};\n```\n\nBelow is an example of a sidebar object. The key `docs` is the id of the sidebar (can be renamed to something else) and `Getting Started` is a category within the sidebar. `greeting` and `doc1` are both [sidebar item](#sidebar-item).\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  docs: {\n    'Getting started': ['greeting'],\n    Docusaurus: ['doc1'],\n  },\n};\n```\n\nKeep in mind that EcmaScript does not guarantee `Object.keys({a,b}) === ['a','b']` (yet, this is generally true). If you don't want to rely on iteration order of JavaScript object keys for the category name, the following sidebar object is also equivalent of the above shorthand syntax.\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  docs: [\n    {\n      type: 'category',\n      label: 'Getting Started',\n      items: ['greeting'],\n    },\n    {\n      type: 'category',\n      label: 'Docusaurus',\n      items: ['doc1'],\n    },\n  ],\n};\n```\n\nYou can also have multiple sidebars for different Markdown files by adding more top-level keys to the exported object.\n\nExample:\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  firstSidebar: {\n    'Category A': ['doc1'],\n  },\n  secondSidebar: {\n    'Category A': ['doc2'],\n    'Category B': ['doc3'],\n  },\n};\n```\n\n#### Sidebar item\n\nAs the name implies, `SidebarItem` is an item defined in a Sidebar. There are a few types we support:\n\n- [Doc](#doc)\n- [Link](#link)\n- [Ref](#ref)\n- [Category](#category)\n\n#### Doc\n\n```typescript\ntype SidebarItemDoc =\n  | string\n  | {\n      type: 'doc';\n      id: string;\n    };\n```\n\nSidebar item type that links to a doc page. Example:\n\n```js\n{\n  type: 'doc',\n  id: 'doc1', // string - document id\n}\n```\n\nUsing just the [Document ID](#document-id) is perfectly valid as well, the following is equivalent to the above:\n\n```js\n'doc1'; // string - document id\n```\n\nNote that using this type will bind the linked doc to current sidebar, this means that if you access `doc1` page, the sidebar displayed will be the sidebar this item is on. For below case, `doc1` is bounded to `firstSidebar`.\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  firstSidebar: {\n    'Category A': ['doc1'],\n  },\n  secondSidebar: {\n    'Category A': ['doc2'],\n    'Category B': ['doc3'],\n  },\n};\n```\n\n#### Link\n\n```typescript\ntype SidebarItemLink = {\n  type: 'link';\n  label: string;\n  href: string;\n};\n```\n\nSidebar item type that links to a non-document page. Example:\n\n```js\n{\n  type: 'link',\n  label: 'Custom Label', // The label that should be displayed (string).\n  href: 'https://example.com' // The target URL (string).\n}\n```\n\n#### Ref\n\n```typescript\ntype SidebarItemRef = {\n  type: 'ref';\n  id: string;\n};\n```\n\nSidebar item type that links to doc without bounding it to the sidebar. Example:\n\n```js\n{\n  type: 'ref',\n  id: 'doc1', // Document id (string).\n}\n```\n\n#### Category\n\nThis is used to add hierarchies to the sidebar:\n\n```typescript\ntype SidebarItemCategory = {\n  type: 'category';\n  label: string; // Sidebar label text.\n  items: SidebarItem[]; // Array of sidebar items.\n  collapsed: boolean; // Set the category to be collapsed or open by default\n};\n```\n\nAs an example, here's how we created the subcategory for \"Docs\" under \"Guides\" in this site:\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  docs: {\n    Guides: [\n      'creating-pages',\n      {\n        type: 'category',\n        label: 'Docs',\n        items: ['markdown-features', 'sidebar', 'versioning'],\n      },\n    ],\n  },\n};\n```\n\n**Note**: it's possible to use the shorthand syntax to create nested categories:\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  docs: {\n    Guides: [\n      'creating-pages',\n      {\n        Docs: ['markdown-features', 'sidebar', 'versioning'],\n      },\n    ],\n  },\n};\n```\n\n#### Collapsible categories\n\nFor sites with a sizable amount of content, we support the option to expand/collapse a category to toggle the display of its contents. Categories are collapsible by default. If you want them to be always expanded, set `themeConfig.sidebarCollapsible` to `false`:\n\n```js {4} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    sidebarCollapsible: false,\n    // ...\n  },\n};\n```\n\n#### Expanded categories by default\n\nFor docs that have collapsible categories, you may want more fine-grain control over certain categories. If you want specific categories to be always expanded, you can set `collapsed` to `false`:\n\n```js title=\"sidebars.js\"\nmodule.exports = {\n  docs: {\n    Guides: [\n      'creating-pages',\n      {\n        type: 'category',\n        label: 'Docs',\n        collapsed: false,\n        items: ['markdown-features', 'sidebar', 'versioning'],\n      },\n    ],\n  },\n};\n```\n\n## Docs-only mode\n\nIf you only want the documentation feature, you can run your Docusaurus 2 site without a landing page and display your documentation page as the index page instead.\n\nTo enable docs-only mode, set the docs plugin `routeBasePath: '/'`, and use the frontmatter `slug: /` on the document that should be the index page ([more infos](#home-page-docs)).\n\n:::caution\n\nYou should delete the existing homepage at `./src/pages/index.js`, or else there will be two files mapping to the same route!\n\n:::\n\n:::tip\n\nThere's also a \"blog-only mode\" for those who only want to use the blog feature of Docusaurus 2. You can use the same method detailed above. Follow the setup instructions on [Blog-only mode](blog.md#blog-only-mode).\n\n:::\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.2769387255013984,
      "title": "docusaurus-core",
      "fileContents": "---\nid: docusaurus-core\ntitle: Docusaurus Client API\nsidebar_label: Client API\n---\n\nDocusaurus provides some APIs on the clients that can be helpful to you when building your site.\n\n## Components\n\n### `<Head/>`\n\nThis reusable React component will manage all of your changes to the document head. It takes plain HTML tags and outputs plain HTML tags and is beginner-friendly. It is a wrapper around [React Helmet](https://github.com/nfl/react-helmet).\n\nUsage Example:\n\n```jsx {2,6,11}\nimport React from 'react';\nimport Head from '@docusaurus/Head';\n\nconst MySEO = () => (\n  <>\n    <Head>\n      <meta property=\"og:description\" content=\"My custom description\" />\n      <meta charSet=\"utf-8\" />\n      <title>My Title</title>\n      <link rel=\"canonical\" href=\"http://mysite.com/example\" />\n    </Head>\n  </>\n);\n```\n\nNested or latter components will override duplicate usages:\n\n```jsx {2,5,8,11}\n<Parent>\n  <Head>\n    <title>My Title</title>\n    <meta name=\"description\" content=\"Helmet application\" />\n  </Head>\n\n  <Child>\n    <Head>\n      <title>Nested Title</title>\n      <meta name=\"description\" content=\"Nested component\" />\n    </Head>\n  </Child>\n</Parent>\n```\n\nOutputs\n\n```html\n<head>\n  <title>Nested Title</title>\n  <meta name=\"description\" content=\"Nested component\" />\n</head>\n```\n\n### `<Link/>`\n\nThis component enables linking to internal pages as well as a powerful performance feature called preloading. Preloading is used to prefetch resources so that the resources are fetched by the time the user navigates with this component. We use an `IntersectionObserver` to fetch a low-priority request when the `<Link>` is in the viewport and then use an `onMouseOver` event to trigger a high-priority request when it is likely that a user will navigate to the requested resource.\n\nThe component is a wrapper around react-router’s `<Link>` component that adds useful enhancements specific to Docusaurus. All props are passed through to react-router’s `<Link>` component.\n\n```jsx {2,7}\nimport React from 'react';\nimport Link from '@docusaurus/Link';\n\nconst Page = () => (\n  <div>\n    <p>\n      Check out my <Link to=\"/blog\">blog</Link>!\n    </p>\n    <p>\n      {/* Note that external links still use `a` tags, but automatically opens in new tab. */}\n      Follow me on <a href=\"https://twitter.com/docusaurus\">Twitter</a>!\n    </p>\n  </div>\n);\n```\n\n#### `to`: string\n\nThe target location to navigate to. Example: `/docs/introduction`.\n\n```jsx\n<Link to=\"/courses\" />\n```\n\n### `<Redirect/>`\n\nRendering a `<Redirect>` will navigate to a new location. The new location will override the current location in the history stack, like server-side redirects (HTTP 3xx) do. You can refer to [React Router's Redirect documentation](https://reacttraining.com/react-router/web/api/Redirect) for more info on available props.\n\nExample usage:\n\n```jsx {2,5}\nimport React from 'react';\nimport {Redirect} from '@docusaurus/router';\n\nfunction Home() {\n  return <Redirect to=\"/docs/test\" />;\n}\n```\n\n:::note\n\n`@docusaurus/router` implements [React Router](https://reacttraining.com/react-router/web/guides/quick-start) and supports its features.\n\n:::\n\n### `<BrowserOnly/>`\n\nThe `<BrowserOnly>` component accepts a `children` prop, a render function which will not be executed during the pre-rendering phase of the build process. This is useful for hiding code that is only meant to run in the browsers (e.g. where the `window`/`document` objects are being accessed). To improve SEO, you can also provide fallback content using the `fallback` prop, which will be prerendered until in the build process and replaced with the client-side only contents when viewed in the browser.\n\n```jsx\nimport BrowserOnly from '@docusaurus/BrowserOnly';\n\nfunction MyComponent() {\n  return (\n    <BrowserOnly\n      fallback={<div>The fallback content to display on prerendering</div>}>\n      {() => {\n        // Something that should be excluded during build process prerendering.\n      }}\n    </BrowserOnly>\n  );\n}\n```\n\n## Hooks\n\n### `useDocusaurusContext`\n\nReact hook to access Docusaurus Context. Context contains `siteConfig` object from [docusaurus.config.js](api/docusaurus.config.js.md), and some additional site metadata.\n\n```ts\ntype DocusaurusPluginVersionInformation =\n  | {readonly type: 'package'; readonly version?: string}\n  | {readonly type: 'project'}\n  | {readonly type: 'local'}\n  | {readonly type: 'synthetic'};\n\ninterface DocusaurusSiteMetadata {\n  readonly docusaurusVersion: string;\n  readonly siteVersion?: string;\n  readonly pluginVersions: Record<string, DocusaurusPluginVersionInformation>;\n}\n\ninterface DocusaurusContext {\n  siteConfig: DocusaurusConfig;\n  siteMetadata: DocusaurusSiteMetadata;\n}\n```\n\nUsage example:\n\n```jsx {5,8,9}\nimport React from 'react';\nimport useDocusaurusContext from '@docusaurus/useDocusaurusContext';\n\nconst MyComponent = () => {\n  const {siteConfig, siteMetadata} = useDocusaurusContext();\n  return (\n    <div>\n      <h1>{siteConfig.title}</h1>\n      <div>{siteMetadata.siteVersion}</div>\n      <div>{siteMetadata.docusaurusVersion}</div>\n    </div>\n  );\n};\n```\n\n### `useBaseUrl`\n\nReact hook to automatically prepend `baseUrl` to a string automatically. This is particularly useful if you don't want to hardcode your config's `baseUrl`. We highly recommend you to use this.\n\n```ts\ntype BaseUrlOptions = {\n  forcePrependBaseUrl: boolean;\n  absolute: boolean;\n};\n```\n\nExample usage:\n\n```jsx {3,11}\nimport React from 'react';\nimport Link from '@docusaurus/Link';\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\nfunction Help() {\n  return (\n    <div className=\"col\">\n      <h2>Browse the docs</h2>\n      <p>\n        Learn more about Docusaurus using the{' '}\n        <Link to={useBaseUrl('docs/introduction')}>official documentation</Link>\n      </p>\n    </div>\n  );\n}\n```\n\n### `useBaseUrlUtils`\n\nSometimes `useBaseUrl` is not good enough. This hook return additional utils related to your site's base url.\n\n- `withBaseUrl`: useful if you need to add base urls to multiple urls at once\n\n```jsx {2,5,6,7}\nimport React from 'react';\nimport {useBaseUrlUtils} from '@docusaurus/useBaseUrl';\n\nfunction Component() {\n  const urls = ['/a', '/b'];\n  const {withBaseUrl} = useBaseUrlUtils();\n  const urlsWithBaseUrl = urls.map(withBaseUrl);\n  return <div className=\"col\">{/* ... */}</div>;\n}\n```\n\n### `useGlobalData()`\n\nReact hook to access Docusaurus global data created by all the plugins.\n\nGlobal data is namespaced by plugin name, and plugin id.\n\n:::info\n\nPlugin id is only useful when a plugin is used multiple times on the same site. Each plugin instance is able to create its own global data.\n\n:::\n\n```ts\ntype GlobalData = Record<\n  PluginName,\n  Record<\n    PluginId, // \"default\" by default\n    any // plugin-specific data\n  >\n>;\n```\n\nUsage example:\n\n```jsx {2,5,6,7}\nimport React from 'react';\nimport useGlobalData from '@docusaurus/useGlobalData';\n\nconst MyComponent = () => {\n  const globalData = useDocusaurusContext();\n  const myPluginData = globalData['my-plugin']['default'];\n  return <div>{myPluginData.someAttribute}</div>;\n};\n```\n\n:::tip\n\nInspect your site's global data at `./docusaurus/globalData.json`\n\n:::\n\n### `usePluginData(pluginName: string, pluginId?: string)`\n\nAccess global data created by a specific plugin instance.\n\nThis is the most convenient hook to access plugin global data, and should be used most of the time.\n\n`pluginId` is optional if you don't use multi-instance plugins.\n\nUsage example:\n\n```jsx {2,5,6}\nimport React from 'react';\nimport {usePluginData} from '@docusaurus/useGlobalData';\n\nconst MyComponent = () => {\n  const myPluginData = usePluginData('my-plugin');\n  return <div>{myPluginData.someAttribute}</div>;\n};\n```\n\n### `useAllPluginInstancesData(pluginName: string)`\n\nAccess global data created by a specific plugin. Given a plugin name, it returns the data of all the plugins instances of that name, by plugin id.\n\nUsage example:\n\n```jsx {2,5,6,7}\nimport React from 'react';\nimport {useAllPluginInstancesData} from '@docusaurus/useGlobalData';\n\nconst MyComponent = () => {\n  const allPluginInstancesData = useAllPluginInstancesData('my-plugin');\n  const myPluginData = allPluginInstancesData['default'];\n  return <div>{myPluginData.someAttribute}</div>;\n};\n```\n\n## Modules\n\n### `ExecutionEnvironment`\n\nA module which exposes a few boolean variables to check the current rendering environment. Useful if you want to only run certain code on client/server or need to write server-side rendering compatible code.\n\n```jsx {2}\nimport React from 'react';\nimport ExecutionEnvironment from '@docusaurus/ExecutionEnvironment';\n\nfunction MyPage() {\n  const location = ExecutionEnvironment.canUseDOM ? window.location.href : null;\n  return <div>{location}</div>;\n}\n```\n\n| Field | Description |\n| --- | --- |\n| `ExecutionEnvironment.canUseDOM` | `true` if on client, `false` if prerendering. |\n| `ExecutionEnvironment.canUseEventListeners` | `true` if on client and has `window.addEventListener`. |\n| `ExecutionEnvironment.canUseIntersectionObserver` | `true` if on client and has `IntersectionObserver`. |\n| `ExecutionEnvironment.canUseViewport` | `true` if on client and has `window.screen`. |\n\n### `constants`\n\nA module exposing useful constants to client-side theme code.\n\n```jsx\nimport {DEFAULT_PLUGIN_ID} from '@docusaurus/constants';\n```\n\n| Named export        | Value     |\n| ------------------- | --------- |\n| `DEFAULT_PLUGIN_ID` | `default` |\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.5396742961188001,
      "title": "installation",
      "fileContents": "---\nid: installation\ntitle: Installation\n---\n\nDocusaurus is essentially a set of npm [packages](https://github.com/facebook/docusaurus/tree/master/packages) that can be installed over npm.\n\n## Requirements\n\n- [Node.js](https://nodejs.org/en/download/) version >= 10.15.1 or above (which can be checked by running `node -v`). You can use [nvm](https://github.com/nvm-sh/nvm) for managing multiple Node versions on a single machine installed\n- [Yarn](https://yarnpkg.com/en/) version >= 1.5 (which can be checked by running `yarn version`). Yarn is a performant package manager for JavaScript and replaces the `npm` client. It is not strictly necessary but highly encouraged.\n\n## Scaffold project website\n\nThe easiest way to install Docusaurus is to use the command line tool that helps you scaffold a skeleton Docusaurus website. You can run this command anywhere in a new empty repository or within an existing repository, it will create a new directory containing the scaffolded files.\n\n```bash\nnpx @docusaurus/init@latest init [name] [template]\n```\n\nExample:\n\n```bash\nnpx @docusaurus/init@latest init my-website classic\n```\n\nIf you do not specify `name` or `template`, it will prompt you for them. We recommend the `classic` template so that you can get started quickly and it contains features found in Docusaurus 1. The `classic` template contains `@docusaurus/preset-classic` which includes standard documentation, a blog, custom pages, and a CSS framework (with dark mode support). You can get up and running extremely quickly with the classic template and customize things later on when you have gained more familiarity with Docusaurus.\n\n**[FB-Only]:** If you are setting up a new Docusaurus website for a Facebook open source project, use the `facebook` template instead, which comes with some useful Facebook-specific defaults:\n\n```bash\nnpx @docusaurus/init@latest init my-website facebook\n```\n\n**[Experimental]:** If you want setting up a new website using [bootstrap](https://getbootstrap.com/), use the `bootstrap` template, like the following::\n\n```bash\nnpx @docusaurus/init@latest init my-website bootstrap\n```\n\n## Project structure\n\nAssuming you chose the classic template and named your site `my-website`, you will see the following files generated under a new directory `my-website/`:\n\n```sh\nmy-website\n├── blog\n│   ├── 2019-05-28-hola.md\n│   ├── 2019-05-29-hello-world.md\n│   └── 2020-05-30-welcome.md\n├── docs\n│   ├── doc1.md\n│   ├── doc2.md\n│   ├── doc3.md\n│   └── mdx.md\n├── src\n│   ├── css\n│   │   └── custom.css\n│   └── pages\n│       ├── styles.module.css\n│       └── index.js\n├── static\n│   └── img\n├── docusaurus.config.js\n├── package.json\n├── README.md\n├── sidebars.js\n└── yarn.lock\n```\n\n### Project structure rundown\n\n- `/blog/` - Contains the blog Markdown files. You can delete the directory if you do not want/need a blog. More details can be found in the [blog guide](blog.md).\n- `/docs/` - Contains the Markdown files for the docs. Customize the order of the docs sidebar in `sidebars.js`. More details can be found in the [docs guide](markdown-features.mdx).\n- `/src/` - Non-documentation files like pages or custom React components. You don't have to strictly put your non-documentation files in here but putting them under a centralized directory makes it easier to specify in case you need to do some sort of linting/processing\n  - `/src/pages` - Any files within this directory will be converted into a website page. More details can be found in the [pages guide](guides/creating-pages.md).\n- `/static/` - Static directory. Any contents inside here will be copied into the root of the final `build` directory.\n- `/docusaurus.config.js` - A config file containing the site configuration. This is the equivalent of `siteConfig.js` in Docusaurus 1.\n- `/package.json` - A Docusaurus website is a React app. You can install and use any npm packages you like in them.\n- `/sidebar.js` - Used by the documentation to specify the order of documents in the sidebar.\n\n## Running the development server\n\nTo preview your changes as you edit the files, you can run a local development server that will serve your website and it will reflect the latest changes.\n\n```bash npm2yarn\ncd my-website\nnpm run start\n```\n\nBy default, a browser window will open at http://localhost:3000.\n\nCongratulations! You have just created your first Docusaurus site! Browse around the site to see what's available.\n\n## Build\n\nDocusaurus is a modern static website generator so we need to build the website into a directory of static contents and put it on a web server so that it can be viewed. To build the website:\n\n```bash npm2yarn\nnpm run build\n```\n\nand contents will be generated within the `/build` directory, which can be copied to any static file hosting service like [GitHub pages](https://pages.github.com/), [Vercel](https://vercel.com/) or [Netlify](https://www.netlify.com/). Check out the docs on [deployment](deployment.mdx)) for more details.\n\n## Updating your Docusaurus version\n\nThere are many ways to update your Docusaurus version. One guaranteed way is to manually change the version number in `package.json` to the desired version. Note that all `@docusaurus/`-namespaced packages should be using the same version.\n\n:::important\n\nPlease update to the latest Docusaurus 2 version shown at the top of the page, not what is shown below.\n\n:::\n\n```json title=\"package.json\"\n\"dependencies\": {\n  \"@docusaurus/core\": \"^2.0.0-alpha.49\",\n  \"@docusaurus/preset-classic\": \"^2.0.0-alpha.49\",\n  // ...\n}\n```\n\nThen, in the directory containing `package.json`, run your package manager's install command:\n\n```bash npm2yarn\nnpm install\n```\n\nTo check that that the update occurred successfully, run:\n\n```bash npm2yarn\nnpx docusaurus --version\n```\n\nYou should see the correct version as output.\n\nAlternatively, if you are using Yarn, you can do:\n\n```bash\nyarn upgrade @docusaurus/core@2.0.0-alpha.49 @docusaurus/preset-classic@2.0.0-alpha.49\n```\n\n## Problems?\n\nAsk for help on [Stack Overflow](https://stackoverflow.com/questions/tagged/docusaurus), on our [GitHub repository](https://github.com/facebook/docusaurus) or [Twitter](https://twitter.com/docusaurus).\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.7150952200707958,
      "title": "introduction",
      "fileContents": "---\nid: introduction\ntitle: Introduction\ndescription: Docusaurus was designed from the ground up to be easily installed and used to get your website up and running quickly.\nslug: /\n---\n\n## Disclaimer\n\nDocusaurus v2 is **still alpha** (since mid-2019) but already quite stable.\n\nWe highly encourage you to **use Docusaurus v2 over Docusaurus v1**.\n\nMost users are already using v2 ([trends](https://www.npmtrends.com/docusaurus-vs-@docusaurus/core)), including [React Native](https://reactnative.dev), [Redux](https://redux.js.org/) and [many others](/showcase).\n\n**Use **Docusaurus v2** if:**\n\n- :white_check_mark: You want a modern Jamstack documentation site\n- :white_check_mark: You want a single-page application (SPA) with client-side routing\n- :white_check_mark: You want the full power of React and MDX\n- :white_check_mark: You do not need support for IE11\n\n**Use [Docusaurus v1](https://docusaurus.io/) if:**\n\n- :x: You don't want a single-page application (SPA)\n- :x: You prefer stability over modernity (try [Docusaurus 1](https://docusaurus.io/) instead)\n- :x: You need support for IE11\n\n## A better Docusaurus is coming to town\n\n<img alt=\"Docusaurus \" src={require('@docusaurus/useBaseUrl').default('img/slash-introducing.svg')} />\n\nDocusaurus 1 used to be a pure documentation site generator. In Docusaurus 2, we rebuilt it from the ground up, allowing for more customizability but preserved the best parts of Docusaurus 1 - easy to get started, versioned docs, and i18n (_coming soon_).\n\nBeyond that, Docusaurus 2 is a **performant static site generator** and can be used to create common content-driven websites (e.g. Documentation, Blogs, Product Landing and Marketing Pages, etc) extremely quickly.\n\nWhile our main focus will still be helping you get your documentations right and well, it is possible to build any kind of website using Docusaurus 2 as it is just a React application. **Docusaurus can now be used to build any website, not just documentation websites.**\n\n## Features\n\nDocusaurus is built with high attention to your experience building your site and maintaining it with your collaborators and contributors.\n\n- ⚛️ **Built with 💚 and React**\n  - Extend and customize with React\n  - Gain full control of your site's browsing experience by `swizzling` in your own components\n- **Pluggable**\n  - Bootstrap your site with a basic template, then pick and plug functionalities built by us and our community\n  - Open source your plugins to share with your fellow documentarians, because sharing is caring\n- ✂️ **Developer experience**\n  - Multiple bootstrapping templates to get your site up and running, start writing your docs right now\n  - Universal configuration entry point to make it more maintainable by contributors\n  - Hot reloading with lightning fast incremental build on changes\n  - Route-based code and data splitting\n  - Publish to GitHub Pages, Netlify, and other deployment services with ease\n\nOur shared goal — to help your users find what they need fast, and understand your products better. With the experience of Docusaurus 1, we share with you our best practices to help you build your doc site right and well.\n\n- 🎯 **SEO friendly**\n  - HTML files are statically generated for every possible path\n  - page-specific SEO to help your users land on your official docs directly relating their problems at hand\n- 📝 **Powered by MDX**\n  - Write interactive components via JSX and React embedded in markdown\n  - Share your code in live editors to get your users love your products on the spot\n- 🔍 **Search** - Your full site is searchable\n- 💾 **Document Versioning** - Helps you keep documentation in sync with project releases.\n- 🌍 **i18n** (_coming soon_)\n\nDocusaurus 2 is born to be compassionately accessible to all your users, and lightning fast.\n\n- ⚡️ **Lightning fast** - Docusaurus 2 follows the [PRPL Pattern](https://developers.google.com/web/fundamentals/performance/prpl-pattern/) that makes sure your content loads blazing fast\n- 🦖 **Accessible** - Attention to accessibility, making your site equally accessible to all users\n\n## Comparison with other tools\n\nAcross all static site generators, Docusaurus has a unique focus on doc sites and has out-of-the-box structure you need.\n\nWe've also studied other main static site generators and would like to share our insights on the comparison, hopefully to help you navigate through the prismatic choices out there.\n\n### Gatsby\n\nGatsby is packed with a lot of features, has a rich ecosystem of plugins and is capable of doing everything that Docusaurus does. Naturally, that comes at a cost of a higher learning curve. Gatsby does many things well and is suitable for building many types of websites. On the other hand, Docusaurus tries to do one thing super well - be the best tool for writing and publishing content.\n\nGraphQL is also pretty core to Gatsby, although you don't necessarily need GraphQL to build a Gatsby site. In most cases when building static websites, you won't need the flexibility that GraphQL provides.\n\nMany aspects of Docusaurus 2 were inspired by the best things about Gatsby and it's a great alternative.\n\n### GitBook\n\nGitBook has very clean design and has been used by many open source projects. With its focus shifting towards a commercial product rather than an open-source tool, many of its requirements no longer fit the needs as an open source project's documentation site. As a result, many have turned to other products. You may read about Redux's switch to Docusaurus [here](https://github.com/reduxjs/redux/issues/3161).\n\nCurrently, GitBook is only free for open-source and non-profit teams. Docusaurus is free for everyone.\n\n### Jekyll\n\nJekyll is one of the most mature static site generators around and has been a great tool to use — in fact, before Docusaurus, most of Facebook's Open Source websites are/were built on Jekyll! It is extremely simple to get started. We want to bring a similar developer experience as building a static site with Jekyll.\n\nIn comparison with statically generated HTML and interactivity added using `<script />` tags, Docusaurus sites are React apps. Using modern JavaScript ecosystem tooling, we hope to set new standards on doc sites performance, asset build pipeline and optimizations, and ease to setup.\n\n### VuePress\n\nVuePress has many similarities with Docusaurus - both focus heavily on content-centric website and provides tailored documentation features out of the box. However, VuePress is powered by Vue, while Docusaurus is powered by React. If you want a Vue-based solution, VuePress would be a decent choice.\n\n<!-- TODO: Add a Next.js comparison -->\n\n## Staying informed\n\n- [GitHub](https://github.com/facebook/docusaurus)\n- [Twitter](https://twitter.com/docusaurus)\n- [Blog](/blog)\n\n## Something missing?\n\nIf you find issues with the documentation or have suggestions on how to improve the documentation or the project in general, please [file an issue](https://github.com/facebook/docusaurus) for us, or send a tweet mentioning the [@docusaurus](https://twitter.com/docusaurus) Twitter account.\n\nFor new feature requests, you can create a post on our [Canny board](/feedback), which is a handy tool for roadmapping and allows for sorting by upvotes, which gives the core team a better indicator of what features are in high demand, as compared to GitHub issues which are harder to triage. Refrain from making a Pull Request for new features (especially large ones) as someone might already be working on it or will be part of our roadmap. Talk to us first!\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.49198749698297894,
      "title": "lifecycle-apis",
      "fileContents": "---\nid: lifecycle-apis\ntitle: Lifecycle APIs\n---\n\n:::caution\n\nThis section is a work in progress.\n\n:::\n\nLifecycle APIs are shared by Themes and Plugins.\n\n## `validateOptions({options, validate})`\n\nReturn validated and normalized options for the plugin. This method is called before the plugin is initialized.You must return options since the returned options will be passed to plugin during initialization.\n\n### `options`\n\n`validateOptions` is called with `options` passed to plugin for validation and normalization.\n\n### `validate`\n\n`validateOptions` is called with `validate` function which takes a **[Joi](https://www.npmjs.com/package/joi)** schema and options as argument, returns validated and normalized options. `validate` will automatically handle error and validation config.\n\n:::tip\n\n[Joi](https://www.npmjs.com/package/joi) is recommended for validation and normalization of options.\n\n:::\n\nIf you don't use **[Joi](https://www.npmjs.com/package/joi)** for validation you can throw an Error in case of invalid options and return options in case of success.\n\n```js {8-11} title=\"my-plugin/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // rest of methods\n  };\n};\n\nmodule.exports.validateOptions = ({options, validate}) => {\n  const validatedOptions = validate(myValidationSchema, options);\n  return validationOptions;\n};\n```\n\nYou can also use ES modules style exports.\n\n```ts {8-11} title=\"my-plugin/src/index.ts\"\nexport default function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // rest of methods\n  };\n}\n\nexport function validateOptions({options, validate}) {\n  const validatedOptions = validate(myValidationSchema, options);\n  return validationOptions;\n}\n```\n\n## `validateThemeConfig({themeConfig, validate})`\n\nReturn validated and normalized configuration for the theme.\n\n### `themeConfig`\n\n`validateThemeConfig` is called with `themeConfig` provided in `docusaurus.config.js` for validation and normalization.\n\n### `validate`\n\n`validateThemeConfig` is called with `validate` function which takes a **[Joi](https://www.npmjs.com/package/joi)** schema and `themeConfig` as argument, returns validated and normalized options. `validate` will automatically handle error and validation config.\n\n:::tip\n\n[Joi](https://www.npmjs.com/package/joi) is recommended for validation and normalization of theme config.\n\n:::\n\nIf you don't use **[Joi](https://www.npmjs.com/package/joi)** for validation you can throw an Error in case of invalid options.\n\n```js {8-11} title=\"my-theme/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // rest of methods\n  };\n};\n\nmodule.exports.validateThemeConfig = ({themeConfig, validate}) => {\n  const validatedThemeConfig = validate(myValidationSchema, options);\n  return validatedThemeConfig;\n};\n```\n\nYou can also use ES modules style exports.\n\n```ts {8-11} title=\"my-theme/src/index.ts\"\nexport default function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // rest of methods\n  };\n}\n\nexport function validateThemeConfig({themeConfig, validate}) {\n  const validatedThemeConfig = validate(myValidationSchema, options);\n  return validatedThemeConfig;\n}\n```\n\n## `getPathsToWatch()`\n\nSpecifies the paths to watch for plugins and themes. The paths are watched by the dev server so that the plugin lifecycles are reloaded when contents in the watched paths change. Note that the plugins and themes modules are initially called with `context` and `options` from Node, which you may use to find the necessary directory information about the site.\n\nExample:\n\n```js {5-7} title=\"docusaurus-plugin/src/index.js\"\nconst path = require('path');\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    getPathsToWatch() {\n      const contentPath = path.resolve(context.siteDir, options.path);\n      return [`${contentPath}/**/*.{ts,tsx}`];\n    },\n  };\n};\n```\n\n## `async loadContent()`\n\nPlugins should use this lifecycle to fetch from data sources (filesystem, remote API, headless CMS, etc) or doing some server processing.\n\nFor example, this plugin below return a random integer between 1 to 10 as content;\n\n```js {5-6} title=\"docusaurus-plugin/src/index.js\"\nconst path = require('path');\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    async loadContent() {\n      return 1 + Math.floor(Math.random() * 10);\n    },\n  };\n};\n```\n\n## `async contentLoaded({content, actions})`\n\nPlugins should use the data loaded in `loadContent` and construct the pages/routes that consume the loaded data (optional).\n\n### `content`\n\n`contentLoaded` will be called _after_ `loadContent` is done, the return value of `loadContent()` will be passed to `contentLoaded` as `content`.\n\n### `actions`\n\n`actions` contain two functions:\n\n- `addRoute(config: RouteConfig): void`\n\nCreate a route to add to the website.\n\n```typescript\ninterface RouteConfig {\n  path: string;\n  component: string;\n  modules?: RouteModule;\n  routes?: RouteConfig[];\n  exact?: boolean;\n  priority?: number;\n}\ninterface RouteModule {\n  [module: string]: Module | RouteModule | RouteModule[];\n}\ntype Module =\n  | {\n      path: string;\n      __import?: boolean;\n      query?: ParsedUrlQueryInput;\n    }\n  | string;\n```\n\n- `createData(name: string, data: any): Promise<string>`\n\nA function to help you create static data (generally json or string), that you can provide to your routes as props.\n\nFor example, this plugin below create a `/friends` page which display `Your friends are: Yangshun, Sebastien`:\n\n```jsx title=\"website/src/components/Friends.js\"\nimport React from 'react';\n\nexport default function FriendsComponent({friends}) {\n  return <div>Your friends are {friends.join(',')}</div>;\n}\n```\n\n```js {4-23} title=\"docusaurus-friends-plugin/src/index.js\"\nexport default function friendsPlugin(context, options) {\n  return {\n    name: 'docusaurus-friends-plugin',\n    async contentLoaded({content, actions}) {\n      const {createData, addRoute} = actions;\n      // Create friends.json\n      const friends = ['Yangshun', 'Sebastien'];\n      const friendsJsonPath = await createData(\n        'friends.json',\n        JSON.stringify(friends),\n      );\n\n      // Add the '/friends' routes, and ensure it receives the friends props\n      addRoute({\n        path: '/friends',\n        component: '@site/src/components/Friends.js',\n        modules: {\n          // propName -> JSON file path\n          friends: friendsJsonPath,\n        },\n        exact: true,\n      });\n    },\n  };\n}\n```\n\n- `setGlobalData(data: any): void`\n\nThis function permits to create some global plugin data, that can be read from any page, including the pages created by other plugins, and your theme layout.\n\nThis data become accessible to your client-side/theme code, through the [`useGlobalData`](./docusaurus-core.md#useglobaldata) and [`usePluginData`](./docusaurus-core.md#useplugindatapluginname-string-pluginid-string).\n\nOne this data is created, you can access it with the global data hooks APIs.\n\n:::caution\n\nGlobal data is... global: its size affects the loading time of all pages of your site, so try to keep it small.\n\nPrefer `createData` and page-specific data whenever possible.\n\n:::\n\nFor example, this plugin below create a `/friends` page which display `Your friends are: Yangshun, Sebastien`:\n\n```jsx title=\"website/src/components/Friends.js\"\nimport React from 'react';\nimport {usePluginData} from '@docusaurus/useGlobalData';\n\nexport default function FriendsComponent() {\n  const {friends} = usePluginData('my-friends-plugin');\n  return <div>Your friends are {friends.join(',')}</div>;\n}\n```\n\n```js {4-14} title=\"docusaurus-friends-plugin/src/index.js\"\nexport default function friendsPlugin(context, options) {\n  return {\n    name: 'docusaurus-friends-plugin',\n    async contentLoaded({content, actions}) {\n      const {setGlobalData, addRoute} = actions;\n      // Create friends global data\n      setGlobalData({friends: ['Yangshun', 'Sebastien']});\n\n      // Add the '/friends' routes\n      addRoute({\n        path: '/friends',\n        component: '@site/src/components/Friends.js',\n        exact: true,\n      });\n    },\n  };\n}\n```\n\n## `configureWebpack(config, isServer, utils)`\n\nModifies the internal webpack config. If the return value is a JavaScript object, it will be merged into the final config using [`webpack-merge`](https://github.com/survivejs/webpack-merge). If it is a function, it will be called and receive `config` as the first argument and an `isServer` flag as the argument argument.\n\n### `config`\n\n`configureWebpack` is called with `config` generated according to client/server build. You may treat this as the base config to be merged with.\n\n### `isServer`\n\n`configureWebpack` will be called both in server build and in client build. The server build receives `true` and the client build receives `false` as `isServer`.\n\n### `utils`\n\nThe initial call to `configureWebpack` also receives a util object consists of three functions:\n\n- `getStyleLoaders(isServer: boolean, cssOptions: {[key: string]: any}): Loader[]`\n- `getCacheLoader(isServer: boolean, cacheOptions?: {}): Loader | null`\n- `getBabelLoader(isServer: boolean, babelOptions?: {}): Loader`\n\nYou may use them to return your webpack configures conditionally.\n\nFor example, this plugin below modify the webpack config to transpile `.foo` file.\n\n```js title=\"docusaurus-plugin/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'custom-docusaurus-plugin',\n    // highlight-start\n    configureWebpack(config, isServer, utils) {\n      const {getCacheLoader} = utils;\n      return {\n        module: {\n          rules: [\n            {\n              test: /\\.foo$/,\n              use: [getCacheLoader(isServer), 'my-custom-webpack-loader'],\n            },\n          ],\n        },\n      };\n    },\n    // highlight-end\n  };\n};\n```\n\n### Merge strategy\n\nWe merge the Webpack configuration parts of plugins into the global Webpack config using [webpack-merge](https://github.com/survivejs/webpack-merge).\n\nIt is possible to specify the merge strategy. For example, if you want a webpack rule to be prepended instead of appended:\n\n```js title=\"docusaurus-plugin/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'custom-docusaurus-plugin',\n    configureWebpack(config, isServer, utils) {\n      return {\n        // highlight-start\n        mergeStrategy: {'module.rules': 'prepend'},\n        module: {rules: [myRuleToPrepend]},\n        // highlight-end\n      };\n    },\n  };\n};\n```\n\nRead the [webpack-merge strategy doc](https://github.com/survivejs/webpack-merge#merging-with-strategies) for more details.\n\n## `postBuild(props)`\n\nCalled when a (production) build finishes.\n\n```ts\ntype Props = {\n  siteDir: string;\n  generatedFilesDir: string;\n  siteConfig: DocusaurusConfig;\n  outDir: string;\n  baseUrl: string;\n  headTags: string;\n  preBodyTags: string;\n  postBodyTags: string;\n  routesPaths: string[];\n  plugins: Plugin<any>[];\n};\n```\n\nExample:\n\n```js {4-9} title=\"docusaurus-plugin/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    async postBuild({siteConfig = {}, routesPaths = [], outDir}) {\n      // Print out to console all the rendered routes.\n      routesPaths.map((route) => {\n        console.log(route);\n      });\n    },\n  };\n};\n```\n\n## `extendCli(cli)`\n\nRegister an extra command to enhance the CLI of docusaurus. `cli` is [commander](https://www.npmjs.com/package/commander) object.\n\nExample:\n\n```js {4-11} title=\"docusaurus-plugin/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    extendCli(cli) {\n      cli\n        .command('roll')\n        .description('Roll a random number between 1 and 1000')\n        .action(() => {\n          console.log(Math.floor(Math.random() * 1000 + 1));\n        });\n    },\n  };\n};\n```\n\n## `injectHtmlTags()`\n\nInject head and/or body HTML tags to Docusaurus generated HTML.\n\n```typescript\nfunction injectHtmlTags(): {\n  headTags?: HtmlTags;\n  preBodyTags?: HtmlTags;\n  postBodyTags?: HtmlTags;\n};\n\ntype HtmlTags = string | HtmlTagObject | (string | HtmlTagObject)[];\n\ninterface HtmlTagObject {\n  /**\n   * Attributes of the HTML tag\n   * E.g. `{'disabled': true, 'value': 'demo', 'rel': 'preconnect'}`\n   */\n  attributes?: {\n    [attributeName: string]: string | boolean;\n  };\n  /**\n   * The tag name e.g. `div`, `script`, `link`, `meta`\n   */\n  tagName: string;\n  /**\n   * The inner HTML\n   */\n  innerHTML?: string;\n}\n```\n\nExample:\n\n```js title=\"docusaurus-plugin/src/index.js\"\nmodule.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // highlight-start\n    injectHtmlTags() {\n      return {\n        headTags: [\n          {\n            tagName: 'link',\n            attributes: {\n              rel: 'preconnect',\n              href: 'https://www.github.com',\n            },\n          },\n        ],\n        preBodyTags: [\n          {\n            tagName: 'script',\n            attributes: {\n              charset: 'utf-8',\n              src: '/noflash.js',\n            },\n          },\n        ],\n        postBodyTags: [`<div> This is post body </div>`],\n      };\n    },\n    // highlight-end\n  };\n};\n```\n\n## `getThemePath()`\n\nReturns the path to the directory where the theme components can be found. When your users calls `swizzle`, `getThemePath` is called and its returned path is used to find your theme components.\n\nIf you use the folder directory above, your `getThemePath` can be:\n\n```js {6-8} title=\"my-theme/src/index.js\"\nconst path = require('path');\n\nmodule.exports = function (context, options) {\n  return {\n    name: 'name-of-my-theme',\n    getThemePath() {\n      return path.resolve(__dirname, './theme');\n    },\n  };\n};\n```\n\n## `getTypeScriptThemePath()`\n\nSimilar to `getThemePath()`, it should return the path to the directory where the source code of TypeScript theme components can be found. Theme components under this path will **not** be resolved by Webpack. Therefore, it is not a replacement of `getThemePath()`. Instead, this path is purely for swizzling TypeScript theme components.\n\nIf you want to support TypeScript component swizzling for your theme, you can make the path returned by `getTypeScriptThemePath()` be your source directory, and make path returned by `getThemePath()` be the compiled JavaScript output.\n\nExample:\n\n```js {6-13} title=\"my-theme/src/index.js\"\nconst path = require('path');\n\nmodule.exports = function (context, options) {\n  return {\n    name: 'name-of-my-theme',\n    getThemePath() {\n      // Where compiled JavaScript output lives\n      return path.join(__dirname, '..', 'lib', 'theme');\n    },\n    getTypeScriptThemePath() {\n      // Where TypeScript source code lives\n      return path.resolve(__dirname, './theme');\n    },\n  };\n};\n```\n\n## `getSwizzleComponentList()`\n\nReturn a list of stable component that are considered as safe for swizzling. These components will be listed in swizzle component without `--danger`. All the components are considers unstable by default. If an empty array is returned then all components are considered unstable, if `undefined` is returned then all component are considered stable.\n\n```js {0-12} title=\"my-theme/src/index.js\"\nconst swizzleAllowedComponents = [\n  'CodeBlock',\n  'DocSidebar',\n  'Footer',\n  'NotFound',\n  'SearchBar',\n  'hooks/useTheme',\n  'prism-include-languages',\n];\n\nmodule.exports.getSwizzleComponentList = () => swizzleAllowedComponents;\n```\n\n## `getClientModules()`\n\nReturns an array of paths to the modules that are to be imported in the client bundle. These modules are imported globally before React even renders the initial UI.\n\nAs an example, to make your theme load a `customCss` or `customJs` file path from `options` passed in by the user:\n\n```js {7-9} title=\"my-theme/src/index.js\"\nconst path = require('path');\n\nmodule.exports = function (context, options) {\n  const {customCss, customJs} = options || {};\n  return {\n    name: 'name-of-my-theme',\n    getClientModules() {\n      return [customCss, customJs];\n    },\n  };\n};\n```\n\n<!--\nFor example, the in docusaurus-plugin-content-docs:\n\n    In loadContent, it loads the doc Markdown files based on the specified directory in options (defaulting to docs).\n    In contentLoaded, for each doc Markdown file, a route is created: /doc/installation, /doc/getting-started, etc.\n -->\n\n## Example\n\nHere's a mind model for a presumptuous plugin implementation.\n\n```jsx\nconst DEFAULT_OPTIONS = {\n  // Some defaults.\n};\n\n// A JavaScript function that returns an object.\n// `context` is provided by Docusaurus. Example: siteConfig can be accessed from context.\n// `opts` is the user-defined options.\nmodule.exports = function (context, opts) {\n  // Merge defaults with user-defined options.\n  const options = {...DEFAULT_OPTIONS, ...options};\n\n  return {\n    // A compulsory field used as the namespace for directories to cache\n    // the intermediate data for each plugin.\n    // If you're writing your own local plugin, you will want it to\n    // be unique in order not to potentially conflict with imported plugins.\n    // A good way will be to add your own project name within.\n    name: 'docusaurus-my-project-cool-plugin',\n\n    async loadContent() {\n      // The loadContent hook is executed after siteConfig and env has been loaded.\n      // You can return a JavaScript object that will be passed to contentLoaded hook.\n    },\n\n    async contentLoaded({content, actions}) {\n      // The contentLoaded hook is done after loadContent hook is done.\n      // `actions` are set of functional API provided by Docusaurus (e.g. addRoute)\n    },\n\n    async postBuild(props) {\n      // After docusaurus <build> finish.\n    },\n\n    // TODO\n    async postStart(props) {\n      // docusaurus <start> finish\n    },\n\n    // TODO\n    afterDevServer(app, server) {\n      // https://webpack.js.org/configuration/dev-server/#devserverbefore\n    },\n\n    // TODO\n    beforeDevServer(app, server) {\n      // https://webpack.js.org/configuration/dev-server/#devserverafter\n    },\n\n    configureWebpack(config, isServer) {\n      // Modify internal webpack config. If returned value is an Object, it\n      // will be merged into the final config using webpack-merge;\n      // If the returned value is a function, it will receive the config as the 1st argument and an isServer flag as the 2nd argument.\n    },\n\n    getPathsToWatch() {\n      // Paths to watch.\n    },\n\n    getThemePath() {\n      // Returns the path to the directory where the theme components can\n      // be found.\n    },\n\n    getClientModules() {\n      // Return an array of paths to the modules that are to be imported\n      // in the client bundle. These modules are imported globally before\n      // React even renders the initial UI.\n    },\n\n    extendCli(cli) {\n      // Register an extra command to enhance the CLI of Docusaurus\n    },\n\n    injectHtmlTags() {\n      // Inject head and/or body HTML tags.\n    },\n  };\n};\n```\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.34965951153152885,
      "title": "markdown-features",
      "fileContents": "---\nid: markdown-features\ntitle: Markdown Features\ndescription: Docusaurus uses GitHub Flavored Markdown (GFM). Find out more about Docusaurus-specific features when writing Markdown.\n---\n\nDocumentation is one of your product's interfaces with your users. A well-written and well-organized set of docs helps your users understand your product quickly. Our aligned goal here is to help your users find and understand the information they need, as quickly as possible.\n\nDocusaurus 2 uses modern tooling to help you compose your interactive documentations with ease. You may embed React components, or build live coding blocks where your users may play with the code on the spot. Start sharing your eureka moments with the code your audience cannot walk away from. It is perhaps the most effective way of attracting potential users.\n\nIn this section, we'd like to introduce you to the tools we've picked that we believe will help you build powerful documentation. Let us walk you through with an example.\n\n:::important\n\nAll the following content assumes you are using `@docusaurus/preset-classic` or `@docusaurus/plugin-content-docs`.\n\n:::\n\n---\n\nMarkdown is a syntax that enables you to write formatted content in a readable syntax. The [standard Markdown syntax](https://daringfireball.net/projects/markdown/syntax) is supported and we use [MDX](https://mdxjs.com/) as the parsing engine, which can do much more than just parsing Markdown. More on that later.\n\nCreate a markdown file, `greeting.md`, and place it under the `docs` directory.\n\n```bash\nwebsite # root directory of your site\n├── docs\n│   └── greeting.md\n├── src\n│   └── pages\n├── docusaurus.config.js\n├── ...\n```\n\n<!-- TODO: talk about where to put the docs, resolving docs outside of website directory, etc. -->\n\nAt the top of the file, specify `id` and `title` in the front matter, so that Docusaurus will pick them up correctly when generating your site.\n\n```yml\n---\nid: greeting\ntitle: Hello\n---\n\n## Hello from Docusaurus\n\nAre you ready to create the documentation site for your open source project?\n\n### Headers\n\nwill show up on the table of contents on the upper right\n\nSo that your users will know what this page is all about without scrolling down or even without reading too much.\n\n### Only h2 and h3 will be in the toc\n\nThe headers are well-spaced so that the hierarchy is clear.\n\n- lists will help you\n- present the key points\n- that you want your users to remember\n  - and you may nest them\n    - multiple times\n```\n\nThis will render in the browser as follows:\n\nimport BrowserWindow from '@site/src/components/BrowserWindow';\n\n<BrowserWindow url=\"http://localhost:3000\">\n\n<h2>Hello from Docusaurus</h2>\n\nAre you ready to create the documentation site for your open source project?\n\n<h3>Headers</h3>\n\nwill show up on the table of contents on the upper right\n\nSo that your users will know what this page is all about without scrolling down or even without reading too much.\n\n<h3>Only h2 and h3 will be in the toc</h3>\n\nThe headers are well-spaced so that the hierarchy is clear.\n\n- lists will help you\n- present the key points\n- that you want your users to remember\n  - and you may nest them\n    - multiple times\n\n</BrowserWindow>\n\n## Markdown headers\n\nDocuments use the following markdown header fields that are enclosed by a line `---` on either side:\n\n- `id`: A unique document id. If this field is not present, the document's `id` will default to its file name (without the extension).\n- `title`: The title of your document. If this field is not present, the document's `title` will default to its `id`.\n- `hide_title`: Whether to hide the title at the top of the doc. By default it is `false`.\n- `hide_table_of_contents`: Whether to hide the table of contents to the right. By default it is `false`.\n- `sidebar_label`: The text shown in the document sidebar and in the next/previous button for this document. If this field is not present, the document's `sidebar_label` will default to its `title`.\n- `custom_edit_url`: The URL for editing this document. If this field is not present, the document's edit URL will fall back to `editUrl` from options fields passed to `docusaurus-plugin-content-docs`.\n- `keywords`: Keywords meta tag for the document page, for search engines.\n- `description`: The description of your document, which will become the `<meta name=\"description\" content=\"...\"/>` and `<meta property=\"og:description\" content=\"...\"/>` in `<head>`, used by search engines. If this field is not present, it will default to the first line of the contents.\n- `image`: Cover or thumbnail image that will be used when displaying the link to your post.\n\nExample:\n\n```yml\n---\nid: doc-markdown\ntitle: Markdown Features\nhide_title: false\nhide_table_of_contents: false\nsidebar_label: Markdown :)\ncustom_edit_url: https://github.com/facebook/docusaurus/edit/master/docs/api-doc-markdown.md\ndescription: How do I find you when I cannot solve this problem\nkeywords:\n  - docs\n  - docusaurus\nimage: https://i.imgur.com/mErPwqL.png\n---\n\n```\n\n## Referencing other documents\n\nIf you want to reference another document file, you could use the name of the document you want to reference. Docusaurus will convert the file path to be the final website path (and remove the `.md`).\n\nFor example, if you are in `doc2.md` and you want to reference `doc1.md` and `folder/doc3.md`:\n\n```md\nI am referencing a [document](doc1.md). Reference to another [document in a folder](folder/doc3.md).\n\n[Relative document](../doc2.md) referencing works as well.\n```\n\nOne benefit of this approach is that the links to external files will still work if you are viewing the file on GitHub.\n\n## Embedding React components with MDX\n\nDocusaurus has built-in support for [MDX](https://mdxjs.com/), which allows you to write JSX within your Markdown files and render them as React components.\n\n**Note 1:** While both `.md` and `.mdx` files are parsed using MDX, some of the syntax are treated slightly differently. For the most accurate parsing and better editor support, we recommend using the `.mdx` extension for files containing MDX syntax. Let's rename the previous file to `greeting.mdx`.\n\n**Note 2:** Since all doc files are parsed using MDX, any HTML is treated as JSX. Therefore, if you need to inline-style a component, follow JSX flavor and provide style objects. This behavior is different from Docusaurus 1. See also [Migrating from v1 to v2](guides/migrating-from-v1-to-v2.md#convert-style-attributes-to-style-objects-in-mdx).\n\nTry this block here:\n\n```jsx\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: '#fff',\n      padding: '0.2rem',\n    }}>\n    {children}\n  </span>\n);\n\n<Highlight color=\"#25c2a0\">Docusaurus green</Highlight> and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors.\n\nI can write **Markdown** alongside my _JSX_!\n```\n\nNotice how it renders both the markup from your React component and the Markdown syntax:\n\nexport const Highlight = ({children, color}) => (\n  <span\n    style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: '#fff',\n      padding: '0.2rem',\n    }}>\n    {children}\n  </span>\n);\n\n<BrowserWindow minHeight={240} url=\"http://localhost:3000\">\n\n<Highlight color=\"#25c2a0\">Docusaurus green</Highlight>\n{` `}and <Highlight color=\"#1877F2\">Facebook blue</Highlight> are my favorite colors.\n\nI can write **Markdown** alongside my _JSX_!\n\n</BrowserWindow>\n\n<br />\n\nYou can also import your own components defined in other files or third-party components installed via npm! Check out the [MDX docs](https://mdxjs.com/) to see what other fancy stuff you can do with MDX.\n\n### Configuring plugins\n\nYou can expand the MDX functionalities, using plugins. An MDX plugin is usually a npm package, so you install them like other npm packages using npm. Docusaurus supports both [Remark](https://github.com/remarkjs/remark) and [Rehype](https://github.com/rehypejs/rehype) plugins that work with MDX.\n\nFirst, install your [Remark](https://github.com/remarkjs/remark/blob/main/doc/plugins.md#list-of-plugins) and [Rehype](https://github.com/rehypejs/rehype/blob/main/doc/plugins.md#list-of-plugins) plugins.\n\nFor example:\n\n```bash npm2yarn\nnpm install --save remark-images\nnpm install --save rehype-truncate\n```\n\nNext, import the plugins:\n\n```js\nconst remarkImages = require('remark-images');\nconst rehypeTruncate = require('rehype-truncate');\n```\n\nFinally, add them to the `@docusaurus/preset-classic` options in `docusaurus.config.js`:\n\n```js {10,11} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          sidebarPath: require.resolve('./sidebars.js'),\n          // ...\n          remarkPlugins: [remarkImages],\n          rehypePlugins: [rehypeTruncate],\n        },\n      },\n    ],\n  ],\n};\n```\n\n### Configuring plugin options\n\nSome plugins can be configured and accept their own options. In that case, use the `[plugin, pluginOptions]` syntax, like so:\n\n```jsx {10-13} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          sidebarPath: require.resolve('./sidebars.js'),\n          // ...\n          remarkPlugins: [\n            plugin1,\n            [plugin2, {option1: {...}}],\n          ],\n        },\n      },\n    ],\n  ],\n};\n```\n\nSee more information in the [MDX documentation](https://mdxjs.com/advanced/plugins).\n\n## Tabs\n\nTo show tabbed content within Markdown files, you can fall back on MDX. Docusaurus provides `<Tabs>` components out-of-the-box.\n\n```jsx\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs\n  defaultValue=\"apple\"\n  values={[\n    {label: 'Apple', value: 'apple'},\n    {label: 'Orange', value: 'orange'},\n    {label: 'Banana', value: 'banana'},\n  ]}>\n  <TabItem value=\"apple\">This is an apple 🍎</TabItem>\n  <TabItem value=\"orange\">This is an orange 🍊</TabItem>\n  <TabItem value=\"banana\">This is a banana 🍌</TabItem>\n</Tabs>;\n```\n\nAnd you will get the following:\n\n<Tabs\n  defaultValue=\"apple\"\n  values={[\n    {label: 'Apple', value: 'apple'},\n    {label: 'Orange', value: 'orange'},\n    {label: 'Banana', value: 'banana'},\n  ]}>\n  <TabItem value=\"apple\">This is an apple 🍎</TabItem>\n  <TabItem value=\"orange\">This is an orange 🍊</TabItem>\n  <TabItem value=\"banana\">This is a banana 🍌</TabItem>\n</Tabs>\n\n:::info\n\nBy default, tabs are rendered eagerly, but it is possible to load them lazily by passing the `lazy` prop to the `Tabs` component.\n\n:::\n\n### Syncing tab choices\n\nYou may want choices of the same kind of tabs to sync with each other. For example, you might want to provide different instructions for users on Windows vs users on macOS, and you want to changing all OS-specific instructions tabs in one click. To achieve that, you can give all related tabs the same `groupId` prop. Note that doing this will persist the choice in `localStorage` and all `<Tab>` instances with the same `groupId` will update automatically when the value of one of them is changed. Note that `groupID` are globally-namespaced.\n\n```jsx {2,14}\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n  ]\n}>\n<TabItem value=\"win\">Use Ctrl + C to copy.</TabItem>\n<TabItem value=\"mac\">Use Command + C to copy.</TabItem>\n</Tabs>\n\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n  ]\n}>\n<TabItem value=\"win\">Use Ctrl + V to paste.</TabItem>\n<TabItem value=\"mac\">Use Command + V to paste.</TabItem>\n</Tabs>\n```\n\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n  ]}>\n  <TabItem value=\"win\">Use Ctrl + C to copy.</TabItem>\n  <TabItem value=\"mac\">Use Command + C to copy.</TabItem>\n</Tabs>\n\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n  ]}>\n  <TabItem value=\"win\">Use Ctrl + V to paste.</TabItem>\n  <TabItem value=\"mac\">Use Command + V to paste.</TabItem>\n</Tabs>\n\nFor all tab groups that have the same `groupId`, the possible values do not need to be the same. If one tab group with chooses an value that does not exist in another tab group with the same `groupId`, the tab group with the missing value won't change its tab. You can see that from the following example. Try to select Linux, and the above tab groups doesn't change.\n\n```jsx\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n    {label: 'Linux', value: 'linux'},\n  ]}>\n  <TabItem value=\"win\">I am Windows.</TabItem>\n  <TabItem value=\"mac\">I am macOS.</TabItem>\n  <TabItem value=\"linux\">I am Linux.</TabItem>\n</Tabs>\n```\n\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n    {label: 'Linux', value: 'linux'},\n  ]}>\n  <TabItem value=\"win\">I am Windows.</TabItem>\n  <TabItem value=\"mac\">I am macOS.</TabItem>\n  <TabItem value=\"linux\">I am Linux.</TabItem>\n</Tabs>\n\n---\n\nTab choices with different `groupId`s will not interfere with each other:\n\n```jsx {2,14}\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n  ]\n}>\n<TabItem value=\"win\">Windows in windows.</TabItem>\n<TabItem value=\"mac\">macOS is macOS.</TabItem>\n</Tabs>\n\n<Tabs\n  groupId=\"non-mac-operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'Unix', value: 'unix'},\n  ]\n}>\n<TabItem value=\"win\">Windows is windows.</TabItem>\n<TabItem value=\"unix\">Unix is unix.</TabItem>\n</Tabs>\n```\n\n<Tabs\n  groupId=\"operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'macOS', value: 'mac'},\n  ]}>\n  <TabItem value=\"win\">Windows in windows.</TabItem>\n  <TabItem value=\"mac\">macOS is macOS.</TabItem>\n</Tabs>\n\n<Tabs\n  groupId=\"non-mac-operating-systems\"\n  defaultValue=\"win\"\n  values={[\n    {label: 'Windows', value: 'win'},\n    {label: 'Unix', value: 'unix'},\n  ]}>\n  <TabItem value=\"win\">Windows is windows.</TabItem>\n  <TabItem value=\"unix\">Unix is unix.</TabItem>\n</Tabs>\n\n### Customizing tabs\n\nYou might want to customize the appearance of certain set of tabs. To do that you can pass the string in `className` prop and the specified CSS class will be added to the `Tabs` component:\n\n```jsx {5}\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs\n  className=\"unique-tabs\"\n  defaultValue=\"apple\"\n  values={[\n    {label: 'Apple', value: 'apple'},\n    {label: 'Orange', value: 'orange'},\n    {label: 'Banana', value: 'banana'},\n  ]}>\n  <TabItem value=\"apple\">This is an apple 🍎</TabItem>\n  <TabItem value=\"orange\">This is an orange 🍊</TabItem>\n  <TabItem value=\"banana\">This is a banana 🍌</TabItem>\n</Tabs>;\n```\n\n<Tabs\n  className=\"unique-tabs\"\n  defaultValue=\"apple\"\n  values={[\n    {label: 'Apple', value: 'apple'},\n    {label: 'Orange', value: 'orange'},\n    {label: 'Banana', value: 'banana'},\n  ]}>\n  <TabItem value=\"apple\">This is an apple 🍎</TabItem>\n  <TabItem value=\"orange\">This is an orange 🍊</TabItem>\n  <TabItem value=\"banana\">This is a banana 🍌</TabItem>\n</Tabs>\n\n## Callouts/admonitions\n\nIn addition to the basic Markdown syntax, we use [remark-admonitions](https://github.com/elviswolcott/remark-admonitions) alongside MDX to add support for admonitions. Admonitions are wrapped by a set of 3 colons.\n\nExample:\n\n    :::note\n    The content and title *can* include markdown.\n    :::\n\n    :::tip You can specify an optional title\n    Heads up! Here's a pro-tip.\n    :::\n\n    :::info\n    Useful information.\n    :::\n\n    :::caution\n    Warning! You better pay attention!\n    :::\n\n    :::danger\n    Danger danger, mayday!\n    :::\n\n:::note\n\nThe content and title _can_ include markdown.\n\n:::\n\n:::tip You can specify an optional title\n\nHeads up! Here's a pro-tip.\n\n:::\n\n:::info\n\nUseful information.\n\n:::\n\n:::caution\n\nWarning! You better pay attention!\n\n:::\n\n:::danger\n\nDanger danger, mayday!\n\n:::\n\n### Specifying title\n\nYou may also specify an optional title\n\n    :::note Your Title\n    The content and title *can* include markdown.\n    :::\n\n:::note Your Title\n\nThe content and title _can_ include Markdown.\n\n:::\n\n## Code blocks\n\nCode blocks within documentation are super-powered 💪.\n\n### Code title\n\nYou can add a title to the code block by adding `title` key after the language (leave a space between them).\n\n    ```jsx title=\"/src/components/HelloCodeTitle.js\"\n    function HelloCodeTitle(props) {\n      return <h1>Hello, {props.name}</h1>;\n    }\n    ```\n\n```jsx title=\"/src/components/HelloCodeTitle.js\"\nfunction HelloCodeTitle(props) {\n  return <h1>Hello, {props.name}</h1>;\n}\n```\n\n### Syntax highlighting\n\nCode blocks are text blocks wrapped around by strings of 3 backticks. You may check out [this reference](https://github.com/mdx-js/specification) for specifications of MDX.\n\n    ```jsx\n    console.log('Every repo must come with a mascot.');\n    ```\n\n<!-- TODO: We need to allow users to pick syntax highlighting themes (maybe other than swizzling) -->\n\nUse the matching language meta string for your code block, and Docusaurus will pick up syntax highlighting automatically, powered by [Prism React Renderer](https://github.com/FormidableLabs/prism-react-renderer).\n\n```jsx\nconsole.log('Every repo must come with a mascot.');\n```\n\nBy default, the Prism [syntax highlighting theme](https://github.com/FormidableLabs/prism-react-renderer#theming) we use is [Palenight](https://github.com/FormidableLabs/prism-react-renderer/blob/master/src/themes/palenight.js). You can change this to another theme by passing `theme` field in `prism` as `themeConfig` in your docusaurus.config.js.\n\nFor example, if you prefer to use the `dracula` highlighting theme:\n\n```js {4} title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    prism: {\n      theme: require('prism-react-renderer/themes/dracula'),\n    },\n  },\n};\n```\n\nBy default, Docusaurus comes with this subset of [commonly used languages](https://github.com/FormidableLabs/prism-react-renderer/blob/master/src/vendor/prism/includeLangs.js).\n\nTo add syntax highlighting for any of the other [Prism supported languages](https://prismjs.com/#supported-languages), define it in an array of additional languages.\n\nFor example, if you want to add highlighting for the `powershell` language:\n\n```js {5} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    prism: {\n      additionalLanguages: ['powershell'],\n    },\n    // ...\n  },\n};\n```\n\nIf you want to add highlighting for languages not yet supported by Prism, you can swizzle `prism-include-languages`:\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-classic prism-include-languages\n```\n\nIt will produce `prism-include-languages.js` in your `src/theme` folder. You can add highlighting support for custom languages by editing `prism-include-languages.js`:\n\n```js {8} title=\"src/theme/prism-include-languages.js\"\nconst prismIncludeLanguages = (Prism) => {\n  // ...\n\n  additionalLanguages.forEach((lang) => {\n    require(`prismjs/components/prism-${lang}`); // eslint-disable-line\n  });\n\n  require('/path/to/your/prism-language-definition');\n\n  // ...\n};\n```\n\nYou can refer to [Prism's official language definitions](https://github.com/PrismJS/prism/tree/master/components) when you are writing your own language definitions.\n\n### Line highlighting\n\nYou can bring emphasis to certain lines of code by specifying line ranges after the language meta string (leave a space after the language).\n\n    ```jsx {3}\n    function HighlightSomeText(highlight) {\n      if (highlight) {\n        return 'This text is highlighted!';\n      }\n\n      return 'Nothing highlighted';\n    }\n    ```\n\n```jsx {3}\nfunction HighlightSomeText(highlight) {\n  if (highlight) {\n    return 'This text is highlighted!';\n  }\n\n  return 'Nothing highlighted';\n}\n```\n\nTo accomplish this, Docusaurus adds the `docusaurus-highlight-code-line` class to the highlighted lines. You will need to define your own styling for this CSS, possibly in your `src/css/custom.css` with a custom background color which is dependent on your selected syntax highlighting theme. The color given below works for the default highlighting theme (Palenight), so if you are using another theme, you will have to tweak the color accordingly.\n\n```css title=\"/src/css/custom.css\"\n.docusaurus-highlight-code-line {\n  background-color: rgb(72, 77, 91);\n  display: block;\n  margin: 0 calc(-1 * var(--ifm-pre-padding));\n  padding: 0 var(--ifm-pre-padding);\n}\n\n/* If you have a different syntax highlighting theme for dark mode. */\nhtml[data-theme='dark'] .docusaurus-highlight-code-line {\n  background-color: ; /* Color which works with dark mode syntax highlighting theme */\n}\n```\n\nTo highlight multiple lines, separate the line numbers by commas or use the range syntax to select a chunk of lines. This feature uses the `parse-number-range` library and you can find [more syntax](https://www.npmjs.com/package/parse-numeric-range) on their project details.\n\n    ```jsx {1,4-6,11}\n    import React from 'react';\n\n    function MyComponent(props) {\n      if (props.isBar) {\n        return <div>Bar</div>;\n      }\n\n      return <div>Foo</div>;\n    }\n\n    export default MyComponent;\n    ```\n\n```jsx {1,4-6,11}\nimport React from 'react';\n\nfunction MyComponent(props) {\n  if (props.isBar) {\n    return <div>Bar</div>;\n  }\n\n  return <div>Foo</div>;\n}\n\nexport default MyComponent;\n```\n\nYou can also use comments with `highlight-next-line`, `highlight-start`, and `highlight-end` to select which lines are highlighted.\n\n    ```jsx\n    function HighlightSomeText(highlight) {\n      if (highlight) {\n        // highlight-next-line\n        return 'This text is highlighted!';\n      }\n\n      return 'Nothing highlighted';\n    }\n\n    function HighlightMoreText(highlight) {\n      // highlight-start\n      if (highlight) {\n        return 'This range is highlighted!';\n      }\n      // highlight-end\n\n      return 'Nothing highlighted';\n    }\n    ```\n\n```jsx\nfunction HighlightSomeText(highlight) {\n  if (highlight) {\n    // highlight-next-line\n    return 'This text is highlighted!';\n  }\n\n  return 'Nothing highlighted';\n}\n\nfunction HighlightMoreText(highlight) {\n  // highlight-start\n  if (highlight) {\n    return 'This range is highlighted!';\n  }\n  // highlight-end\n\n  return 'Nothing highlighted';\n}\n```\n\nSupported commenting syntax:\n\n| Language   | Syntax                   |\n| ---------- | ------------------------ |\n| JavaScript | `/* ... */` and `// ...` |\n| JSX        | `{/* ... */}`            |\n| Python     | `# ...`                  |\n| HTML       | `<!-- ... -->`           |\n\nIf there's a syntax that is not currently supported, we are open to adding them! Pull requests welcome.\n\n### Interactive code editor\n\n(Powered by [React Live](https://github.com/FormidableLabs/react-live))\n\nYou can create an interactive coding editor with the `@docusaurus/theme-live-codeblock` plugin.\n\nFirst, add the plugin to your package.\n\n```bash npm2yarn\nnpm install --save @docusaurus/theme-live-codeblock\n```\n\nYou will also need to add the plugin to your `docusaurus.config.js`.\n\n```js {3}\nmodule.exports = {\n  // ...\n  themes: ['@docusaurus/theme-live-codeblock'],\n  // ...\n};\n```\n\nTo use the plugin, create a code block with `live` attached to the language meta string.\n\n    ```jsx live\n    function Clock(props) {\n      const [date, setDate] = useState(new Date());\n      useEffect(() => {\n        var timerID = setInterval(() => tick(), 1000);\n\n        return function cleanup() {\n          clearInterval(timerID);\n        };\n      });\n\n      function tick() {\n        setDate(new Date());\n      }\n\n      return (\n        <div>\n          <h2>It is {date.toLocaleTimeString()}.</h2>\n        </div>\n      );\n    }\n    ```\n\nThe code block will be rendered as an interactive editor. Changes to the code will reflect on the result panel live.\n\n```jsx live\nfunction Clock(props) {\n  const [date, setDate] = useState(new Date());\n  useEffect(() => {\n    var timerID = setInterval(() => tick(), 1000);\n\n    return function cleanup() {\n      clearInterval(timerID);\n    };\n  });\n\n  function tick() {\n    setDate(new Date());\n  }\n\n  return (\n    <div>\n      <h2>It is {date.toLocaleTimeString()}.</h2>\n    </div>\n  );\n}\n```\n\n:::caution react-live and imports\n\nIt is not possible to import components directly from the react-live code editor, you have to define available imports upfront.\n\n:::\n\nBy default, all React imports are available. If you need more imports available, swizzle the react-live scope:\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-live-codeblock ReactLiveScope\n```\n\n```jsx {3-15,21} title=\"src/theme/ReactLiveScope/index.js\"\nimport React from 'react';\n\nconst ButtonExample = (props) => (\n  <button\n    {...props}\n    style={{\n      backgroundColor: 'white',\n      border: 'solid red',\n      borderRadius: 20,\n      padding: 10,\n      cursor: 'pointer',\n      ...props.style,\n    }}\n  />\n);\n\n// Add react-live imports you need here\nconst ReactLiveScope = {\n  React,\n  ...React,\n  ButtonExample,\n};\n\nexport default ReactLiveScope;\n```\n\nThe `ButtonExample` component is now available to use:\n\n```jsx live\nfunction MyPlayground(props) {\n  return (\n    <div>\n      <ButtonExample onClick={() => alert('hey!')}>Click me</ButtonExample>\n    </div>\n  );\n}\n```\n\n### Multi-language support code blocks\n\nWith MDX, you can easily create interactive components within your documentation, for example, to display code in multiple programming languages and switching between them using a tabs component.\n\nInstead of implementing a dedicated component for multi-language support code blocks, we've implemented a generic Tabs component in the classic theme so that you can use it for other non-code scenarios as well.\n\nThe following example is how you can have multi-language code tabs in your docs. Note that the empty lines above and below each language block is **intentional**. This is a current limitation of MDX, you have to leave empty lines around Markdown syntax for the MDX parser to know that it's Markdown syntax and not JSX.\n\n````jsx\nimport Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\n\n<Tabs\n  defaultValue=\"js\"\n  values={[\n    { label: 'JavaScript', value: 'js', },\n    { label: 'Python', value: 'py', },\n    { label: 'Java', value: 'java', },\n  ]\n}>\n<TabItem value=\"js\">\n\n```js\nfunction helloWorld() {\n  console.log('Hello, world!');\n}\n```\n\n</TabItem>\n<TabItem value=\"py\">\n\n```py\ndef hello_world():\n  print 'Hello, world!'\n```\n\n</TabItem>\n<TabItem value=\"java\">\n\n```java\nclass HelloWorld {\n  public static void main(String args[]) {\n    System.out.println(\"Hello, World\");\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n````\n\nAnd you will get the following:\n\n<Tabs\n  defaultValue=\"js\"\n  values={[\n    { label: 'JavaScript', value: 'js', },\n    { label: 'Python', value: 'py', },\n    { label: 'Java', value: 'java', },\n  ]\n}>\n<TabItem value=\"js\">\n\n```js\nfunction helloWorld() {\n  console.log('Hello, world!');\n}\n```\n\n</TabItem>\n<TabItem value=\"py\">\n\n```py\ndef hello_world():\n  print 'Hello, world!'\n```\n\n</TabItem>\n<TabItem value=\"java\">\n\n```java\nclass HelloWorld {\n  public static void main(String args[]) {\n    System.out.println(\"Hello, World\");\n  }\n}\n```\n\n</TabItem>\n</Tabs>\n\nYou may want to implement your own `<MultiLanguageCode />` abstraction if you find the above approach too verbose. We might just implement one in future for convenience.\n\nIf you have multiple of these multi-language code tabs, and you want to sync the selection across the tab instances, refer to the [Syncing tab choices section](#syncing-tab-choices).\n\n## Assets\n\nSometimes you want to link to static assets directly from Markdown files, and it is convenient to co-locate the asset next to the markdown file using it.\n\nWe have setup Webpack loaders to handle most common file types, so that when you import a file, you get its url, and the asset is automatically copied to the output folder.\n\nLet's imagine the following file structure:\n\n```\n# Your doc\n/website/docs/myFeature.mdx\n\n# Some assets you want to use\n/website/docs/assets/docusaurus-asset-example-banner.png\n/website/docs/assets/docusaurus-asset-example-pdf.pdf\n```\n\n### Images\n\nYou can use images in Markdown, or by requiring them and using a JSX image tag:\n\n```mdx\n# My Markdown page\n\n<img\n  src={require('./assets/docusaurus-asset-example-banner.png').default}\n  alt=\"Example banner\"\n/>\n\nor\n\n![Example banner](./assets/docusaurus-asset-example-banner.png)\n```\n\nThe ES imports syntax also works:\n\n```mdx\n# My Markdown page\n\nimport myImageUrl from './assets/docusaurus-asset-example-banner.png';\n\n<img src={myImageUrl)} alt=\"My image alternative text\" />\n```\n\nThis results in displaying the image:\n\n![My image alternative text](./assets/docusaurus-asset-example-banner.png)\n\n:::note\n\nIf you are using [@docusaurus/plugin-ideal-image](./using-plugins.md#docusaurusplugin-ideal-image), you need to use the dedicated image component, as documented.\n\n:::\n\n### Files\n\nIn the same way, you can link to existing assets by requiring them and using the returned url in videos, links etc.\n\n```mdx\n# My Markdown page\n\n<a\n  target=\"_blank\"\n  href={require('./assets/docusaurus-asset-example-pdf.pdf').default}>\n  Download this PDF\n</a>\n\nor\n\n[Download this PDF using Markdown](./assets/docusaurus-asset-example-pdf.pdf)\n```\n\n<a\n  target=\"_blank\"\n  href={require('./assets/docusaurus-asset-example-pdf.pdf').default}>\n  Download this PDF\n</a>\n\n[Download this PDF using Markdown](./assets/docusaurus-asset-example-pdf.pdf)\n\n### Inline SVGs\n\nDocusaurus supports inlining SVGs out of the box.\n\n```jsx\nimport DocusaurusSvg from './docusaurus.svg';\n\n<DocusaurusSvg />;\n```\n\nimport DocusaurusSvg from '@site/static/img/docusaurus.svg';\n\n<DocusaurusSvg />\n\nThis can be useful, if you want to alter the part of the SVG image via CSS. For example, you can change one of the SVG colors based on the current theme.\n\n```jsx\nimport DocusaurusSvg from './docusaurus.svg';\n\n<DocusaurusSvg className=\"themedDocusaurus\" />;\n```\n\n```css\nhtml[data-theme='light'] .themedDocusaurus [fill='#FFFF50'] {\n  fill: greenyellow;\n}\n\nhtml[data-theme='dark'] .themedDocusaurus [fill='#FFFF50'] {\n  fill: seagreen;\n}\n```\n\n<DocusaurusSvg className=\"themedDocusaurus\" />\n\n### Themed Images\n\nDocusaurus supports themed images: the `ThemedImage` component (included in the classic/bootstrap themes) allows you to switch the image source based on the current theme.\n\n```jsx {5-8}\nimport ThemedImage from '@theme/ThemedImage';\n\n<ThemedImage\n  alt=\"Docusaurus themed image\"\n  sources={{\n    light: useBaseUrl('img/docusaurus_light.svg'),\n    dark: useBaseUrl('img/docusaurus_dark.svg'),\n  }}\n/>;\n```\n\nimport useBaseUrl from '@docusaurus/useBaseUrl';\nimport ThemedImage from '@theme/ThemedImage';\n\n<ThemedImage\n  alt=\"Docusaurus themed image\"\n  sources={{\n    light: useBaseUrl('img/docusaurus_keytar.svg'),\n    dark: useBaseUrl('img/docusaurus_speed.svg'),\n  }}\n/>\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.17755687656950836,
      "title": "presets",
      "fileContents": "---\nid: presets\ntitle: Presets\n---\n\nPresets are collections of plugins and themes.\n\n## Using presets\n\nA preset is usually a npm package, so you install them like other npm packages using npm.\n\n```bash npm2yarn\nnpm install --save docusaurus-preset-name\n```\n\nThen, add it in your site's `docusaurus.config.js`'s `presets` option:\n\n```jsx {3} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: ['@docusaurus/preset-xxxx'],\n};\n```\n\nTo load presets from your local directory, specify how to resolve them:\n\n```jsx {5} title=\"docusaurus.config.js\"\nconst path = require('path');\n\nmodule.exports = {\n  // ...\n  presets: [path.resolve(__dirname, '/path/to/docusaurus-local-presets')],\n};\n```\n\n## Presets -> themes and plugins\n\nPresets in some way are a shorthand function to add plugins and themes to your docusaurus config. For example, you can specify a preset that includes the following themes and plugins,\n\n```js\nmodule.exports = function preset(context, opts = {}) {\n  return {\n    themes: [\n      require.resolve('@docusaurus/themes-cool'),\n      require.resolve('@docusaurus/themes-bootstrap'),\n    ],\n    plugins: [require.resolve('@docusaurus/plugin-blog')],\n  };\n};\n```\n\nthen in your Docusaurus config, you may configure the preset instead:\n\n```jsx {3} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: ['@docusaurus/preset-my-own'],\n};\n```\n\nThis is equivalent of doing:\n\n```jsx title=\"docusaurus.config.js\"\nmodule.exports = {\n  themes: ['@docusaurus/themes-cool', '@docusaurus/themes-bootstrap'],\n  plugins: ['@docusaurus/plugin-blog'],\n};\n```\n\nThis is especially useful when some plugins and themes are intended to be used together.\n\n## Official presets\n\n### `@docusaurus/preset-classic`\n\nThe classic preset that is usually shipped by default to new docusaurus website. It is a set of plugins and themes.\n\n| Themes                             | Plugins                               |\n| ---------------------------------- | ------------------------------------- |\n| `@docusaurus/theme-classic`        | `@docusaurus/plugin-content-docs`     |\n| `@docusaurus/theme-search-algolia` | `@docusaurus/plugin-content-blog`     |\n|                                    | `@docusaurus/plugin-content-pages`    |\n|                                    | `@docusaurus/plugin-debug`            |\n|                                    | `@docusaurus/plugin-google-analytics` |\n|                                    | `@docusaurus/plugin-google-gtag`      |\n|                                    | `@docusaurus/plugin-sitemap`          |\n\nTo specify plugin options individually, you can provide the necessary fields to certain plugins, i.e. `customCss` for `@docusaurus/theme-classic`, pass them in the preset field, like this:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        // Debug defaults to true in dev, false in prod\n        debug: undefined,\n        // Will be passed to @docusaurus/theme-classic.\n        theme: {\n          customCss: [require.resolve('./src/css/custom.css')],\n        },\n        // Will be passed to @docusaurus/plugin-content-docs (false to disable)\n        docs: {},\n        // Will be passed to @docusaurus/plugin-content-blog (false to disable)\n        blog: {},\n        // Will be passed to @docusaurus/plugin-content-pages (false to disable)\n        pages: {},\n        // Will be passed to @docusaurus/plugin-content-sitemap (false to disable)\n        sitemap: {},\n      },\n    ],\n  ],\n};\n```\n\nIn addition to these plugins and themes, `@docusaurus/theme-classic` adds [`remark-admonitions`](https://github.com/elviswolcott/remark-admonitions) as a remark plugin to `@docusaurus/plugin-content-blog` and `@docusaurus/plugin-content-docs`.\n\nThe `admonitions` key will be passed as the [options](https://github.com/elviswolcott/remark-admonitions#options) to `remark-admonitions`. Passing `false` will prevent the plugin from being added to MDX.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n          // options for remark-admonitions\n          admonitions: {},\n        },\n      },\n    ],\n  ],\n};\n```\n\n### `@docusaurus/preset-bootstrap`\n\nThe classic preset that is usually shipped by default to new docusaurus website. It is a set of plugins and themes.\n\n| Themes                        | Plugins                            |\n| ----------------------------- | ---------------------------------- |\n| `@docusaurus/theme-bootstrap` | `@docusaurus/plugin-content-docs`  |\n|                               | `@docusaurus/plugin-content-blog`  |\n|                               | `@docusaurus/plugin-content-pages` |\n|                               | `@docusaurus/plugin-debug`         |\n\nTo specify plugin options individually, you can provide the necessary fields to certain plugins, i.e. `docs` for `@docusaurus/theme-bootstrap`, pass them in the preset field, like this:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  presets: [\n    [\n      '@docusaurus/preset-bootstrap',\n      {\n        // Debug defaults to true in dev, false in prod\n        debug: undefined,\n        // Will be passed to @docusaurus/plugin-content-docs (false to disable)\n        docs: {},\n        // Will be passed to @docusaurus/plugin-content-blog (false to disable)\n        blog: {},\n      },\n    ],\n  ],\n};\n```\n\n:::caution\n\nThis preset is work in progress\n\n:::\n\n<!--\n\nAdvanced guide on using and configuring presets\n\nReferences\n---\n- [classic themes](/packages/docusaurus-preset-classic/src/index.js)\n- [babel docs on presets](https://babeljs.io/docs/en/presets)\n\n-->\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.39532304637539095,
      "title": "search",
      "fileContents": "---\nid: search\ntitle: Search\nkeywords:\n  - algolia\n  - search\n---\n\nDocusaurus' own `@docusaurus/preset-classic` supports a search integration.\n\nThere are two main options, you can use [Algolia DocSearch](https://docsearch.algolia.com) or bring in your own `SearchBar` component.\n\n## Using Algolia DocSearch\n\nAlgolia DocSearch works by crawling the content of your website every 24 hours and putting all the content in an Algolia index. This content is then queried directly from your front-end using the Algolia API. Note that your website needs to be publicly available for this to work (i.e., not behind a firewall). The service is free.\n\n### Connecting Algolia\n\nTo connect your docs with Algolia, add an `algolia` field in your `themeConfig`. **[Apply for DocSearch](https://docsearch.algolia.com/apply/)** to get your Algolia index and API key.\n\n```jsx title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    // ...\n    // highlight-start\n    algolia: {\n      apiKey: 'YOUR_API_KEY',\n      indexName: 'YOUR_INDEX_NAME',\n\n      // Optional: see doc section bellow\n      contextualSearch: true,\n\n      // Optional: Algolia search parameters\n      searchParameters: {},\n\n      //... other Algolia params\n    },\n    // highlight-end\n  },\n};\n```\n\n:::info\n\nThe `searchParameters` option used to be named `algoliaOptions` in Docusaurus v1.\n\n:::\n\n### Contextual search\n\nContextual search is mostly useful for versioned Docusaurus sites.\n\nLet's consider you have 2 docs versions, v1 and v2. When you are browsing v2 docs, it would be odd to return search results for the v1 documentation. Sometimes v1 and v2 docs are quite similar, and you would end up with duplicate search results for the same query (one result per version).\n\nTo solve this problem, the contextual search feature understands that you are browsing a specific docs version, and will create the search query filters dynamically.\n\n- browsing `/docs/v1/myDoc`, search results will only include **v1** docs (+ other unversioned pages)\n- browsing `/docs/v2/myDoc`, search results will only include **v2** docs (+ other unversioned pages)\n\n```jsx title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    // ...\n    // highlight-start\n    algolia: {\n      contextualSearch: true,\n    },\n    // highlight-end\n  },\n};\n```\n\n:::caution\n\nWhen using `contextualSearch: true`, the contextual facet filters will be merged with the ones provided with `algolia.searchParameters.facetFilters`.\n\n:::\n\n### Styling your Algolia search\n\nBy default, DocSearch comes with a fine-tuned theme that was designed for accessibility, making sure that colors and contrasts respect standards.\n\nStill, you can reuse the [Infima CSS variables](styling-layout#styling-your-site-with-infima) from Docusaurus to style DocSearch by editing the `/src/css/custom.css` file.\n\n```css title=\"/src/css/custom.css\"\nhtml[data-theme='light'] .DocSearch {\n  /* --docsearch-primary-color: var(--ifm-color-primary); */\n  /* --docsearch-text-color: var(--ifm-font-color-base); */\n  --docsearch-muted-color: var(--ifm-color-secondary-darkest);\n  --docsearch-container-background: rgba(94, 100, 112, 0.7);\n  /* Modal */\n  --docsearch-modal-background: var(--ifm-color-secondary-lighter);\n  /* Search box */\n  --docsearch-searchbox-background: var(--ifm-color-secondary);\n  --docsearch-searchbox-focus-background: var(--ifm-color-white);\n  /* Hit */\n  --docsearch-hit-color: var(--ifm-font-color-base);\n  --docsearch-hit-active-color: var(--ifm-color-white);\n  --docsearch-hit-background: var(--ifm-color-white);\n  /* Footer */\n  --docsearch-footer-background: var(--ifm-color-white);\n}\n\nhtml[data-theme='dark'] .DocSearch {\n  --docsearch-text-color: var(--ifm-font-color-base);\n  --docsearch-muted-color: var(--ifm-color-secondary-darkest);\n  --docsearch-container-background: rgba(47, 55, 69, 0.7);\n  /* Modal */\n  --docsearch-modal-background: var(--ifm-background-color);\n  /* Search box */\n  --docsearch-searchbox-background: var(--ifm-background-color);\n  --docsearch-searchbox-focus-background: var(--ifm-color-black);\n  /* Hit */\n  --docsearch-hit-color: var(--ifm-font-color-base);\n  --docsearch-hit-active-color: var(--ifm-color-white);\n  --docsearch-hit-background: var(--ifm-color-emphasis-100);\n  /* Footer */\n  --docsearch-footer-background: var(--ifm-background-surface-color);\n  --docsearch-key-gradient: linear-gradient(\n    -26.5deg,\n    var(--ifm-color-emphasis-200) 0%,\n    var(--ifm-color-emphasis-100) 100%\n  );\n}\n```\n\n### Customizing the Algolia search behavior\n\n<!-- TODO: update options link once the documentation is available on the DocSearch website -->\n\nAlgolia DocSearch supports a [list of options](https://autocomplete-experimental.netlify.app/docs/DocSearchModal#reference) that you can pass to the `algolia` field in the `docusaurus.config.js` file.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    // ...\n    algolia: {\n      apiKey: 'YOUR_API_KEY',\n      indexName: 'YOUR_INDEX_NAME',\n      // Options...\n    },\n  },\n};\n```\n\n### Editing the Algolia search component\n\nIf you prefer to edit the Algolia search React component, swizzle the `SearchBar` component in `@docusaurus/theme-search-algolia`:\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-search-algolia SearchBar\n```\n\n## Using your own search\n\nTo use your own search, swizzle the `SearchBar` component in `@docusaurus/theme-classic`\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-classic SearchBar\n```\n\nThis will create a `src/themes/SearchBar` file in your project folder. Restart your dev server and edit the component, you will see that Docusaurus uses your own `SearchBar` component now.\n\n**Notes**: You can alternatively [swizzle from Algolia SearchBar](#editing-the-algolia-search-component) and create your own search component from there.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.0702863157381921,
      "title": "static-assets",
      "fileContents": "---\nid: static-assets\ntitle: Static Assets\n---\n\nIn general, every website needs assets: images, stylesheets, favicons and etc. In such cases, you can create a directory named `static` at the root of your project. Every file you put into that directory will be copied into the the root of the generated `build` folder with the directory hierarchy preserved. E.g. if you add a file named `sun.jpg` to the static folder, it’ll be copied to `build/sun.jpg`.\n\nThis means that if the site's `baseUrl` is `/`, an image in `/static/img/docusaurus_keytar.svg` is available at `/img/docusaurus_keytar.svg`.\n\n## Referencing your static asset\n\nYou can reference assets from the `static` folder in your code. You could use hardcoded absolute paths, i.e. starting with a slash /, but remember to include the `baseUrl` if it is not `/`. However, this will break if you change your `baseUrl` in the config.\n\nA better way would be to use the `useBaseUrl` utility function which appends the `baseUrl` to paths for you.\n\n### JSX example\n\n```jsx title=\"MyComponent.js\"\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\n<img\n  alt=\"Docusaurus with Keytar\"\n  src={useBaseUrl('img/docusaurus_keytar.svg')}\n/>;\n```\n\nYou can also import SVG images, which will be transformed into React components.\n\n```jsx title=\"MyComponent.js\"\nimport DocusaurusLogoWithKeytar from '@site/static/img/docusaurus_keytar.svg';\n\n<DocusaurusLogoWithKeytar title=\"Docusaurus Logo\" className=\"logo\" />;\n```\n\n### Markdown example\n\nThanks to MDX, you can also use `useBaseUrl` utility function in Markdown files! You'd have to use `<img>` tags instead of the Markdown image syntax though. The syntax is exactly the same as in JSX.\n\n```jsx title=\"my-doc.mdx\"\n---\nid: my-doc\ntitle: My Doc\n---\n\n// Add to the top of the file below the front matter.\nimport useBaseUrl from '@docusaurus/useBaseUrl';\n\n...\n\n<img alt=\"Docusaurus with Keytar\" src={useBaseUrl('img/docusaurus_keytar.svg')} />\n```\n\nYou could also just use Markdown image syntax, but you would have to manually maintain the image paths yourself and isn't recommended.\n\n```md title=\"my-doc.md\"\n![Docusaurus with Keytar](/img/docusaurus_keytar.png)\n```\n\n### Caveats\n\nKeep in mind that:\n\n- By default, none of the files in `static` folder will be post-processed or minified.\n- Missing files references via hardcoded absolute paths will not be detected at compilation time, and will result in a 404 error.\n- By default, GitHub Pages runs published files through [Jekyll](https://jekyllrb.com/). Since Jekyll will discard any files that begin with `_`, it is recommended that you disable Jekyll by adding an empty file named `.nojekyll` file to your `static` directory if you are using GitHub pages for hosting.\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.12883357154835795,
      "title": "styling-layout",
      "fileContents": "---\nid: styling-layout\ntitle: Styling and Layout\ndescription: A Docusaurus site is a pre-rendered single-page React application. You can style it the way you style React apps.\n---\n\nimport ColorGenerator from '@site/src/components/ColorGenerator';\n\n## Traditional CSS\n\nIf you're using `@docusaurus/preset-classic`, you can create your own CSS files (e.g. `/src/css/custom.css`) and import them globally by passing it as an option into the preset.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        // highlight-start\n        theme: {\n          customCss: [require.resolve('./src/css/custom.css')],\n        },\n        // highlight-end\n      },\n    ],\n  ],\n};\n```\n\nAny CSS you write within that file will be available globally and can be referenced directly using string literals. This is the most traditional approach to writing CSS and is fine for small websites that do not have much customization.\n\n## Styling your site with Infima\n\n`@docusaurus/preset-classic` uses [Infima](https://facebookincubator.github.io/infima/) as the underlying styling framework. Infima provides flexible layout and common UI components styling suitable for content-centric websites (blogs, documentation, landing pages). For more details, check out the [Infima website](https://facebookincubator.github.io/infima/).\n\nWhen you `init` your Docusaurus 2 project, the website will be generated with basic Infima stylesheets and default styling. You may customize the styling by editing the `/src/css/custom.css` file.\n\n```css title=\"/src/css/custom.css\"\n/**\n * You can override the default Infima variables here.\n * Note: this is not a complete list of --ifm- variables.\n */\n:root {\n  --ifm-color-primary: #25c2a0;\n  --ifm-color-primary-dark: rgb(33, 175, 144);\n  --ifm-color-primary-darker: rgb(31, 165, 136);\n  --ifm-color-primary-darkest: rgb(26, 136, 112);\n  --ifm-color-primary-light: rgb(70, 203, 174);\n  --ifm-color-primary-lighter: rgb(102, 212, 189);\n  --ifm-color-primary-lightest: rgb(146, 224, 208);\n  --ifm-code-font-size: 95%;\n}\n```\n\nInfima uses 7 shades of each color. We recommend using [ColorBox](https://www.colorbox.io/) to find the different shades of colors for your chosen primary color.\n\nAlternatively, use the following tool to generate the different shades for your website and copy the variables into `/src/css/custom.css`.\n\n<ColorGenerator/>\n\n<!-- TODO need more refinement here -->\n\n## Styling approaches\n\nA Docusaurus site is a single-page React application. You can style it the way you style React apps.\n\nThere are a few approaches/frameworks which will work, depending on your preferences and the type of website you are trying to build. Websites that are highly interactive and behave more like web apps will benefit from a more modern styling approaches that co-locate styles with the components. Component styling can also be particularly useful when you wish to customize or swizzle a component.\n\n### Global styles\n\nThis is the most traditional way of styling that most developers (including non-front end developers) would be familiar with.\n\nAssuming you are using `@docusaurus/preset-classic` and `/src/css/custom.css` was passed in to the preset config, styles inside that file would be available globally.\n\n```css title=\"/src/css/custom.css\"\n.purple-text {\n  color: rebeccapurple;\n}\n```\n\n```jsx\nfunction MyComponent() {\n  return (\n    <main>\n      <h1 className=\"purple-text\">Purple Heading!</h1>\n    </main>\n  );\n}\n```\n\n### CSS modules\n\nTo style your components using [CSS Modules](https://github.com/css-modules/css-modules), name your stylesheet files with the `.module.css` suffix (e.g. `welcome.module.css`). webpack will load such CSS files as CSS modules and you have to reference the class names from the imported CSS module (as opposed to using plain strings). This is similar to the convention used in [Create React App](https://facebook.github.io/create-react-app/docs/adding-a-css-modules-stylesheet).\n\n```css title=\"styles.module.css\"\n.main {\n  padding: 12px;\n}\n\n.heading {\n  font-weight: bold;\n}\n\n.contents {\n  color: #ccc;\n}\n```\n\n```jsx\nimport styles from './styles.module.css';\n\nfunction MyComponent() {\n  return (\n    <main className={styles.main}>\n      <h1 className={styles.heading}>Hello!</h1>\n      <article className={styles.contents}>Lorem Ipsum</article>\n    </main>\n  );\n}\n```\n\nThe class names which will be processed by webpack into a globally unique class name during build.\n\n### CSS-in-JS\n\n:::caution\n\nThis section is a work in progress. [Welcoming PRs](https://github.com/facebook/docusaurus/issues/1640).\n\n:::\n\n### Sass/SCSS\n\nTo use Sass/SCSS as your CSS preprocessor, install the unofficial Docusaurus 2 plugin [`docusaurus-plugin-sass`](https://github.com/rlamana/docusaurus-plugin-sass). This plugin works for both global styles and the CSS modules approach:\n\n1. Install [`docusaurus-plugin-sass`](https://github.com/rlamana/docusaurus-plugin-sass):\n\n```bash npm2yarn\nnpm install --save docusaurus-plugin-sass\n```\n\n2. Include the plugin in your `docusaurus.config.js` file:\n\n```jsx {3} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: ['docusaurus-plugin-sass'],\n  // ...\n};\n```\n\n3. Write and import your stylesheets in Sass/SCSS as normal.\n\n#### Global styles using Sass/SCSS\n\nYou can now set the `customCss` property of `@docusaurus/preset-classic` to point to your Sass/SCSS file:\n\n```jsx {8} title=\"docusaurus.config.js\"\nmodule.exports = {\n  presets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        // ...\n        theme: {\n          customCss: [require.resolve('./src/css/custom.scss')],\n        },\n        // ...\n      },\n    ],\n  ],\n};\n```\n\n#### Modules using Sass/SCSS\n\nName your stylesheet files with the `.module.scss` suffix (e.g. `welcome.module.scss`) instead of `.css`. Webpack will use `sass-loader` to preprocess your stylesheets and load them as CSS modules.\n\n```scss title=\"styles.module.scss\"\n.main {\n  padding: 12px;\n\n  article {\n    color: #ccc;\n  }\n}\n```\n\n```jsx\nimport styles from './styles.module.scss';\n\nfunction MyComponent() {\n  return (\n    <main className={styles.main}>\n      <article>Lorem Ipsum</article>\n    </main>\n  );\n}\n```\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.9401790805477437,
      "title": "theme-bootstrap",
      "fileContents": "---\nid: theme-bootstrap\ntitle: '@docusaurus/theme-bootstrap'\n---\n\n:::caution\n\nThis section is a work in progress.\n\n:::\n\n## Hooks\n\n### `useLogo`\n\nReact hook to access the logo asset.\n\nUsage example:\n\n```jsx\nimport React from 'react';\n// highlight-next-line\nimport useLogo from '@theme/hooks/useLogo';\n\nconst Example = () => {\n  // highlight-next-line\n   const {logoLink, logoLinkProps, logoImageUrl, logoAlt} = useLogo();\n\n  return (\n    <Link to={logoLink} {...logoLinkProps}>\n      {logoImageUrl != null && (\n        <img\n          src={logoImageUrl}\n          alt={logoAlt}\n        />\n      )}\n    </Link>\n  )\n};\n```\n\n## Navbar\n\n### Navbar title & logo\n\nYou can add a logo and title to the navbar via `themeConfig.navbar`. Logo can be placed in [static folder](static-assets.md). Logo URL is set to base URL of your site by default. Although you can specify your own URL for the logo, if it is an external link, it will open in a new tab. In addition, you can override a value for the target attribute of logo link, it can come in handy if you are hosting docs website in a subdirectory of your main website, and in which case you probably do not need a link in the logo to the main website will open in a new tab.\n\n```js {5-11} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      title: 'Site Title',\n      logo: {\n        alt: 'Site Logo',\n        src: 'img/logo.svg',\n        href: 'https://v2.docusaurus.io/', // Default to `siteConfig.baseUrl`.\n        target: '_self', // By default, this value is calculated based on the `href` attribute (the external link will open in a new tab, all others in the current one).\n      },\n    },\n    // ...\n  },\n};\n```\n\n### Navbar links\n\nYou can add links to the navbar via `themeConfig.navbar.links`:\n\n```js {5-15} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      links: [\n        {\n          // Client-side routing, used for navigating within the website.\n          // The baseUrl will be automatically prepended to this value.\n          to: 'docs/introduction',\n          // A full-page navigation, used for navigating outside of the website.\n          // You should only use either `to` or `href`.\n          href: 'https://www.facebook.com',\n          // Prepends the baseUrl to href values.\n          prependBaseUrlToHref: true,\n          // The string to be shown.\n          label: 'Introduction',\n          // Left or right side of the navbar.\n          position: 'left', // or 'right'\n          // To apply the active class styling on all\n          // routes starting with this path.\n          // This usually isn't necessary\n          activeBasePath: 'docs',\n          // Alternative to activeBasePath if required.\n          activeBaseRegex: 'docs/(next|v8)',\n          // Custom CSS class (for styling any item).\n          className: '',\n        },\n        // ... other links\n      ],\n    },\n    // ...\n  },\n};\n```\n\nReact Router should automatically apply active link styling to links, but you can use `activeBasePath` in edge cases. For cases in which a link should be active on several different paths (such as when you have multiple doc folders under the same sidebar), you can use `activeBaseRegex`. `activeBaseRegex` is a more flexible alternative to `activeBasePath` and takes precedence over it -- Docusaurus parses it into a regular expression that is tested against the current URL.\n\nOutbound (external) links automatically get `target=\"_blank\" rel=\"noopener noreferrer\"` attributes.\n\n\n## Footer\n\nYou can add logo and a copyright to the footer via `themeConfig.footer`. Logo can be placed in [static folder](static-assets.md). Logo URL works in the same way of the navbar logo.\n\n```js {5-15} title=\"docusaurus.config.js\"\n  // ...\n  footer: {\n    logo: {\n      alt: 'Facebook Open Source Logo',\n      src: 'img/oss_logo.png',\n      href: 'https://opensource.facebook.com',\n    },\n    copyright: `Copyright © ${new Date().getFullYear()} My Project, Inc. Built with Docusaurus.`,\n  }\n```\n\n## Footer Links\nYou can add links to the navbar via `themeConfig.footer.links`:\n\n\n```js {5-15} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  footer: {\n      links: [\n        {\n          // Label of the section of these links\n          title: 'Docs',\n          items: [\n            {\n              // Label of the link\n              label: 'Style Guide',\n              // Client-side routing, used for navigating within the website.\n              // The baseUrl will be automatically prepended to this value.\n              to: 'docs/',\n            },\n            {\n              label: 'Second Doc',\n              to: 'docs/doc2/',\n            },\n          ],\n        },\n        {\n          title: 'Community',\n          items: [\n            {\n              label: 'Stack Overflow',\n              // A full-page navigation, used for navigating outside of the website.\n              href: 'https://stackoverflow.com/questions/tagged/docusaurus',\n            },\n            {\n              label: 'Discord',\n              href: 'https://discordapp.com/invite/docusaurus',\n            },\n            {\n              label: 'Twitter',\n              href: 'https://twitter.com/docusaurus',\n            },\n            {\n              //Renders the html pass-through instead of a simple link\n              html: `\n                <a href=\"https://www.netlify.com\" target=\"_blank\" rel=\"noreferrer noopener\" aria-label=\"Deploys by Netlify\">\n                  <img src=\"https://www.netlify.com/img/global/badges/netlify-color-accent.svg\" alt=\"Deploys by Netlify\" />\n                </a>\n              `,\n            },\n          ],\n        },\n      ],\n    },\n};\n```\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.4871205896618589,
      "title": "theme-classic",
      "fileContents": "---\nid: theme-classic\ntitle: '@docusaurus/theme-classic'\n---\n\n:::caution\n\nThis section is a work in progress.\n\n:::\n\n## Common\n\n### Color mode - dark mode\n\nThe classic theme provides by default light and dark mode support, with a navbar switch for the user.\n\nIt is possible to customize the color mode support with the following configuration:\n\n```js {6-35} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    // ...\n    colorMode: {\n      // \"light\" | \"dark\"\n      defaultMode: 'light',\n\n      // Hides the switch in the navbar\n      // Useful if you want to support a single color mode\n      disableSwitch: false,\n\n      // Should we use the prefers-color-scheme media-query,\n      // using user system preferences, instead of the hardcoded defaultMode\n      respectPrefersColorScheme: false,\n\n      // Dark/light switch icon options\n      switchConfig: {\n        // Icon for the switch while in dark mode\n        darkIcon: '🌙',\n\n        // CSS to apply to dark icon,\n        // React inline style object\n        // see https://reactjs.org/docs/dom-elements.html#style\n        darkIconStyle: {\n          marginLeft: '2px',\n        },\n\n        // Unicode icons such as '\\u2600' will work\n        // Unicode with 5 chars require brackets: '\\u{1F602}'\n        lightIcon: '\\u{1F602}',\n\n        lightIconStyle: {\n          marginLeft: '1px',\n        },\n      },\n    },\n    // ...\n  },\n  // ...\n};\n```\n\n:::caution\n\nWith `respectPrefersColorScheme: true`, the `defaultMode` is overridden by user system preferences.\n\nIf you only want to support one color mode, you likely want to ignore user system preferences.\n\n:::\n\n### Meta image\n\nYou can configure a default image that will be used for your meta tag, in particular `og:image` and `twitter:image`.\n\n```js {4-6} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    // Relative to your site's \"static\" directory.\n    // Cannot be SVGs. Can be external URLs too.\n    image: 'img/docusaurus.png',\n    // ...\n  },\n};\n```\n\n### Metadatas\n\nYou can configure additional html metadatas (and override existing ones).\n\n```js {4} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    metadatas: [{name: 'twitter:card', content: 'summary'}],\n    // ...\n  },\n};\n```\n\n### Announcement bar\n\nSometimes you want to announce something in your website. Just for such a case, you can add an announcement bar. This is a non-fixed and optionally dismissable panel above the navbar.\n\n```js {4-11} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    announcementBar: {\n      id: 'support_us', // Any value that will identify this message.\n      content:\n        'We are looking to revamp our docs, please fill <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"#\">this survey</a>',\n      backgroundColor: '#fafbfc', // Defaults to `#fff`.\n      textColor: '#091E42', // Defaults to `#000`.\n      isCloseable: false, // Defaults to `true`.\n    },\n    // ...\n  },\n};\n```\n\n## Hooks\n\n### `useThemeContext`\n\nReact hook to access theme context. This context contains functions for setting light and dark mode and boolean property, indicating which mode is currently in use.\n\nUsage example:\n\n```jsx\nimport React from 'react';\n// highlight-next-line\nimport useThemeContext from '@theme/hooks/useThemeContext';\n\nconst Example = () => {\n  // highlight-next-line\n  const {isDarkTheme, setLightTheme, setDarkTheme} = useThemeContext();\n\n  return <h1>Dark mode is now {isDarkTheme ? 'on' : 'off'}</h1>;\n};\n```\n\n:::note\n\nThe component calling `useThemeContext` must be a child of the `Layout` component.\n\n```jsx\nfunction ExamplePage() {\n  return (\n    <Layout>\n      <Example />\n    </Layout>\n  );\n}\n```\n\n:::\n\n## Navbar\n\n### Navbar title & logo\n\nYou can add a logo and title to the navbar via `themeConfig.navbar`. Logo can be placed in [static folder](static-assets.md). Logo URL is set to base URL of your site by default. Although you can specify your own URL for the logo, if it is an external link, it will open in a new tab. In addition, you can override a value for the target attribute of logo link, it can come in handy if you are hosting docs website in a subdirectory of your main website, and in which case you probably do not need a link in the logo to the main website will open in a new tab.\n\nTo improve dark mode support, you can also set a different logo for this mode.\n\n```js {5-11} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      title: 'Site Title',\n      logo: {\n        alt: 'Site Logo',\n        src: 'img/logo.svg',\n        srcDark: 'img/logo_dark.svg', // Default to `logo.src`.\n        href: 'https://v2.docusaurus.io/', // Default to `siteConfig.baseUrl`.\n        target: '_self', // By default, this value is calculated based on the `href` attribute (the external link will open in a new tab, all others in the current one).\n      },\n    },\n    // ...\n  },\n};\n```\n\n### Navbar items\n\nYou can add items to the navbar via `themeConfig.navbar.items`.\n\nBy default, Navbar items are regular links (internal or external).\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      // highlight-start\n      items: [\n        {\n          // Client-side routing, used for navigating within the website.\n          // The baseUrl will be automatically prepended to this value.\n          to: 'docs/introduction',\n          // A full-page navigation, used for navigating outside of the website.\n          // You should only use either `to` or `href`.\n          href: 'https://www.facebook.com',\n          // Prepends the baseUrl to href values.\n          prependBaseUrlToHref: true,\n          // The string to be shown.\n          label: 'Introduction',\n          // Left or right side of the navbar.\n          position: 'left', // or 'right'\n          // To apply the active class styling on all\n          // routes starting with this path.\n          // This usually isn't necessary\n          activeBasePath: 'docs',\n          // Alternative to activeBasePath if required.\n          activeBaseRegex: 'docs/(next|v8)',\n          // Custom CSS class (for styling any item).\n          className: '',\n        },\n        // ... other items\n      ],\n      // highlight-end\n    },\n    // ...\n  },\n};\n```\n\nReact Router should automatically apply active link styling to links, but you can use `activeBasePath` in edge cases. For cases in which a link should be active on several different paths (such as when you have multiple doc folders under the same sidebar), you can use `activeBaseRegex`. `activeBaseRegex` is a more flexible alternative to `activeBasePath` and takes precedence over it -- Docusaurus parses it into a regular expression that is tested against the current URL.\n\nOutbound (external) links automatically get `target=\"_blank\" rel=\"noopener noreferrer\"` attributes.\n\n### Navbar dropdown\n\nNavbar items can also be dropdown items by specifying the `items`, an inner array of navbar items.\n\n```js {9-19} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      items: [\n        {\n          label: 'Community',\n          position: 'left', // or 'right'\n          items: [\n            {\n              label: 'Facebook',\n              href: '...',\n            },\n            {\n              label: 'GitHub',\n              href: '...',\n            },\n            // ... more items\n          ],\n        },\n      ],\n    },\n    // ...\n  },\n};\n```\n\n### Navbar doc link\n\nIf you want to link to a specific doc, this special navbar item type will render the link to the doc of the provided `docId`. It will get the class `navbar__link--active` as long as you browse a doc of the same sidebar.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'doc',\n          position: 'left',\n          docId: 'introduction',\n          label: 'Docs',\n          activeSidebarClassName: 'navbar__link--active',\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n### Navbar docs version dropdown\n\nIf you use docs with versioning, this special navbar item type that will render a dropdown with all your site's available versions. The user will be able to switch from one version to another, while staying on the same doc (as long as the doc id is constant across versions).\n\n```js {5-8} title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        {\n          type: 'docsVersionDropdown',\n          position: 'left',\n\n          // Add additional dropdown items at the beginning/end of the dropdown.\n          dropdownItemsBefore: [],\n          dropdownItemsAfter: [{to: '/versions', label: 'All versions'}],\n\n          // Do not add the link active class when browsing docs.\n          dropdownActiveClassDisabled: true,\n        },\n      ],\n    },\n  },\n};\n```\n\n### Navbar docs version\n\nIf you use docs with versioning, this special navbar item type will link to the active/browsed version of your doc (depends on the current url), and fallback to the latest version.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  themeConfig: {\n    navbar: {\n      items: [\n        // highlight-start\n        {\n          type: 'docsVersion',\n          position: 'left',\n          // to: \"/path // by default, link to active/latest version\n          // label: \"label\" // by default, show active/latest version label\n        },\n        // highlight-end\n      ],\n    },\n  },\n};\n```\n\n### Auto-hide sticky navbar\n\nYou can enable this cool UI feature that automatically hides the navbar when a user starts scrolling down the page, and show it again when the user scrolls up.\n\n```js {5} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      hideOnScroll: true,\n    },\n    // ...\n  },\n};\n```\n\n### Navbar style\n\nYou can set the static Navbar style without disabling the theme switching ability. The selected style will always apply no matter which theme user have selected.\n\nCurrently, there are two possible style options: `dark` and `primary` (based on the `--ifm-color-primary` color). You can see the styles preview in the [Infima documentation](https://facebookincubator.github.io/infima/docs/components/navbar/).\n\n```js {5} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    navbar: {\n      style: 'primary',\n    },\n    // ...\n  },\n};\n```\n\n<!--\n\n## Footer\n\nTODO.\n\n-->\n\n## CodeBlock\n\nDocusaurus uses [Prism React Renderer](https://github.com/FormidableLabs/prism-react-renderer) to highlight code blocks.\n\n### Theme\n\nBy default, we use [Palenight](https://github.com/FormidableLabs/prism-react-renderer/blob/master/src/themes/palenight.js) as syntax highlighting theme. You can specify a custom theme from the [list of available themes](https://github.com/FormidableLabs/prism-react-renderer/tree/master/src/themes). If you want to use a different syntax highlighting theme when the site is in dark mode, you may also do so.\n\n```js {5-6} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    prism: {\n      theme: require('prism-react-renderer/themes/github'),\n      darkTheme: require('prism-react-renderer/themes/dracula'),\n    },\n    // ...\n  },\n};\n```\n\n:::note\n\nIf you use the line highlighting Markdown syntax, you might need to specify a different highlight background color for the dark mode syntax highlighting theme. Refer to the [docs for guidance](markdown-features.mdx#line-highlighting).\n\n:::\n\n### Default language\n\nYou can set a default language for code blocks if no language is added after the opening triple backticks (i.e. ```). Note that a valid [language name](https://prismjs.com/#supported-languages) must be passed, e.g.:\n\n```js {5} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themeConfig: {\n    prism: {\n      defaultLanguage: 'javascript',\n    },\n    // ...\n  },\n};\n```\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.8210050306249204,
      "title": "typescript-support",
      "fileContents": "---\nid: typescript-support\ntitle: TypeScript Support\n---\n\n## Setup\n\nDocusaurus supports writing and using TypeScript theme components. To start using TypeScript, add `@docusaurus/module-type-aliases` and some `@types` dependencies to your project:\n\n```bash npm2yarn\nnpm install --save-dev typescript @docusaurus/module-type-aliases @types/react @types/react-router-dom @types/react-helmet @tsconfig/docusaurus\n```\n\nThen add `tsconfig.json` to your project root with the following content:\n\n```json title=\"tsconfig.json\"\n{\n  \"extends\": \"@tsconfig/docusaurus/tsconfig.json\",\n  \"include\": [\"src/\"]\n}\n```\n\nDocusaurus doesn't use this `tsconfig.json` to compile your project. It is added just for a nicer Editor experience, although you can choose to run `tsc` to type check your code for yourself or on CI.\n\nNow you can start writing TypeScript theme components.\n\n## Swizzling TypeScript theme components\n\nFor themes that supports TypeScript theme components, you can add the `--typescript` flag to the end of swizzling command to get TypeScript source code. For example, the following command will generate `index.tsx` and `styles.module.css` into `src/theme/Footer`.\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-classic Footer --typescript\n```\n\nAt this moment, the only official Docusaurus theme that supports TypeScript theme components is `@docusaurus/theme-classic`. If you are a Docusaurus theme package author who wants to add TypeScript support, see the [Lifecycle APIs docs](./lifecycle-apis.md#gettypescriptthemepath).\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.04138763436409798,
      "title": "using-plugins",
      "fileContents": "---\nid: using-plugins\ntitle: Plugins\n---\n\nPlugins are the building blocks of features in a Docusaurus 2 site. Each plugin handles its own individual feature. Plugins may work and be distributed as part of bundle via [presets](presets.md).\n\n## Installing a plugin\n\nA plugin is usually a npm package, so you install them like other npm packages using npm.\n\n```bash npm2yarn\nnpm install --save docusaurus-plugin-name\n```\n\nThen you add it in your site's `docusaurus.config.js`'s `plugins` option:\n\n```jsx {3} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: ['@docusaurus/plugin-content-pages'],\n};\n```\n\nDocusaurus can also load plugins from your local directory, you can do something like the following:\n\n```jsx {5} title=\"docusaurus.config.js\"\nconst path = require('path');\n\nmodule.exports = {\n  // ...\n  plugins: [path.resolve(__dirname, '/path/to/docusaurus-local-plugin')],\n};\n```\n\n## Configuring plugins\n\nFor the most basic usage of plugins, you can provide just the plugin name or the absolute path to the plugin.\n\nHowever, plugins can have options specified by wrapping the name and an options object in an array inside your config. This style is usually called `Babel Style`.\n\n```js {4-9} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: [\n    [\n      '@docusaurus/plugin-xxx',\n      {\n        /* options */\n      },\n    ],\n  ],\n};\n```\n\nExample:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    // Basic usage.\n    '@docusaurus/plugin-google-analytics',\n\n    // With options object (babel style)\n    [\n      '@docusaurus/plugin-sitemap',\n      {\n        cacheTime: 600 * 1000,\n      },\n    ],\n  ],\n};\n```\n\n## Multi-instance plugins and plugin ids\n\nIt is possible to use multiple times the same plugin, on the same Docusaurus website.\n\nIn this case, it is required to assign a unique id to each plugin instance.\n\nBy default, the plugin id is `default`.\n\n```js {6,13} title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-xxx',\n      {\n        id: 'plugin-xxx-1',\n        // other options\n      },\n    ],\n    [\n      '@docusaurus/plugin-xxx',\n      {\n        id: 'plugin-xxx-2',\n        // other options\n      },\n    ],\n  ],\n};\n```\n\n## Plugins design\n\nDocusaurus' implementation of the plugins system provides us with a convenient way to hook into the website's lifecycle to modify what goes on during development/build, which involves (but not limited to) extending the webpack config, modifying the data being loaded and creating new components to be used in a page.\n\n## Creating plugins\n\nA plugin is a module which exports a function that takes two parameters and returns an object when executed.\n\n### Module definition\n\nThe exported modules for plugins are called with two parameters: `context` and `options` and returns a JavaScript object with defining the [lifecycle APIs](./lifecycle-apis.md).\n\nFor example if you have a reference to a local folder such as this in your `docusaurus.config.js`:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  plugins: [path.resolve(__dirname, 'my-plugin')],\n};\n```\n\nThen in the folder `my-plugin` you can create an index.js such as this\n\n```js title=\"index.js\"\nmodule.exports = function (context, options) {\n  // ...\n  return {\n    name: 'my-docusaurus-plugin',\n    async loadContent() {\n      /* ... */\n    },\n    async contentLoaded({content, actions}) {\n      /* ... */\n    },\n    /* other lifecycle API */\n  };\n};\n```\n\nThe `my-plugin` folder could also be a fully fledged package with it's own package.json and a `src/index.js` file for example\n\n#### `context`\n\n`context` is plugin-agnostic and the same object will be passed into all plugins used for a Docusaurus website. The `context` object contains the following fields:\n\n```ts\ninterface LoadContext {\n  siteDir: string;\n  generatedFilesDir: string;\n  siteConfig: DocusaurusConfig;\n  outDir: string;\n  baseUrl: string;\n}\n```\n\n#### `options`\n\n`options` are the [second optional parameter when the plugins are used](using-plugins.md#configuring-plugins). `options` are plugin-specific and are specified by users when they use them in `docusaurus.config.js`. Alternatively, if preset contains the plugin, the preset will then be in charge of passing the correct options into the plugin. It is up to individual plugin to define what options it takes.\n\n#### Return value\n\nThe returned object value should implement the [lifecycle APIs](lifecycle-apis.md).\n\n## Official plugins\n\nFind the list of official Docusaurus plugins [here](https://github.com/facebook/docusaurus/tree/master/packages).\n\n### `@docusaurus/plugin-content-blog`\n\nProvides the [Blog](blog.md) feature and is the default blog plugin for Docusaurus.\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-content-blog\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency. You can also configure it through the [classic preset options](presets.md#docusauruspreset-classic) instead of doing it like below.\n\n:::\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-content-blog',\n      {\n        /**\n         * Path to data on filesystem relative to site dir.\n         */\n        path: 'blog',\n        /**\n         * URL for editing a blog post.\n         * Example: 'https://github.com/facebook/docusaurus/edit/master/website/blog/'\n         */\n        editUrl:\n          'https://github.com/facebook/docusaurus/edit/master/website/blog/',\n        /**\n         * Blog page title for better SEO\n         */\n        blogTitle: 'Blog title',\n        /**\n         * Blog page meta description for better SEO\n         */\n        blogDescription: 'Blog',\n        /**\n         * Number of blog post elements to show in the blog sidebar\n         * 'ALL' to show all blog posts\n         * 0 to disable\n         */\n        blogSidebarCount: 5,\n        /**\n         * Title of the blog sidebar\n         */\n        blogSidebarTitle: 'All our posts',\n        /**\n         * URL route for the blog section of your site.\n         * *DO NOT* include a trailing slash.\n         */\n        routeBasePath: 'blog',\n        include: ['*.md', '*.mdx'],\n        postsPerPage: 10,\n        /**\n         * Theme components used by the blog pages.\n         */\n        blogListComponent: '@theme/BlogListPage',\n        blogPostComponent: '@theme/BlogPostPage',\n        blogTagsListComponent: '@theme/BlogTagsListPage',\n        blogTagsPostsComponent: '@theme/BlogTagsPostsPage',\n        /**\n         * Remark and Rehype plugins passed to MDX.\n         */\n        remarkPlugins: [\n          /* require('remark-math') */\n        ],\n        rehypePlugins: [],\n        /**\n         * Custom Remark and Rehype plugins passed to MDX before\n         * the default Docusaurus Remark and Rehype plugins.\n         */\n        beforeDefaultRemarkPlugins: [],\n        beforeDefaultRehypePlugins: [],\n        /**\n         * Truncate marker, can be a regex or string.\n         */\n        truncateMarker: /<!--\\s*(truncate)\\s*-->/,\n        /**\n         * Show estimated reading time for the blog post.\n         */\n        showReadingTime: true,\n        /**\n         * Blog feed.\n         * If feedOptions is undefined, no rss feed will be generated.\n         */\n        feedOptions: {\n          type: '', // required. 'rss' | 'feed' | 'all'\n          title: '', // default to siteConfig.title\n          description: '', // default to  `${siteConfig.title} Blog`\n          copyright: '',\n          language: undefined, // possible values: http://www.w3.org/TR/REC-html40/struct/dirlang.html#langcodes\n        },\n      },\n    ],\n  ],\n};\n```\n\n### `@docusaurus/plugin-content-docs`\n\nProvides the [Docs](markdown-features.mdx) functionality and is the default docs plugin for Docusaurus.\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-content-docs\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency. You can also configure it through the [classic preset options](presets.md#docusauruspreset-classic) instead of doing it like below.\n\n:::\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-content-docs',\n      {\n        /**\n         * Path to data on filesystem relative to site dir.\n         */\n        path: 'docs',\n        /**\n         * URL for editing a doc in the website repo.\n         * Example: 'https://github.com/facebook/docusaurus/edit/master/website/'\n         */\n        editUrl: 'https://github.com/facebook/docusaurus/edit/master/website/',\n        /**\n         * URL route for the docs section of your site.\n         * *DO NOT* include a trailing slash.\n         */\n        routeBasePath: 'docs',\n        include: ['**/*.md', '**/*.mdx'], // Extensions to include.\n        /**\n         * Path to sidebar configuration for showing a list of markdown pages.\n         * Warning: will change\n         */\n        sidebarPath: '',\n        /**\n         * Theme components used by the docs pages\n         */\n        docLayoutComponent: '@theme/DocPage',\n        docItemComponent: '@theme/DocItem',\n        /**\n         * Remark and Rehype plugins passed to MDX\n         */\n        remarkPlugins: [\n          /* require('remark-math') */\n        ],\n        rehypePlugins: [],\n        /**\n         * Custom Remark and Rehype plugins passed to MDX before\n         * the default Docusaurus Remark and Rehype plugins.\n         */\n        beforeDefaultRemarkPlugins: [],\n        beforeDefaultRehypePlugins: [],\n        /**\n         * Whether to display the author who last updated the doc.\n         */\n        showLastUpdateAuthor: false,\n        /**\n         * Whether to display the last date the doc was updated.\n         */\n        showLastUpdateTime: false,\n        /**\n         * By default, versioning is enabled on versioned sites.\n         * This is a way to explicitly disable the versioning feature.\n         */\n        disableVersioning: false,\n        /**\n         * Skip the next release docs when versioning is enabled.\n         * This will not generate HTML files in the production build for documents\n         * in `/docs/next` directory, only versioned docs.\n         */\n        excludeNextVersionDocs: false,\n        /**\n         * The last version is the one we navigate to in priority on versioned sites\n         * It is the one displayed by default in docs navbar items\n         * By default, the last version is the first one to appear in versions.json\n         * By default, the last version is at the \"root\" (docs have path=/docs/myDoc)\n         * Note: it is possible to configure the path and label of the last version\n         * Tip: using lastVersion: 'current' make sense in many cases\n         */\n        lastVersion: undefined,\n        /**\n         * The docusaurus versioning defaults don't make sense for all projects\n         * This gives the ability customize the label and path of each version\n         * You may not like that default versin\n         */\n        versions: {\n          /*\n          Example configuration: \n          current: {\n            label: 'Android SDK v2.0.0 (WIP)',\n            path: 'android-2.0.0',\n          },\n          '1.0.0': {\n            label: 'Android SDK v1.0.0',\n            path: 'android-1.0.0',\n          },\n          */\n        },\n        /**\n         * Sometimes you only want to include a subset of all available versions.\n         * Tip: limit to 2 or 3 versions to improve startup and build time in dev and deploy previews\n         */\n        onlyIncludeVersions: undefined, // ex: [\"current\", \"1.0.0\", \"2.0.0\"]\n      },\n    ],\n  ],\n};\n```\n\n### `@docusaurus/plugin-content-pages`\n\nThe default pages plugin for Docusaurus. The classic template ships with this plugin with default configurations. This plugin provides [creating pages](guides/creating-pages.md) functionality.\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-content-pages\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency. You can also configure it through the [classic preset options](presets.md#docusauruspreset-classic) instead of doing it like below.\n\n:::\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-content-pages',\n      {\n        /**\n         * Path to data on filesystem\n         * relative to site dir\n         * components in this directory will be automatically converted to pages\n         */\n        path: 'src/pages',\n        /**\n         * URL route for the page section of your site\n         * do not include trailing slash\n         */\n        routeBasePath: '',\n        include: ['**/*.{js,jsx,ts,tsx,md,mdx}'],\n        /**\n         * No Route will be created for matching files\n         */\n        exclude: [\n          '**/_*.{js,jsx,ts,tsx,md,mdx}',\n          '**/*.test.{js,ts}',\n          '**/__tests__/**',\n        ],\n        /**\n         * Theme component used by markdown pages.\n         */\n        mdxPageComponent: '@theme/MDXPage',\n        /**\n         * Remark and Rehype plugins passed to MDX\n         */\n        remarkPlugins: [],\n        rehypePlugins: [],\n        /**\n         * Custom Remark and Rehype plugins passed to MDX before\n         * the default Docusaurus Remark and Rehype plugins.\n         */\n        beforeDefaultRemarkPlugins: [],\n        beforeDefaultRehypePlugins: [],\n      },\n    ],\n  ],\n};\n```\n\n### `@docusaurus/plugin-google-analytics`\n\nThe default [Google Analytics](https://developers.google.com/analytics/devguides/collection/analyticsjs/) plugin. It is a JavaScript library for measuring how users interact with your website.\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-google-analytics\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency.\n\n:::\n\n**Configuration**\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: ['@docusaurus/plugin-google-analytics'],\n  themeConfig: {\n    googleAnalytics: {\n      trackingID: 'UA-141789564-1',\n      // Optional fields.\n      anonymizeIP: true, // Should IPs be anonymized?\n    },\n  },\n};\n```\n\n### `@docusaurus/plugin-google-gtag`\n\nThe default [Global Site Tag (gtag.js)](https://developers.google.com/analytics/devguides/collection/gtagjs/) plugin. It is a JavaScript tagging framework and API that allows you to send event data to Google Analytics, Google Ads, and Google Marketing Platform. This section describes how to configure a Docusaurus site to enable global site tag for Google Analytics.\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-google-gtag\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency.\n\n:::\n\n**Configuration**\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: ['@docusaurus/plugin-google-gtag'],\n  themeConfig: {\n    gtag: {\n      trackingID: 'UA-141789564-1',\n      // Optional fields.\n      anonymizeIP: true, // Should IPs be anonymized?\n    },\n  },\n};\n```\n\n### `@docusaurus/plugin-sitemap`\n\nThis plugin creates sitemap for your site so that search engine crawlers can crawl your site more accurately.\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-sitemap\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency. You can also configure it through the [classic preset options](presets.md#docusauruspreset-classic) instead of doing it like below.\n\n:::\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-sitemap',\n      {\n        cacheTime: 600 * 1000, // 600 sec - cache purge period\n        changefreq: 'weekly',\n        priority: 0.5,\n        trailingSlash: false,\n      },\n    ],\n  ],\n};\n```\n\n### `@docusaurus/plugin-ideal-image`\n\nDocusaurus Plugin to generate an almost ideal image (responsive, lazy-loading, and low quality placeholder) **in the production builds**.\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-ideal-image\n```\n\nModify your `docusaurus.config.js`\n\n```diff\nmodule.exports = {\n  ...\n+ plugins: ['@docusaurus/plugin-ideal-image'],\n  ...\n}\n```\n\n#### Usage\n\nThis plugin supports the PNG, GIF and JPG formats only.\n\n```jsx\nimport Image from '@theme/IdealImage';\nimport thumbnail from './path/to/img.png';\n\n// your React code\n<Image img={thumbnail} />\n\n// or\n<Image img={require('./path/to/img.png')} />\n```\n\n#### Options\n\n| Option | Type | Default | Description |\n| --- | --- | --- | --- |\n| `name` | `string` | `ideal-img/[name].[hash:hex:7].[width].[ext]` | Filename template for output files. |\n| `sizes` | `array` | _original size_ | Specify all widths you want to use. If a specified size exceeds the original image's width, the latter will be used (i.e. images won't be scaled up). |\n| `size` | `integer` | _original size_ | Specify one width you want to use; if the specified size exceeds the original image's width, the latter will be used (i.e. images won't be scaled up) |\n| `min` | `integer` |  | As an alternative to manually specifying `sizes`, you can specify `min`, `max` and `steps`, and the sizes will be generated for you. |\n| `max` | `integer` |  | See `min` above |\n| `steps` | `integer` | `4` | Configure the number of images generated between `min` and `max` (inclusive) |\n| `quality` | `integer` | `85` | JPEG compression quality |\n\n### `@docusaurus/plugin-client-redirects`\n\nDocusaurus Plugin to generate **client-side redirects**.\n\nThis plugin will write additional HTML pages to your static site, that redirects the user to your existing Docusaurus pages with JavaScript.\n\n:::note\n\nThis plugin only create redirects for the production build.\n\n:::\n\n:::caution\n\nIt is better to use server-side redirects whenever possible.\n\nBefore using this plugin, you should look if your hosting provider doesn't offer this feature.\n\n:::\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-client-redirects\n```\n\n**Configuration**\n\nMain usecase: you have `/myDocusaurusPage`, and you want to redirect to this page from `/myDocusaurusPage.html`:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-client-redirects',\n      {\n        fromExtensions: ['html'],\n      },\n    ],\n  ],\n};\n```\n\nSecond usecase: you have `/myDocusaurusPage.html`, and you want to redirect to this page from `/myDocusaurusPage`.\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-client-redirects',\n      {\n        toExtensions: ['html'],\n      },\n    ],\n  ],\n};\n```\n\nFor custom redirect logic, provide your own `createRedirects` function.\n\nLet's imagine you change the url of an existing page, you might want to make sure the old url still works:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-client-redirects',\n      {\n        redirects: [\n          {\n            to: '/docs/newDocPath', // string\n            from: ['/docs/oldDocPathFrom2019', '/docs/legacyDocPathFrom2016'], // string | string[]\n          },\n        ],\n      },\n    ],\n  ],\n};\n```\n\nIt's possible to use a function to create the redirects for each existing path:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-client-redirects',\n      {\n        createRedirects: function (existingPath) {\n          if (existingPath === '/docs/newDocPath') {\n            return ['/docs/oldDocPathFrom2019', '/docs/legacyDocPathFrom2016']; // string | string[]\n          }\n        },\n      },\n    ],\n  ],\n};\n```\n\nFinally, it's possible to use all options at the same time:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-client-redirects',\n      {\n        fromExtensions: ['html', 'htm'],\n        toExtensions: ['exe', 'zip'],\n        redirects: [\n          {\n            to: '/docs/newDocPath',\n            from: '/docs/oldDocPath',\n          },\n        ],\n        createRedirects: function (existingPath) {\n          if (existingPath === '/docs/newDocPath2') {\n            return ['/docs/oldDocPath2'];\n          }\n        },\n      },\n    ],\n  ],\n};\n```\n\n### `@docusaurus/plugin-pwa`\n\nDocusaurus Plugin to add PWA support using [Workbox](https://developers.google.com/web/tools/workbox). This plugin generates a [Service Worker](https://developers.google.com/web/fundamentals/primers/service-workers) in production build only, and allows you to create fully PWA-compliant documentation site with offline and installation support.\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-pwa\n```\n\nCreate a [PWA manifest](https://web.dev/add-manifest/) at `./static/manifest.json`.\n\nModify `docusaurus.config.js` with a minimal PWA config, like:\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-pwa',\n      {\n        debug: true,\n        offlineModeActivationStrategies: ['appInstalled', 'queryString'],\n        pwaHead: [\n          {\n            tagName: 'link',\n            rel: 'icon',\n            href: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'link',\n            rel: 'manifest',\n            href: '/manifest.json', // your PWA manifest\n          },\n          {\n            tagName: 'meta',\n            name: 'theme-color',\n            content: 'rgb(37, 194, 160)',\n          },\n        ],\n      },\n    ],\n  ],\n};\n```\n\n#### Progressive Web App\n\nHaving a service worker installed is not enough to make your application a PWA. You'll need to at least include a [Web App Manifest](https://developer.mozilla.org/en-US/docs/Web/Manifest) and have the correct tags in `<head>` ([Options > pwaHead](#pwahead)).\n\nAfter deployment, you can use [Lighthouse](https://developers.google.com/web/tools/lighthouse) to run an audit on your site.\n\nFor a more exhaustive list of what it takes for your site to be a PWA, refer to the [PWA Checklist](https://developers.google.com/web/progressive-web-apps/checklist)\n\n#### App installation support\n\nIf your browser supports it, you should be able to install a Docusaurus site as an app.\n\n![pwa_install.gif](/img/pwa_install.gif)\n\n#### Offline mode (precaching)\n\nWe enable users to browse a Docusaurus site offline, by using service-worker precaching.\n\n> ### [What is Precaching?](https://developers.google.com/web/tools/workbox/modules/workbox-precaching)\n>\n> One feature of service workers is the ability to save a set of files to the cache when the service worker is installing. This is often referred to as \"precaching\", since you are caching content ahead of the service worker being used.\n>\n> The main reason for doing this is that it gives developers control over the cache, meaning they can determine when and how long a file is cached as well as serve it to the browser without going to the network, meaning it can be used to create web apps that work offline.\n>\n> Workbox takes a lot of the heavy lifting out of precaching by simplifying the API and ensuring assets are downloaded efficiently.\n\nBy default, offline mode is enabled when the site is installed as an app. See the `offlineModeActivationStrategies` option for details.\n\nAfter the site has been precached, the service worker will serve cached responses for later visits. When a new build is deployed along with a new service worker, the new one will begin installing and eventually move to a waiting state. During this waiting state, a reload popup will show and ask the user to reload the page for new content. Until the user either clears the application cache or clicks the `reload` button on the popup, the service worker will continue serving the old content.\n\n:::caution\n\nOffline mode / precaching requires downloading all the static assets of the site ahead of time, and can consume unnecessary bandwidth. It may not be a good idea to activate it for all kind of sites.\n\n:::\n\n##### Options\n\n##### `debug`\n\n- Type: `boolean`\n- Default: `false`\n\nTurn debug mode on:\n\n- Workbox logs\n- Additional Docusaurus logs\n- Unoptimized SW file output\n- Source maps\n\n##### `offlineModeActivationStrategies`\n\n- Type: `Array<'appInstalled' | 'mobile' | 'saveData'| 'queryString' | 'always'>`\n- Default: `['appInstalled','queryString']`\n\nStrategies used to turn the offline mode on:\n\n- `appInstalled`: activates for users having installed the site as an app\n- `queryString`: activates if queryString contains `offlineMode=true` (convenient for PWA debugging)\n- `mobile`: activates for mobile users (width <= 940px)\n- `saveData`: activates for users with `navigator.connection.saveData === true`\n- `always`: activates for all users\n\n:::caution\n\nUse this carefully: some users may not like to be forced to use the offline mode.\n\n:::\n\n##### `injectManifestConfig`\n\n[Workbox options](https://developers.google.com/web/tools/workbox/reference-docs/latest/module-workbox-build#.injectManifest) to pass to `workbox.injectManifest()`. This gives you control over which assets will be precached, and be available offline.\n\n- Type: `InjectManifestOptions`\n- Default: `{}`\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-pwa',\n      {\n        injectManifestConfig: {\n          manifestTransforms: [\n            //...\n          ],\n          modifyURLPrefix: {\n            //...\n          },\n          // We already add regular static assets (html, images...) to be available offline\n          // You can add more files according to your needs\n          globPatterns: ['**/*.{pdf,docx,xlsx}'],\n          // ...\n        },\n      },\n    ],\n  ],\n};\n```\n\n##### `reloadPopup`\n\n- Type: `string | false`\n- Default: `'@theme/PwaReloadPopup'`\n\nModule path to reload popup component. This popup is rendered when a new service worker is waiting to be installed, and we suggest a reload to the user.\n\nPassing `false` will disable the popup, but this is not recommended: users won't have a way to get up-to-date content.\n\nA custom component can be used, as long as it accepts `onReload` as a prop. The `onReload` callback should be called when the `reload` button is clicked. This will tell the service worker to install the waiting service worker and reload the page.\n\n```ts\ninterface PwaReloadPopupProps {\n  onReload: () => void;\n}\n```\n\nThe default theme includes an implementation for the reload popup and uses [Infima Alerts](https://facebookincubator.github.io/infima/docs/components/alert).\n\n![pwa_reload.gif](/img/pwa_reload.gif)\n\n##### `pwaHead`\n\n- Type: `Array<{ tagName: string } & Record<string,string>>`\n- Default: `[]`\n\nArray of objects containing `tagName` and key-value pairs for attributes to inject into the `<head>` tag. Technically you can inject any head tag through this, but it's ideally used for tags to make your site PWA compliant. Here's a list of tag to make your app fully compliant:\n\n```js\nmodule.exports = {\n  plugins: [\n    [\n      '@docusaurus/plugin-pwa',\n      {\n        pwaHead: [\n          {\n            tagName: 'link',\n            rel: 'icon',\n            href: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'link',\n            rel: 'manifest',\n            href: '/manifest.json',\n          },\n          {\n            tagName: 'meta',\n            name: 'theme-color',\n            content: 'rgb(37, 194, 160)',\n          },\n          {\n            tagName: 'meta',\n            name: 'apple-mobile-web-app-capable',\n            content: 'yes',\n          },\n          {\n            tagName: 'meta',\n            name: 'apple-mobile-web-app-status-bar-style',\n            content: '#000',\n          },\n          {\n            tagName: 'link',\n            rel: 'apple-touch-icon',\n            href: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'link',\n            rel: 'mask-icon',\n            href: '/img/docusaurus.svg',\n            color: 'rgb(37, 194, 160)',\n          },\n          {\n            tagName: 'meta',\n            name: 'msapplication-TileImage',\n            content: '/img/docusaurus.png',\n          },\n          {\n            tagName: 'meta',\n            name: 'msapplication-TileColor',\n            content: '#000',\n          },\n        ],\n      },\n    ],\n  ],\n};\n```\n\n##### `swCustom`\n\n- Type: `string | undefined`\n- Default: `undefined`\n\nUseful for additional Workbox rules. You can do whatever a service worker can do here, and use the full power of workbox libraries. The code is transpiled, so you can use modern ES6+ syntax here.\n\nFor example, to cache files from external routes:\n\n```js\nimport {registerRoute} from 'workbox-routing';\nimport {StaleWhileRevalidate} from 'workbox-strategies';\n\n// default fn export receiving some useful params\nexport default function swCustom(params) {\n  const {\n    debug, // :boolean\n    offlineMode, // :boolean\n  } = params;\n\n  // Cache responses from external resources\n  registerRoute((context) => {\n    return [\n      /graph\\.facebook\\.com\\/.*\\/picture/,\n      /netlify\\.com\\/img/,\n      /avatars1\\.githubusercontent/,\n    ].some((regex) => context.url.href.match(regex));\n  }, new StaleWhileRevalidate());\n}\n```\n\nThe module should have a `default` function export, and receives some params.\n\n##### `swRegister`\n\n- Type: `string | false`\n- Default: `'docusaurus-plugin-pwa/src/registerSW.js'`\n\nAdds an entry before the Docusaurus app so that registration can happen before the app runs. The default `registerSW.js` file is enough for simple registration.\n\nPassing `false` will disable registration entirely.\n\n### `@docusaurus/plugin-debug`\n\nThe debug plugin will display useful debug information at [http://localhost:3000/\\_\\_docusaurus/debug](http://localhost:3000/__docusaurus/debug).\n\nIt is mostly useful for plugin authors, that will be able to inspect more easily the content of the `.docusaurus` folder (like the creates routes), but also be able to inspect data structures that are never written to disk, like the plugin data loaded through the `contentLoaded` lifecycle.\n\n:::note\n\nIf you report a bug, we will probably ask you to have this plugin turned on in the production, so that we can inspect your deployment config more easily.\n\nIf you don't have any sensitive information, you can keep it on in production [like we do](http://v2.docusaurus.io/__docusaurus/debug).\n\n:::\n\n**Installation**\n\n```bash npm2yarn\nnpm install --save @docusaurus/plugin-debug\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency. You can also configure it through the [classic preset options](presets.md#docusauruspreset-classic) instead of doing it like below.\n\nBy default, it's enabled in dev, and disabled in prod, to avoid exposing potentially sensitive information.\n\n:::\n\n```js title=\"docusaurus.config.js\"\nmodule.exports = {\n  plugins: ['@docusaurus/plugin-debug'],\n};\n```\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.2697169323096529,
      "title": "using-themes",
      "fileContents": "---\nid: using-themes\ntitle: Themes\n---\n\nLike plugins, themes are designed to add functionality to your Docusaurus site. As a good rule of thumb, themes are mostly focused on client-side, where plugins are more focused on server-side functionalities. Themes are also designed to be replace-able with other themes.\n\n## Using themes\n\nTo use themes, specify the themes in your `docusaurus.config.js`. You may use multiple themes:\n\n```js {3} title=\"docusaurus.config.js\"\nmodule.exports = {\n  // ...\n  themes: ['@docusaurus/theme-classic', '@docusaurus/theme-live-codeblock'],\n};\n```\n\n## Theme components\n\nMost of the time, theme is used to provide a set of React components, e.g. `Navbar`, `Layout`, `Footer`.\n\nUsers can use these components in their code by importing them using the `@theme` webpack alias:\n\n```js\nimport Navbar from '@theme/Navbar';\n```\n\nThe alias `@theme` can refer to a few directories, in the following priority:\n\n1. A user's `website/src/theme` directory, which is a special directory that has the higher precedence.\n1. A Docusaurus theme packages's `theme` directory.\n1. Fallback components provided by Docusaurus core (usually not needed).\n\nGiven the following structure\n\n```\nwebsite\n├── node_modules\n│   └── docusaurus-theme\n│       └── theme\n│           └── Navbar.js\n└── src\n    └── theme\n        └── Navbar.js\n```\n\n`website/src/theme/Navbar.js` takes precedence whenever `@theme/Navbar` is imported. This behavior is called component swizzling. In iOS, method swizzling is the process of changing the implementation of an existing selector (method). In the context of a website, component swizzling means providing an alternative component that takes precedence over the component provided by the theme.\n\n**Themes are for providing UI components to present the content.** Most content plugins need to be paired with a theme in order to be actually useful. The UI is a separate layer from the data schema, so it makes it easy to swap out the themes for other designs (i.e., Bootstrap).\n\nFor example, a Docusaurus blog consists of a blog plugin and a blog theme.\n\n```js title=\"docusaurus.config.js\"\n{\n  theme: ['theme-blog'],\n  plugins: ['plugin-content-blog'],\n}\n```\n\nAnd if you want to use Bootstrap styling, you can swap out the theme with `theme-blog-bootstrap` (fictitious non-existing theme):\n\n```js title=\"docusaurus.config.js\"\n{\n  theme: ['theme-blog-bootstrap'],\n  plugins: ['plugin-content-blog'],\n}\n```\n\nThe content plugin remains the same and the only thing you need to change is the theme.\n\n## Swizzling theme components\n\n:::caution\n\nWe would like to discourage swizzling of components until we've minimally reached a Beta stage. The components APIs have been changing rapidly and are likely to keep changing until we reach Beta. Stick with the default appearance for now if possible to save yourself some potential pain in future.\n\n:::\n\nDocusaurus Themes' components are designed to be replaceable. To make it easier for you, we created a command for you to replace theme components called `swizzle`.\n\nTo swizzle a component for a theme, run the following command in your doc site:\n\n```shell\ndocusaurus swizzle <theme name> [component name]\n```\n\nAs an example, to swizzle the `<Footer />` component in `@docusaurus/theme-classic` for your site, run:\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-classic Footer\n```\n\nThis will copy the current `<Footer />` component used by the theme to a `src/theme/Footer` directory under the root of your site, which is where Docusaurus will look for swizzled components. Docusaurus will then use swizzled component in place of the original one from the theme.\n\nAlthough we highly discourage swizzling of all components, if you wish to do that, run:\n\n```bash npm2yarn\nnpm run swizzle @docusaurus/theme-classic\n```\n\n**Note**: You need to restart your webpack dev server in order for Docusaurus to know about the new component.\n\n## Wrapping theme components\n\nSometimes, you just want to wrap an existing theme component with additional logic, and it can be a pain to have to maintain an almost duplicate copy of the original theme component.\n\nIn such case, you should swizzle the component you want to wrap, but import the original theme component in your customized version to wrap it.\n\n### For site owners\n\nThe `@theme-original` alias allows you to import the original theme component.\n\nHere is an example to display some text just above the footer, with minimal code duplication.\n\n```js title=\"src/theme/Footer.js\"\n// Note: importing from \"@theme/Footer\" would fail due to the file importing itself\nimport OriginalFooter from '@theme-original/Footer';\n\nexport default function Footer(props) {\n  return (\n    <>\n      <div>Before footer</div>\n      <OriginalFooter {...props} />\n    </>\n  );\n}\n```\n\n### For plugin authors\n\nOne theme can wrap a component from another theme, by importing the component from the initial theme, using the `@theme-init` import.\n\nHere's an example of using this feature to enhance the default theme `CodeBlock` component with a `react-live` playground feature.\n\n```js\nimport InitialCodeBlock from '@theme-init/CodeBlock';\n\nexport default function CodeBlock(props) {\n  return props.live ? (\n    <ReactLivePlayground {...props} />\n  ) : (\n    <InitialCodeBlock {...props} />\n  );\n}\n```\n\nCheck the code of `docusaurus-theme-live-codeblock` for details.\n\n:::caution\n\nUnless you want publish to npm a \"theme enhancer\" (like `docusaurus-theme-live-codeblock`), you likely don't need `@theme-init`.\n\n:::\n\n## Official themes by Docusaurus\n\n### `@docusaurus/theme-classic`\n\nThe classic theme for Docusaurus. You can refer to [classic theme configuration](theme-classic.md) for more details on the configuration.\n\n```bash npm2yarn\nnpm install --save @docusaurus/theme-classic\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency.\n\n:::\n\n### `@docusaurus/theme-bootstrap`\n\nThe bootstrap theme for Docusaurus. You can refer to [bootstrap theme configuration](theme-bootstrap.md) for more details on the configuration.\n\n```bash npm2yarn\nnpm install --save @docusaurus/theme-bootstrap\n```\n\n:::tip\n\nIf you have installed `@docusaurus/preset-bootstrap`, you don't need to install it as a dependency.\n\n:::\n\n:::caution\n\nThis theme is a work in progress.\n\n:::\n\n### `@docusaurus/theme-search-algolia`\n\nThis theme provides a `@theme/SearchBar` component that integrates with Algolia DocSearch easily. Combined with `@docusaurus/theme-classic`, it provides a very easy search integration. You can read more on [search](search.md) documentation.\n\n```bash npm2yarn\nnpm install --save @docusaurus/theme-search-algolia\n```\n\nThis theme also adds search page available at `/search` (as swizzleable `SearchPage` component) path with OpenSearch support.\n\n:::tip\n\nIf you have installed `@docusaurus/preset-classic`, you don't need to install it as a dependency.\n\n:::\n\n### `@docusaurus/theme-live-codeblock`\n\nThis theme provides a `@theme/CodeBlock` component that is powered by react-live. You can read more on [interactive code editor](markdown-features.mdx#interactive-code-editor) documentation.\n\n```bash npm2yarn\nnpm install --save @docusaurus/theme-live-codeblock\n```\n\n## Themes design\n\nWhile themes share the exact same lifecycle methods with plugins, their implementations can look very different from those of plugins based on themes' designed objectives.\n\nThemes are designed to complete the build of your Docusaurus site and supply the components used by your site, plugins, and the themes themselves. So a typical theme implementation would look like a `src/index.js` file that hooks it up to the lifecycle methods. Most likely they would not use `loadContent`, which plugins would use. And it is typically accompanied by a `src/theme` directory full of components.\n\nTo summarize:\n\n- Themes share the same lifecycle methods with Plugins\n- Themes are run after all existing Plugins\n- Themes exist to add component aliases by extending the webpack config\n\n## Writing customized Docusaurus themes\n\nA Docusaurus theme normally includes an `index.js` file where you hook up to the lifecycle methods, alongside with a `theme/` directory of components. A typical Docusaurus `theme` folder looks like this:\n\n```shell {5-7}\nwebsite\n├── package.json\n└── src\n    ├── index.js\n    └── theme\n        ├── MyThemeComponent\n        └── AnotherThemeComponent.js\n```\n\nThere are two lifecycle methods that are essential to theme implementation:\n\n- [`getThemePath()`](lifecycle-apis.md#getthemepath)\n- [`getClientModules()`](lifecycle-apis.md#getclientmodules)\n\nThese lifecycle method are not essential but recommended:\n\n- [`validateThemeConfig({themeConfig, validate})`](lifecycle-apis.md#validatethemeconfigthemeconfig-validate)\n- [`validateOptions({options, validate})`](lifecycle-apis.md#validateoptionsoptions-validate)\n\n<!--\n\nOutline\n---\nHigh-level overview about themes:\n- how to use a theme\n- how to pass theme configurations\n- how to swizzle components and the power of it\n\nRelated pieces\n---\n\n- [Advanced Guides – Themes](using-themes.md)\n- [Lifecycle APIs](lifecycle-apis.md)\n\nReferences\n---\n- [themes RFC](https://github.com/facebook/docusaurus/issues/1438)\n- [how classic template uses themes](/packages/docusaurus/templates/classic/docusaurus.config.js)\n- [using plugins doc](using-plugins.md)\n- [vuepress docs on themes](https://v1.vuepress.vuejs.org/theme/)\n\n-->\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    },
    {
      "id": 0.538207861746856,
      "title": "versioning",
      "fileContents": "---\nid: versioning\ntitle: Versioning\n---\n\nYou can use the version script to create a new documentation version based on the latest content in the `docs` directory. That specific set of documentation will then be preserved and accessible even as the documentation in the `docs` directory changes moving forward.\n\n:::caution\n\nThink about it before starting to version your documentation - it can become difficult for contributors to help improve it!\n\n:::\n\nMost of the time, you don't need versioning as it will just increase your build time, and introduce complexity to your codebase. Versioning is **best suited for websites with high-traffic and rapid changes to documentation between versions**. If your documentation rarely changes, don't add versioning to your documentation.\n\nTo better understand how versioning works and see if it suits your needs, you can read on below.\n\n## Directory structure\n\n```shell\nwebsite\n├── sidebars.json        # sidebar for master (next) version\n├── docs                 # docs directory for master (next) version\n│   ├── foo\n│   │   └── bar.md       # https://mysite.com/docs/next/foo/bar\n│   └── hello.md         # https://mysite.com/docs/next/hello\n├── versions.json        # file to indicate what versions are available\n├── versioned_docs\n│   ├── version-1.1.0\n│   │   ├── foo\n│   │   │   └── bar.md   # https://mysite.com/docs/foo/bar\n│   │   └── hello.md\n│   └── version-1.0.0\n│       ├── foo\n│       │   └── bar.md   # https://mysite.com/docs/1.0.0/foo/bar\n│       └── hello.md\n├── versioned_sidebars\n│   ├── version-1.1.0-sidebars.json\n│   └── version-1.0.0-sidebars.json\n├── docusaurus.config.js\n└── package.json\n```\n\nThe table below explains how a versioned file maps to its version and the generated URL.\n\n| Path                                    | Version        | URL               |\n| --------------------------------------- | -------------- | ----------------- |\n| `versioned_docs/version-1.0.0/hello.md` | 1.0.0          | /docs/1.0.0/hello |\n| `versioned_docs/version-1.1.0/hello.md` | 1.1.0 (latest) | /docs/hello       |\n| `docs/hello.md`                         | next           | /docs/next/hello  |\n\n### Tagging a new version\n\n1. First, make sure your content in the `docs` directory is ready to be frozen as a version. A version always should be based from master.\n1. Enter a new version number.\n\n```bash npm2yarn\nnpm run docusaurus docs:version 1.1.0\n```\n\nWhen tagging a new version, the document versioning mechanism will:\n\n- Copy the full `docs/` folder contents into a new `versioned_docs/version-<version>/` folder.\n- Create a versioned sidebars file based from your current [sidebar](docs.md#sidebar) configuration (if it exists) - saved as `versioned_sidebars/version-<version>-sidebars.json`.\n- Append the new version number to `versions.json`.\n\n## Docs\n\n### Creating new docs\n\n1. Place the new file into the corresponding version folder.\n1. Include the reference for the new file into the corresponding sidebar file, according to version number.\n\n**Master docs**\n\n```shell\n# The new file.\ndocs/new.md\n\n# Edit the corresponding sidebar file.\nsidebar.js\n```\n\n**Older docs**\n\n```shell\n# The new file.\nversioned_docs/version-1.0.0/new.md\n\n# Edit the corresponding sidebar file.\nversioned_sidebars/version-1.0.0-sidebars.json\n```\n\n### Linking docs\n\n- Remember to include the `.md` extension.\n- Files will be linked to correct corresponding version.\n- Relative paths work as well.\n\n```md\nThe [@hello](hello.md#paginate) document is great!\n\nSee the [Tutorial](../getting-started/tutorial.md) for more info.\n```\n\n## Versions\n\nEach directory in `versioned_docs/` will represent a documentation version.\n\n### Updating an existing version\n\nYou can update multiple docs versions at the same time because each directory in `versioned_docs/` represents specific routes when published.\n\n1. Edit any file.\n1. Commit and push changes.\n1. It will be published to the version.\n\nExample: When you change any file in `versioned_docs/version-2.6/`, it will only affect the docs for version `2.6`.\n\n### Deleting an existing version\n\nYou can delete/remove versions as well.\n\n1. Remove the version from `versions.json`.\n\nExample:\n\n```diff {4}\n[\n  \"2.0.0\",\n  \"1.9.0\",\n- \"1.8.0\"\n]\n```\n\n2. Delete the versioned docs directory. Example: `versioned_docs/version-1.8.0`.\n3. Delete the versioned sidebars file. Example: `versioned_sidebars/version-1.8.0-sidebars.json`.\n\n## Recommended practices\n\n### Figure out the behavior for the \"current\" version\n\nThe \"current\" version is the version name for the `./docs` folder.\n\nThere are different ways to manage versioning, but two very common patterns are:\n\n- You release v1, and start immediately working on v2 (including its docs)\n- You release v1, and will maintain it for some time before thinking about v2.\n\nDocusaurus defaults work great for the first usecase.\n\n**For the 2nd usecase**: if you release v1 and don't plan to work on v2 anytime soon, instead of versioning v1 and having to maintain the docs in 2 folders (`./docs` + `./versioned_docs/version-1.0.0`), you may consider using the following configuration instead:\n\n```json\n{\n  \"lastVersion\": \"current\",\n  \"versions\": {\n    \"current\": {\n      \"label\": \"1.0.0\",\n      \"path\": \"1.0.0\"\n    }\n  }\n}\n```\n\nThe docs in `./docs` will be served at `/docs/1.0.0` instead of `/docs/next`, and `1.0.0` will become the default version we link to in the navbar dropdown, and you will only need to maintain a single `./docs` folder.\n\nSee [docs plugin configuration](using-plugins#docusaurusplugin-content-docs) for more details.\n\n### Version your documentation only when needed\n\nFor example, you are building a documentation for your npm package `foo` and you are currently in version 1.0.0. You then release a patch version for a minor bug fix and it's now 1.0.1.\n\nShould you cut a new documentation version 1.0.1? **You probably shouldn't**. 1.0.1 and 1.0.0 docs shouldn't differ according to semver because there are no new features!. Cutting a new version for it will only just create unnecessary duplicated files.\n\n### Keep the number of versions small\n\nAs a good rule of thumb, try to keep the number of your versions below 10. **It is very likely** that you will have a lot of obsolete versioned documentation that nobody even reads anymore. For example, [Jest](https://jestjs.io/versions) is currently in version `24.9`, and only maintains several latest documentation version with the lowest being `22.X`. Keep it small 😊\n\n### Use absolute import within the docs\n\nDon't use relative paths import within the docs. Because when we cut a version the paths no longer work (the nesting level is different, among other reasons). You can utilize the `@site` alias provided by docusaurus, that points to the `website` directory. Example:\n\n```diff\n- import Foo from '../src/components/Foo';\n+ import Foo from '@site/src/components/Foo';\n```\n\n### Global or versioned colocated assets\n\nYou should decide if assets like images and files are per version or shared between versions\n\nIf your assets should be versioned, put them in the docs version, and use relative paths:\n\n```md\n![img alt](./myImage.png)\n\n[download this file](./file.pdf)\n```\n\nIf your assets are global, put them in `/static` and use absolute paths:\n\n```md\n![img alt](/myImage.png)\n\n[download this file](/file.pdf)\n```\n",
      "x": 100,
      "y": 100,
      "type": "empty"
    }
  ],
  "edges": [
    {
      "source": "docusaurus.config.js",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    {
      "source": "migrating-from-v1-to-v2",
      "target": "using-themes",
      "type": "emptyEdge"
    },
    {
      "source": "configuration",
      "target": "using-themes",
      "type": "emptyEdge"
    },
    {
      "source": "configuration",
      "target": "using-plugins",
      "type": "emptyEdge"
    },
    { "source": "configuration", "target": "presets", "type": "emptyEdge" },
    {
      "source": "configuration",
      "target": "using-themes",
      "type": "emptyEdge"
    },
    {
      "source": "configuration",
      "target": "using-plugins",
      "type": "emptyEdge"
    },
    { "source": "configuration", "target": "presets", "type": "emptyEdge" },
    { "source": "contributing", "target": "installation", "type": "emptyEdge" },
    { "source": "deployment", "target": "cli", "type": "emptyEdge" },
    { "source": "deployment", "target": "cli", "type": "emptyEdge" },
    { "source": "docs-introduction", "target": "blog", "type": "emptyEdge" },
    { "source": "installation", "target": "blog", "type": "emptyEdge" },
    { "source": "search", "target": "styling-layout", "type": "emptyEdge" },
    {
      "source": "theme-bootstrap",
      "target": "static-assets",
      "type": "emptyEdge"
    },
    {
      "source": "theme-bootstrap",
      "target": "static-assets",
      "type": "emptyEdge"
    },
    {
      "source": "theme-classic",
      "target": "static-assets",
      "type": "emptyEdge"
    },
    { "source": "using-plugins", "target": "presets", "type": "emptyEdge" },
    {
      "source": "using-plugins",
      "target": "using-plugins",
      "type": "emptyEdge"
    },
    {
      "source": "using-plugins",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    { "source": "using-plugins", "target": "blog", "type": "emptyEdge" },
    { "source": "using-plugins", "target": "presets", "type": "emptyEdge" },
    { "source": "using-plugins", "target": "presets", "type": "emptyEdge" },
    { "source": "using-plugins", "target": "presets", "type": "emptyEdge" },
    { "source": "using-plugins", "target": "presets", "type": "emptyEdge" },
    { "source": "using-plugins", "target": "presets", "type": "emptyEdge" },
    {
      "source": "using-themes",
      "target": "theme-classic",
      "type": "emptyEdge"
    },
    {
      "source": "using-themes",
      "target": "theme-bootstrap",
      "type": "emptyEdge"
    },
    { "source": "using-themes", "target": "search", "type": "emptyEdge" },
    {
      "source": "using-themes",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    {
      "source": "using-themes",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    {
      "source": "using-themes",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    {
      "source": "using-themes",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    { "source": "using-themes", "target": "using-themes", "type": "emptyEdge" },
    {
      "source": "using-themes",
      "target": "lifecycle-apis",
      "type": "emptyEdge"
    },
    {
      "source": "using-themes",
      "target": "using-plugins",
      "type": "emptyEdge"
    },
    { "source": "versioning", "target": "using-plugins", "type": "emptyEdge" }
  ]
}
